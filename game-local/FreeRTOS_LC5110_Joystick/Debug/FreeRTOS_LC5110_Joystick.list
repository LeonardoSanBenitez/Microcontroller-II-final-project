
FreeRTOS_LC5110_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b18  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080074e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003778  20000070  08007558  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200037e8  08007558  000237e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e745  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000044d3  00000000  00000000  0003e7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009cce  00000000  00000000  00042cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e10  00000000  00000000  0004c980  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012d8  00000000  00000000  0004d790  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001a7cd  00000000  00000000  0004ea68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f49f  00000000  00000000  00069235  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00081e49  00000000  00000000  000786d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000fa51d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000330c  00000000  00000000  000fa598  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         000000cc  00000000  00000000  000fd8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  000fd970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080049ac 	.word	0x080049ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080049ac 	.word	0x080049ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	d1ed      	bne.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x20>)
{
 8000b5a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	f000 fb2d 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f002 fea4 	bl	80038b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f002 fe12 	bl	8003798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000b74:	2000      	movs	r0, #0
 8000b76:	bd08      	pop	{r3, pc}
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b7c:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_IncTick+0x10>)
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_IncTick+0x14>)
 8000b80:	6811      	ldr	r1, [r2, #0]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	440b      	add	r3, r1
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200037a0 	.word	0x200037a0
 8000b90:	20000000 	.word	0x20000000

08000b94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b94:	4b01      	ldr	r3, [pc, #4]	; (8000b9c <HAL_GetTick+0x8>)
 8000b96:	6818      	ldr	r0, [r3, #0]
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200037a0 	.word	0x200037a0

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff fff6 	bl	8000b94 <HAL_GetTick>
 8000ba8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bac:	bf1e      	ittt	ne
 8000bae:	4b04      	ldrne	r3, [pc, #16]	; (8000bc0 <HAL_Delay+0x20>)
 8000bb0:	781b      	ldrbne	r3, [r3, #0]
 8000bb2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	1b40      	subs	r0, r0, r5
 8000bba:	42a0      	cmp	r0, r4
 8000bbc:	d3fa      	bcc.n	8000bb4 <HAL_Delay+0x14>
  {
  }
}
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000bc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000bc6:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bca:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000bce:	d11b      	bne.n	8000c08 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	6892      	ldr	r2, [r2, #8]
 8000bdc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000be0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000be4:	d10c      	bne.n	8000c00 <ADC_DMAConvCplt+0x3c>
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	b952      	cbnz	r2, 8000c00 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bf4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bf6:	bf5e      	ittt	pl
 8000bf8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000bfa:	f042 0201 	orrpl.w	r2, r2, #1
 8000bfe:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 f951 	bl	8002ea8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000c06:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000c08:	6a1b      	ldr	r3, [r3, #32]
}
 8000c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4718      	bx	r3

08000c12 <HAL_ADC_ConvHalfCpltCallback>:
 8000c12:	4770      	bx	lr

08000c14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000c14:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000c16:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000c18:	f7ff fffb 	bl	8000c12 <HAL_ADC_ConvHalfCpltCallback>
}
 8000c1c:	bd08      	pop	{r3, pc}

08000c1e <HAL_ADC_LevelOutOfWindowCallback>:
 8000c1e:	4770      	bx	lr

08000c20 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c20:	6803      	ldr	r3, [r0, #0]
{
 8000c22:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c24:	685a      	ldr	r2, [r3, #4]
{
 8000c26:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c28:	0690      	lsls	r0, r2, #26
 8000c2a:	d527      	bpl.n	8000c7c <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	0791      	lsls	r1, r2, #30
 8000c30:	d524      	bpl.n	8000c7c <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c34:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c36:	bf5e      	ittt	pl
 8000c38:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c3a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000c3e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000c46:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000c4a:	d110      	bne.n	8000c6e <HAL_ADC_IRQHandler+0x4e>
 8000c4c:	68e2      	ldr	r2, [r4, #12]
 8000c4e:	b972      	cbnz	r2, 8000c6e <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	f022 0220 	bic.w	r2, r2, #32
 8000c56:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5e:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c62:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c64:	bf5e      	ittt	pl
 8000c66:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c68:	f043 0301 	orrpl.w	r3, r3, #1
 8000c6c:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f002 f91a 	bl	8002ea8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c74:	f06f 0212 	mvn.w	r2, #18
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	0610      	lsls	r0, r2, #24
 8000c82:	d530      	bpl.n	8000ce6 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	0751      	lsls	r1, r2, #29
 8000c88:	d52d      	bpl.n	8000ce6 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c8c:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c8e:	bf5e      	ittt	pl
 8000c90:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000c92:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000c96:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000c9e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000ca2:	d00a      	beq.n	8000cba <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ca4:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ca6:	0550      	lsls	r0, r2, #21
 8000ca8:	d416      	bmi.n	8000cd8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cb0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000cb4:	d110      	bne.n	8000cd8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cb6:	68e2      	ldr	r2, [r4, #12]
 8000cb8:	b972      	cbnz	r2, 8000cd8 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cc0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cc8:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ccc:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cce:	bf5e      	ittt	pl
 8000cd0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000cd2:	f043 0301 	orrpl.w	r3, r3, #1
 8000cd6:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f000 fa71 	bl	80011c0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cde:	f06f 020c 	mvn.w	r2, #12
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	0652      	lsls	r2, r2, #25
 8000cec:	d50d      	bpl.n	8000d0a <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	07db      	lsls	r3, r3, #31
 8000cf2:	d50a      	bpl.n	8000d0a <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cf6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cfe:	f7ff ff8e 	bl	8000c1e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d02:	f06f 0201 	mvn.w	r2, #1
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	bd10      	pop	{r4, pc}

08000d0c <HAL_ADC_ErrorCallback>:
 8000d0c:	4770      	bx	lr

08000d0e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000d10:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000d1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000d22:	f7ff fff3 	bl	8000d0c <HAL_ADC_ErrorCallback>
}
 8000d26:	bd08      	pop	{r3, pc}

08000d28 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000d28:	2300      	movs	r3, #0
{ 
 8000d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000d2c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000d2e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d06d      	beq.n	8000e12 <HAL_ADC_ConfigChannel+0xea>
 8000d36:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000d38:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000d3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000d3e:	2d06      	cmp	r5, #6
 8000d40:	6802      	ldr	r2, [r0, #0]
 8000d42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000d46:	680c      	ldr	r4, [r1, #0]
 8000d48:	d823      	bhi.n	8000d92 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d4a:	261f      	movs	r6, #31
 8000d4c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000d4e:	3b05      	subs	r3, #5
 8000d50:	409e      	lsls	r6, r3
 8000d52:	ea25 0506 	bic.w	r5, r5, r6
 8000d56:	fa04 f303 	lsl.w	r3, r4, r3
 8000d5a:	432b      	orrs	r3, r5
 8000d5c:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d5e:	2c09      	cmp	r4, #9
 8000d60:	688b      	ldr	r3, [r1, #8]
 8000d62:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000d66:	f04f 0107 	mov.w	r1, #7
 8000d6a:	d92a      	bls.n	8000dc2 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d6c:	68d6      	ldr	r6, [r2, #12]
 8000d6e:	3d1e      	subs	r5, #30
 8000d70:	40a9      	lsls	r1, r5
 8000d72:	ea26 0101 	bic.w	r1, r6, r1
 8000d76:	40ab      	lsls	r3, r5
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d7c:	f1a4 0310 	sub.w	r3, r4, #16
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d926      	bls.n	8000dd2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000d92:	2d0c      	cmp	r5, #12
 8000d94:	f04f 051f 	mov.w	r5, #31
 8000d98:	d809      	bhi.n	8000dae <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d9a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000d9c:	3b23      	subs	r3, #35	; 0x23
 8000d9e:	409d      	lsls	r5, r3
 8000da0:	ea26 0505 	bic.w	r5, r6, r5
 8000da4:	fa04 f303 	lsl.w	r3, r4, r3
 8000da8:	432b      	orrs	r3, r5
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	e7d7      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000db0:	3b41      	subs	r3, #65	; 0x41
 8000db2:	409d      	lsls	r5, r3
 8000db4:	ea26 0505 	bic.w	r5, r6, r5
 8000db8:	fa04 f303 	lsl.w	r3, r4, r3
 8000dbc:	432b      	orrs	r3, r5
 8000dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dc0:	e7cd      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dc2:	6916      	ldr	r6, [r2, #16]
 8000dc4:	40a9      	lsls	r1, r5
 8000dc6:	ea26 0101 	bic.w	r1, r6, r1
 8000dca:	40ab      	lsls	r3, r5
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6113      	str	r3, [r2, #16]
 8000dd0:	e7d4      	b.n	8000d7c <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_ADC_ConfigChannel+0xf0>)
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d116      	bne.n	8000e06 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dd8:	6893      	ldr	r3, [r2, #8]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	d4d2      	bmi.n	8000d84 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dde:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000de0:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000de6:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000de8:	d1cc      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_ADC_ConfigChannel+0xf4>)
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_ADC_ConfigChannel+0xf8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000df4:	230a      	movs	r3, #10
 8000df6:	4353      	muls	r3, r2
            wait_loop_index--;
 8000df8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0c1      	beq.n	8000d84 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000e00:	9b01      	ldr	r3, [sp, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	e7f8      	b.n	8000df8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e7b9      	b.n	8000d86 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8000e12:	2302      	movs	r3, #2
 8000e14:	e7ba      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x64>
 8000e16:	bf00      	nop
 8000e18:	40012400 	.word	0x40012400
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	000f4240 	.word	0x000f4240

08000e24 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000e24:	2300      	movs	r3, #0
{
 8000e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e28:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2a:	6803      	ldr	r3, [r0, #0]
{
 8000e2c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	07d2      	lsls	r2, r2, #31
 8000e32:	d502      	bpl.n	8000e3a <ADC_Enable+0x16>
  return HAL_OK;
 8000e34:	2000      	movs	r0, #0
}
 8000e36:	b002      	add	sp, #8
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <ADC_Enable+0x68>)
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <ADC_Enable+0x6c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000e4c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e4e:	9b01      	ldr	r3, [sp, #4]
 8000e50:	b9c3      	cbnz	r3, 8000e84 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000e52:	f7ff fe9f 	bl	8000b94 <HAL_GetTick>
 8000e56:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	689d      	ldr	r5, [r3, #8]
 8000e5c:	f015 0501 	ands.w	r5, r5, #1
 8000e60:	d1e8      	bne.n	8000e34 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e62:	f7ff fe97 	bl	8000b94 <HAL_GetTick>
 8000e66:	1b80      	subs	r0, r0, r6
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	d9f5      	bls.n	8000e58 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000e6e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000e7a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e82:	e7d8      	b.n	8000e36 <ADC_Enable+0x12>
      wait_loop_index--;
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	e7e0      	b.n	8000e4c <ADC_Enable+0x28>
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	000f4240 	.word	0x000f4240

08000e94 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000e94:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000e98:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000e9a:	2b01      	cmp	r3, #1
{
 8000e9c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000e9e:	d058      	beq.n	8000f52 <HAL_ADC_Start_IT+0xbe>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000ea6:	f7ff ffbd 	bl	8000e24 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d14d      	bne.n	8000f4a <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8000eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eb0:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d104      	bne.n	8000ed0 <HAL_ADC_Start_IT+0x3c>
 8000ec6:	4925      	ldr	r1, [pc, #148]	; (8000f5c <HAL_ADC_Start_IT+0xc8>)
 8000ec8:	684a      	ldr	r2, [r1, #4]
 8000eca:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000ece:	d132      	bne.n	8000f36 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ed0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ed2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000ed6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000eda:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000edc:	bf41      	itttt	mi
 8000ede:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000ee0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000ee4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000ee8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ef0:	bf1c      	itt	ne
 8000ef2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000ef4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000ef8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f00:	f06f 0202 	mvn.w	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	f042 0220 	orr.w	r2, r2, #32
 8000f0c:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f14:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f18:	d113      	bne.n	8000f42 <HAL_ADC_Start_IT+0xae>
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_ADC_Start_IT+0xc4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d105      	bne.n	8000f2c <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f20:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000f24:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f26:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000f2a:	d10a      	bne.n	8000f42 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f32:	609a      	str	r2, [r3, #8]
}
 8000f34:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f3c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f3e:	684a      	ldr	r2, [r1, #4]
 8000f40:	e7cb      	b.n	8000eda <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f48:	e7f3      	b.n	8000f32 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000f50:	e7f0      	b.n	8000f34 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 8000f52:	2002      	movs	r0, #2
 8000f54:	e7ee      	b.n	8000f34 <HAL_ADC_Start_IT+0xa0>
 8000f56:	bf00      	nop
 8000f58:	40012800 	.word	0x40012800
 8000f5c:	40012400 	.word	0x40012400

08000f60 <HAL_ADC_Start_DMA>:
{
 8000f60:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000f64:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_ADC_Start_DMA+0x108>)
 8000f68:	6802      	ldr	r2, [r0, #0]
{
 8000f6a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f6c:	429a      	cmp	r2, r3
{
 8000f6e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f70:	d002      	beq.n	8000f78 <HAL_ADC_Start_DMA+0x18>
 8000f72:	493e      	ldr	r1, [pc, #248]	; (800106c <HAL_ADC_Start_DMA+0x10c>)
 8000f74:	428a      	cmp	r2, r1
 8000f76:	d103      	bne.n	8000f80 <HAL_ADC_Start_DMA+0x20>
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000f7e:	d16e      	bne.n	800105e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000f80:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d06c      	beq.n	8001062 <HAL_ADC_Start_DMA+0x102>
 8000f88:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000f8a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000f8c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000f90:	f7ff ff48 	bl	8000e24 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f94:	4606      	mov	r6, r0
 8000f96:	2800      	cmp	r0, #0
 8000f98:	d15d      	bne.n	8001056 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f9c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	f020 0001 	bic.w	r0, r0, #1
 8000fa8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fac:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000fae:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fb0:	d104      	bne.n	8000fbc <HAL_ADC_Start_DMA+0x5c>
 8000fb2:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <HAL_ADC_Start_DMA+0x108>)
 8000fb4:	6853      	ldr	r3, [r2, #4]
 8000fb6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000fba:	d13e      	bne.n	800103a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000fc2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc4:	684b      	ldr	r3, [r1, #4]
 8000fc6:	055a      	lsls	r2, r3, #21
 8000fc8:	d505      	bpl.n	8000fd6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fd8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fda:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fde:	bf18      	it	ne
 8000fe0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fe2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fe4:	bf18      	it	ne
 8000fe6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000fec:	2300      	movs	r3, #0
 8000fee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ff6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_ADC_Start_DMA+0x114>)
 8000ffa:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HAL_ADC_Start_DMA+0x118>)
 8000ffe:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001000:	f06f 0302 	mvn.w	r3, #2
 8001004:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001008:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001014:	4643      	mov	r3, r8
 8001016:	f000 f97d 	bl	8001314 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001022:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	bf0c      	ite	eq
 800102a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800102e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001032:	609a      	str	r2, [r3, #8]
}
 8001034:	4630      	mov	r0, r6
 8001036:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800103c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001040:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001042:	6853      	ldr	r3, [r2, #4]
 8001044:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001046:	bf41      	itttt	mi
 8001048:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800104a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800104e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001052:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001054:	e7bf      	b.n	8000fd6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001056:	2300      	movs	r3, #0
 8001058:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800105c:	e7ea      	b.n	8001034 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800105e:	2601      	movs	r6, #1
 8001060:	e7e8      	b.n	8001034 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001062:	2602      	movs	r6, #2
 8001064:	e7e6      	b.n	8001034 <HAL_ADC_Start_DMA+0xd4>
 8001066:	bf00      	nop
 8001068:	40012400 	.word	0x40012400
 800106c:	40012800 	.word	0x40012800
 8001070:	08000bc5 	.word	0x08000bc5
 8001074:	08000c15 	.word	0x08000c15
 8001078:	08000d0f 	.word	0x08000d0f

0800107c <ADC_ConversionStop_Disable>:
{
 800107c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800107e:	6803      	ldr	r3, [r0, #0]
{
 8001080:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	07d2      	lsls	r2, r2, #31
 8001086:	d401      	bmi.n	800108c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001088:	2000      	movs	r0, #0
}
 800108a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001094:	f7ff fd7e 	bl	8000b94 <HAL_GetTick>
 8001098:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	07db      	lsls	r3, r3, #31
 80010a0:	d5f2      	bpl.n	8001088 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010a2:	f7ff fd77 	bl	8000b94 <HAL_GetTick>
 80010a6:	1b40      	subs	r0, r0, r5
 80010a8:	2802      	cmp	r0, #2
 80010aa:	d9f6      	bls.n	800109a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010be:	e7e4      	b.n	800108a <ADC_ConversionStop_Disable+0xe>

080010c0 <HAL_ADC_Init>:
{
 80010c0:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80010c2:	4604      	mov	r4, r0
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d070      	beq.n	80011aa <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010ca:	b923      	cbnz	r3, 80010d6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80010ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80010d2:	f002 fba7 	bl	8003824 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff ffd0 	bl	800107c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010de:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e4:	d163      	bne.n	80011ae <HAL_ADC_Init+0xee>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d161      	bne.n	80011ae <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80010ea:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80010f0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	f023 0302 	bic.w	r3, r3, #2
 80010f6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80010fa:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010fc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80010fe:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001100:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001102:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001106:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800110a:	d037      	beq.n	800117c <HAL_ADC_Init+0xbc>
 800110c:	2901      	cmp	r1, #1
 800110e:	bf14      	ite	ne
 8001110:	4606      	movne	r6, r0
 8001112:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	6965      	ldr	r5, [r4, #20]
 8001118:	2d01      	cmp	r5, #1
 800111a:	d106      	bne.n	800112a <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800111c:	bb83      	cbnz	r3, 8001180 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800111e:	69a3      	ldr	r3, [r4, #24]
 8001120:	3b01      	subs	r3, #1
 8001122:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001126:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800112a:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800112c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001130:	685d      	ldr	r5, [r3, #4]
 8001132:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001136:	ea45 0506 	orr.w	r5, r5, r6
 800113a:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800113c:	689e      	ldr	r6, [r3, #8]
 800113e:	4d1e      	ldr	r5, [pc, #120]	; (80011b8 <HAL_ADC_Init+0xf8>)
 8001140:	ea05 0506 	and.w	r5, r5, r6
 8001144:	ea45 0502 	orr.w	r5, r5, r2
 8001148:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800114a:	d001      	beq.n	8001150 <HAL_ADC_Init+0x90>
 800114c:	2901      	cmp	r1, #1
 800114e:	d120      	bne.n	8001192 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001150:	6921      	ldr	r1, [r4, #16]
 8001152:	3901      	subs	r1, #1
 8001154:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001156:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001158:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800115c:	4329      	orrs	r1, r5
 800115e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001160:	6899      	ldr	r1, [r3, #8]
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_ADC_Init+0xfc>)
 8001164:	400b      	ands	r3, r1
 8001166:	429a      	cmp	r2, r3
 8001168:	d115      	bne.n	8001196 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800116a:	2300      	movs	r3, #0
 800116c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800116e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001170:	f023 0303 	bic.w	r3, r3, #3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800117a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800117c:	460e      	mov	r6, r1
 800117e:	e7ca      	b.n	8001116 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001180:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001190:	e7cb      	b.n	800112a <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001192:	2100      	movs	r1, #0
 8001194:	e7df      	b.n	8001156 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001196:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001198:	f023 0312 	bic.w	r3, r3, #18
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
 80011ac:	e7e5      	b.n	800117a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80011b4:	e7f9      	b.n	80011aa <HAL_ADC_Init+0xea>
 80011b6:	bf00      	nop
 80011b8:	ffe1f7fd 	.word	0xffe1f7fd
 80011bc:	ff1f0efe 	.word	0xff1f0efe

080011c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011c6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d2:	041b      	lsls	r3, r3, #16
 80011d4:	0c1b      	lsrs	r3, r3, #16
 80011d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80011de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b570      	push	{r4, r5, r6, lr}
 80011ec:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ee:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f6:	f1c4 0507 	rsb	r5, r4, #7
 80011fa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	bf28      	it	cs
 8001202:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001204:	2b06      	cmp	r3, #6
 8001206:	bf98      	it	ls
 8001208:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	bf88      	it	hi
 8001210:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001212:	ea21 0303 	bic.w	r3, r1, r3
 8001216:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	fa06 f404 	lsl.w	r4, r6, r4
 800121c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8001220:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001222:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	bfa8      	it	ge
 8001228:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800122c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	bfb8      	it	lt
 8001232:	4a06      	ldrlt	r2, [pc, #24]	; (800124c <HAL_NVIC_SetPriority+0x64>)
 8001234:	b2db      	uxtb	r3, r3
 8001236:	bfb5      	itete	lt
 8001238:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	e000ed14 	.word	0xe000ed14

08001250 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001250:	2301      	movs	r3, #1
 8001252:	0942      	lsrs	r2, r0, #5
 8001254:	f000 001f 	and.w	r0, r0, #31
 8001258:	fa03 f000 	lsl.w	r0, r3, r0
 800125c:	4b01      	ldr	r3, [pc, #4]	; (8001264 <HAL_NVIC_EnableIRQ+0x14>)
 800125e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100

08001268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	3801      	subs	r0, #1
 800126a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800126e:	d20a      	bcs.n	8001286 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001296:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	bf0c      	ite	eq
 800129c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012a0:	f022 0204 	bicne.w	r2, r2, #4
 80012a4:	601a      	str	r2, [r3, #0]
  }
}
 80012a6:	4770      	bx	lr
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ac:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012ae:	b350      	cbz	r0, 8001306 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012b0:	2214      	movs	r2, #20
 80012b2:	6801      	ldr	r1, [r0, #0]
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_DMA_Init+0x60>)
 80012b6:	440b      	add	r3, r1
 80012b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_DMA_Init+0x64>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012c2:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80012c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80012ca:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012cc:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012ce:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d2:	4323      	orrs	r3, r4
 80012d4:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012dc:	6944      	ldr	r4, [r0, #20]
 80012de:	4323      	orrs	r3, r4
 80012e0:	6984      	ldr	r4, [r0, #24]
 80012e2:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e4:	69c4      	ldr	r4, [r0, #28]
 80012e6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80012e8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ea:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012ec:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 80012ee:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80012f0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 80012f4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 80012f8:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012fe:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001302:	4618      	mov	r0, r3
}
 8001304:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001306:	2001      	movs	r0, #1
 8001308:	e7fc      	b.n	8001304 <HAL_DMA_Init+0x58>
 800130a:	bf00      	nop
 800130c:	bffdfff8 	.word	0xbffdfff8
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001316:	f890 4020 	ldrb.w	r4, [r0, #32]
 800131a:	2c01      	cmp	r4, #1
 800131c:	d035      	beq.n	800138a <HAL_DMA_Start_IT+0x76>
 800131e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001320:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001324:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001328:	42a5      	cmp	r5, r4
 800132a:	f04f 0600 	mov.w	r6, #0
 800132e:	f04f 0402 	mov.w	r4, #2
 8001332:	d128      	bne.n	8001386 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001334:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001338:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800133c:	6826      	ldr	r6, [r4, #0]
 800133e:	f026 0601 	bic.w	r6, r6, #1
 8001342:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001344:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001348:	40bd      	lsls	r5, r7
 800134a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800134c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800134e:	6843      	ldr	r3, [r0, #4]
 8001350:	6805      	ldr	r5, [r0, #0]
 8001352:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001354:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001356:	bf0b      	itete	eq
 8001358:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800135a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800135c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800135e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001360:	b14b      	cbz	r3, 8001376 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800136a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	602b      	str	r3, [r5, #0]
}
 8001374:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	f043 030a 	orr.w	r3, r3, #10
 8001384:	e7f0      	b.n	8001368 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001386:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800138a:	2002      	movs	r0, #2
 800138c:	e7f2      	b.n	8001374 <HAL_DMA_Start_IT+0x60>
	...

08001390 <HAL_DMA_IRQHandler>:
{
 8001390:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001392:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001394:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001396:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001398:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800139a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800139c:	4095      	lsls	r5, r2
 800139e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80013a0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013a2:	d032      	beq.n	800140a <HAL_DMA_IRQHandler+0x7a>
 80013a4:	074d      	lsls	r5, r1, #29
 80013a6:	d530      	bpl.n	800140a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ac:	bf5e      	ittt	pl
 80013ae:	681a      	ldrpl	r2, [r3, #0]
 80013b0:	f022 0204 	bicpl.w	r2, r2, #4
 80013b4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013b6:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_DMA_IRQHandler+0x120>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d019      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x60>
 80013bc:	3214      	adds	r2, #20
 80013be:	4293      	cmp	r3, r2
 80013c0:	d018      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x64>
 80013c2:	3214      	adds	r2, #20
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d017      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x68>
 80013c8:	3214      	adds	r2, #20
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d017      	beq.n	80013fe <HAL_DMA_IRQHandler+0x6e>
 80013ce:	3214      	adds	r2, #20
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d017      	beq.n	8001404 <HAL_DMA_IRQHandler+0x74>
 80013d4:	3214      	adds	r2, #20
 80013d6:	4293      	cmp	r3, r2
 80013d8:	bf0c      	ite	eq
 80013da:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80013de:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80013e2:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <HAL_DMA_IRQHandler+0x124>)
 80013e4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80013e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05e      	beq.n	80014aa <HAL_DMA_IRQHandler+0x11a>
}
 80013ec:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80013ee:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013f0:	2304      	movs	r3, #4
 80013f2:	e7f6      	b.n	80013e2 <HAL_DMA_IRQHandler+0x52>
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	e7f4      	b.n	80013e2 <HAL_DMA_IRQHandler+0x52>
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	e7f1      	b.n	80013e2 <HAL_DMA_IRQHandler+0x52>
 80013fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001402:	e7ee      	b.n	80013e2 <HAL_DMA_IRQHandler+0x52>
 8001404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001408:	e7eb      	b.n	80013e2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800140a:	2502      	movs	r5, #2
 800140c:	4095      	lsls	r5, r2
 800140e:	4225      	tst	r5, r4
 8001410:	d035      	beq.n	800147e <HAL_DMA_IRQHandler+0xee>
 8001412:	078d      	lsls	r5, r1, #30
 8001414:	d533      	bpl.n	800147e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	0694      	lsls	r4, r2, #26
 800141a:	d406      	bmi.n	800142a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f022 020a 	bic.w	r2, r2, #10
 8001422:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001424:	2201      	movs	r2, #1
 8001426:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_DMA_IRQHandler+0x120>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d019      	beq.n	8001464 <HAL_DMA_IRQHandler+0xd4>
 8001430:	3214      	adds	r2, #20
 8001432:	4293      	cmp	r3, r2
 8001434:	d018      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
 8001436:	3214      	adds	r2, #20
 8001438:	4293      	cmp	r3, r2
 800143a:	d017      	beq.n	800146c <HAL_DMA_IRQHandler+0xdc>
 800143c:	3214      	adds	r2, #20
 800143e:	4293      	cmp	r3, r2
 8001440:	d017      	beq.n	8001472 <HAL_DMA_IRQHandler+0xe2>
 8001442:	3214      	adds	r2, #20
 8001444:	4293      	cmp	r3, r2
 8001446:	d017      	beq.n	8001478 <HAL_DMA_IRQHandler+0xe8>
 8001448:	3214      	adds	r2, #20
 800144a:	4293      	cmp	r3, r2
 800144c:	bf0c      	ite	eq
 800144e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001452:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_DMA_IRQHandler+0x124>)
 8001458:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800145a:	2300      	movs	r3, #0
 800145c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001460:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001462:	e7c1      	b.n	80013e8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001464:	2302      	movs	r3, #2
 8001466:	e7f6      	b.n	8001456 <HAL_DMA_IRQHandler+0xc6>
 8001468:	2320      	movs	r3, #32
 800146a:	e7f4      	b.n	8001456 <HAL_DMA_IRQHandler+0xc6>
 800146c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001470:	e7f1      	b.n	8001456 <HAL_DMA_IRQHandler+0xc6>
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	e7ee      	b.n	8001456 <HAL_DMA_IRQHandler+0xc6>
 8001478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147c:	e7eb      	b.n	8001456 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800147e:	2508      	movs	r5, #8
 8001480:	4095      	lsls	r5, r2
 8001482:	4225      	tst	r5, r4
 8001484:	d011      	beq.n	80014aa <HAL_DMA_IRQHandler+0x11a>
 8001486:	0709      	lsls	r1, r1, #28
 8001488:	d50f      	bpl.n	80014aa <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	f021 010e 	bic.w	r1, r1, #14
 8001490:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001492:	2301      	movs	r3, #1
 8001494:	fa03 f202 	lsl.w	r2, r3, r2
 8001498:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800149a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800149c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80014a0:	2300      	movs	r3, #0
 80014a2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80014a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014a8:	e79e      	b.n	80013e8 <HAL_DMA_IRQHandler+0x58>
}
 80014aa:	bc70      	pop	{r4, r5, r6}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40020008 	.word	0x40020008
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80014bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014be:	4616      	mov	r6, r2
 80014c0:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014c2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001668 <HAL_GPIO_Init+0x1b0>
 80014c6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800166c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80014ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80014d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80014d8:	45a0      	cmp	r8, r4
 80014da:	d17e      	bne.n	80015da <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80014dc:	684d      	ldr	r5, [r1, #4]
 80014de:	2d12      	cmp	r5, #18
 80014e0:	f000 80ae 	beq.w	8001640 <HAL_GPIO_Init+0x188>
 80014e4:	f200 8087 	bhi.w	80015f6 <HAL_GPIO_Init+0x13e>
 80014e8:	2d02      	cmp	r5, #2
 80014ea:	f000 80a6 	beq.w	800163a <HAL_GPIO_Init+0x182>
 80014ee:	d87b      	bhi.n	80015e8 <HAL_GPIO_Init+0x130>
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	f000 808d 	beq.w	8001610 <HAL_GPIO_Init+0x158>
 80014f6:	2d01      	cmp	r5, #1
 80014f8:	f000 809d 	beq.w	8001636 <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	2cff      	cmp	r4, #255	; 0xff
 8001502:	bf93      	iteet	ls
 8001504:	4682      	movls	sl, r0
 8001506:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800150a:	3d08      	subhi	r5, #8
 800150c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001510:	bf92      	itee	ls
 8001512:	00b5      	lslls	r5, r6, #2
 8001514:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001518:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800151a:	fa09 f805 	lsl.w	r8, r9, r5
 800151e:	ea2b 0808 	bic.w	r8, fp, r8
 8001522:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001526:	bf88      	it	hi
 8001528:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800152c:	ea48 0505 	orr.w	r5, r8, r5
 8001530:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001534:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001538:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800153c:	d04d      	beq.n	80015da <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800153e:	4f47      	ldr	r7, [pc, #284]	; (800165c <HAL_GPIO_Init+0x1a4>)
 8001540:	f026 0803 	bic.w	r8, r6, #3
 8001544:	69bd      	ldr	r5, [r7, #24]
 8001546:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800154a:	f045 0501 	orr.w	r5, r5, #1
 800154e:	61bd      	str	r5, [r7, #24]
 8001550:	69bd      	ldr	r5, [r7, #24]
 8001552:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001556:	f005 0501 	and.w	r5, r5, #1
 800155a:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800155c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001560:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001562:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001566:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800156a:	fa09 f90b 	lsl.w	r9, r9, fp
 800156e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001572:	4d3b      	ldr	r5, [pc, #236]	; (8001660 <HAL_GPIO_Init+0x1a8>)
 8001574:	42a8      	cmp	r0, r5
 8001576:	d068      	beq.n	800164a <HAL_GPIO_Init+0x192>
 8001578:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800157c:	42a8      	cmp	r0, r5
 800157e:	d066      	beq.n	800164e <HAL_GPIO_Init+0x196>
 8001580:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001584:	42a8      	cmp	r0, r5
 8001586:	d064      	beq.n	8001652 <HAL_GPIO_Init+0x19a>
 8001588:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800158c:	42a8      	cmp	r0, r5
 800158e:	bf0c      	ite	eq
 8001590:	2503      	moveq	r5, #3
 8001592:	2504      	movne	r5, #4
 8001594:	fa05 f50b 	lsl.w	r5, r5, fp
 8001598:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800159c:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015a6:	bf14      	ite	ne
 80015a8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015aa:	43a5      	biceq	r5, r4
 80015ac:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ae:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80015b4:	bf14      	ite	ne
 80015b6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b8:	43a5      	biceq	r5, r4
 80015ba:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015bc:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015be:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c2:	bf14      	ite	ne
 80015c4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015c6:	43a5      	biceq	r5, r4
 80015c8:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ca:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d0:	bf14      	ite	ne
 80015d2:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d4:	ea25 0404 	biceq.w	r4, r5, r4
 80015d8:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80015da:	3601      	adds	r6, #1
 80015dc:	2e10      	cmp	r6, #16
 80015de:	f47f af74 	bne.w	80014ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80015e2:	b003      	add	sp, #12
 80015e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80015e8:	2d03      	cmp	r5, #3
 80015ea:	d022      	beq.n	8001632 <HAL_GPIO_Init+0x17a>
 80015ec:	2d11      	cmp	r5, #17
 80015ee:	d185      	bne.n	80014fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	68ca      	ldr	r2, [r1, #12]
 80015f2:	3204      	adds	r2, #4
          break;
 80015f4:	e782      	b.n	80014fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80015f6:	4f1b      	ldr	r7, [pc, #108]	; (8001664 <HAL_GPIO_Init+0x1ac>)
 80015f8:	42bd      	cmp	r5, r7
 80015fa:	d009      	beq.n	8001610 <HAL_GPIO_Init+0x158>
 80015fc:	d812      	bhi.n	8001624 <HAL_GPIO_Init+0x16c>
 80015fe:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001670 <HAL_GPIO_Init+0x1b8>
 8001602:	454d      	cmp	r5, r9
 8001604:	d004      	beq.n	8001610 <HAL_GPIO_Init+0x158>
 8001606:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800160a:	454d      	cmp	r5, r9
 800160c:	f47f af76 	bne.w	80014fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001610:	688a      	ldr	r2, [r1, #8]
 8001612:	b1c2      	cbz	r2, 8001646 <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001614:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001616:	bf0c      	ite	eq
 8001618:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800161c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2208      	movs	r2, #8
 8001622:	e76b      	b.n	80014fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001624:	4565      	cmp	r5, ip
 8001626:	d0f3      	beq.n	8001610 <HAL_GPIO_Init+0x158>
 8001628:	4575      	cmp	r5, lr
 800162a:	d0f1      	beq.n	8001610 <HAL_GPIO_Init+0x158>
 800162c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001674 <HAL_GPIO_Init+0x1bc>
 8001630:	e7eb      	b.n	800160a <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001632:	2200      	movs	r2, #0
 8001634:	e762      	b.n	80014fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001636:	68ca      	ldr	r2, [r1, #12]
          break;
 8001638:	e760      	b.n	80014fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163a:	68ca      	ldr	r2, [r1, #12]
 800163c:	3208      	adds	r2, #8
          break;
 800163e:	e75d      	b.n	80014fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001640:	68ca      	ldr	r2, [r1, #12]
 8001642:	320c      	adds	r2, #12
          break;
 8001644:	e75a      	b.n	80014fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001646:	2204      	movs	r2, #4
 8001648:	e758      	b.n	80014fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164a:	2500      	movs	r5, #0
 800164c:	e7a2      	b.n	8001594 <HAL_GPIO_Init+0xdc>
 800164e:	2501      	movs	r5, #1
 8001650:	e7a0      	b.n	8001594 <HAL_GPIO_Init+0xdc>
 8001652:	2502      	movs	r5, #2
 8001654:	e79e      	b.n	8001594 <HAL_GPIO_Init+0xdc>
 8001656:	bf00      	nop
 8001658:	40010400 	.word	0x40010400
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800
 8001664:	10210000 	.word	0x10210000
 8001668:	10310000 	.word	0x10310000
 800166c:	10320000 	.word	0x10320000
 8001670:	10110000 	.word	0x10110000
 8001674:	10220000 	.word	0x10220000

08001678 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001678:	6883      	ldr	r3, [r0, #8]
 800167a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800167c:	bf14      	ite	ne
 800167e:	2001      	movne	r0, #1
 8001680:	2000      	moveq	r0, #0
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	b10a      	cbz	r2, 800168a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001686:	6101      	str	r1, [r0, #16]
  }
}
 8001688:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168a:	0409      	lsls	r1, r1, #16
 800168c:	e7fb      	b.n	8001686 <HAL_GPIO_WritePin+0x2>
	...

08001690 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001690:	6803      	ldr	r3, [r0, #0]
{
 8001692:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	07db      	lsls	r3, r3, #31
{
 8001698:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	d410      	bmi.n	80016be <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	079f      	lsls	r7, r3, #30
 80016a0:	d45e      	bmi.n	8001760 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	0719      	lsls	r1, r3, #28
 80016a6:	f100 8095 	bmi.w	80017d4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	682b      	ldr	r3, [r5, #0]
 80016ac:	075a      	lsls	r2, r3, #29
 80016ae:	f100 80bf 	bmi.w	8001830 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b2:	69ea      	ldr	r2, [r5, #28]
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	f040 812d 	bne.w	8001914 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80016ba:	2000      	movs	r0, #0
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016be:	4c90      	ldr	r4, [pc, #576]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80016c0:	6863      	ldr	r3, [r4, #4]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d007      	beq.n	80016da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
 80016d4:	6863      	ldr	r3, [r4, #4]
 80016d6:	03de      	lsls	r6, r3, #15
 80016d8:	d509      	bpl.n	80016ee <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	039c      	lsls	r4, r3, #14
 80016de:	d5dd      	bpl.n	800169c <HAL_RCC_OscConfig+0xc>
 80016e0:	686b      	ldr	r3, [r5, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1da      	bne.n	800169c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
}
 80016e8:	b002      	add	sp, #8
 80016ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	686b      	ldr	r3, [r5, #4]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d110      	bne.n	8001718 <HAL_RCC_OscConfig+0x88>
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa49 	bl	8000b94 <HAL_GetTick>
 8001702:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	0398      	lsls	r0, r3, #14
 8001708:	d4c8      	bmi.n	800169c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fa43 	bl	8000b94 <HAL_GetTick>
 800170e:	1b80      	subs	r0, r0, r6
 8001710:	2864      	cmp	r0, #100	; 0x64
 8001712:	d9f7      	bls.n	8001704 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001714:	2003      	movs	r0, #3
 8001716:	e7e7      	b.n	80016e8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	b99b      	cbnz	r3, 8001742 <HAL_RCC_OscConfig+0xb2>
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001720:	6023      	str	r3, [r4, #0]
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001728:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800172a:	f7ff fa33 	bl	8000b94 <HAL_GetTick>
 800172e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	0399      	lsls	r1, r3, #14
 8001734:	d5b2      	bpl.n	800169c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001736:	f7ff fa2d 	bl	8000b94 <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2864      	cmp	r0, #100	; 0x64
 800173e:	d9f7      	bls.n	8001730 <HAL_RCC_OscConfig+0xa0>
 8001740:	e7e8      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	d103      	bne.n	8001752 <HAL_RCC_OscConfig+0xc2>
 800174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174e:	6023      	str	r3, [r4, #0]
 8001750:	e7d1      	b.n	80016f6 <HAL_RCC_OscConfig+0x66>
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6023      	str	r3, [r4, #0]
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	e7cd      	b.n	80016fc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001760:	4c67      	ldr	r4, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001762:	6863      	ldr	r3, [r4, #4]
 8001764:	f013 0f0c 	tst.w	r3, #12
 8001768:	d007      	beq.n	800177a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176a:	6863      	ldr	r3, [r4, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d110      	bne.n	8001796 <HAL_RCC_OscConfig+0x106>
 8001774:	6863      	ldr	r3, [r4, #4]
 8001776:	03da      	lsls	r2, r3, #15
 8001778:	d40d      	bmi.n	8001796 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	079b      	lsls	r3, r3, #30
 800177e:	d502      	bpl.n	8001786 <HAL_RCC_OscConfig+0xf6>
 8001780:	692b      	ldr	r3, [r5, #16]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d1af      	bne.n	80016e6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	696a      	ldr	r2, [r5, #20]
 800178a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800178e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001792:	6023      	str	r3, [r4, #0]
 8001794:	e785      	b.n	80016a2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001796:	692a      	ldr	r2, [r5, #16]
 8001798:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 800179a:	b16a      	cbz	r2, 80017b8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017a0:	f7ff f9f8 	bl	8000b94 <HAL_GetTick>
 80017a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	079f      	lsls	r7, r3, #30
 80017aa:	d4ec      	bmi.n	8001786 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff f9f2 	bl	8000b94 <HAL_GetTick>
 80017b0:	1b80      	subs	r0, r0, r6
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9f7      	bls.n	80017a6 <HAL_RCC_OscConfig+0x116>
 80017b6:	e7ad      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80017b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ba:	f7ff f9eb 	bl	8000b94 <HAL_GetTick>
 80017be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	0798      	lsls	r0, r3, #30
 80017c4:	f57f af6d 	bpl.w	80016a2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff f9e4 	bl	8000b94 <HAL_GetTick>
 80017cc:	1b80      	subs	r0, r0, r6
 80017ce:	2802      	cmp	r0, #2
 80017d0:	d9f6      	bls.n	80017c0 <HAL_RCC_OscConfig+0x130>
 80017d2:	e79f      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d4:	69aa      	ldr	r2, [r5, #24]
 80017d6:	4c4a      	ldr	r4, [pc, #296]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <HAL_RCC_OscConfig+0x278>)
 80017da:	b1da      	cbz	r2, 8001814 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017e0:	f7ff f9d8 	bl	8000b94 <HAL_GetTick>
 80017e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017e8:	079b      	lsls	r3, r3, #30
 80017ea:	d50d      	bpl.n	8001808 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x27c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80017f8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80017fa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80017fc:	9b01      	ldr	r3, [sp, #4]
 80017fe:	1e5a      	subs	r2, r3, #1
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_RCC_OscConfig+0x16a>
 8001806:	e750      	b.n	80016aa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff f9c4 	bl	8000b94 <HAL_GetTick>
 800180c:	1b80      	subs	r0, r0, r6
 800180e:	2802      	cmp	r0, #2
 8001810:	d9e9      	bls.n	80017e6 <HAL_RCC_OscConfig+0x156>
 8001812:	e77f      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001814:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001816:	f7ff f9bd 	bl	8000b94 <HAL_GetTick>
 800181a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800181e:	079f      	lsls	r7, r3, #30
 8001820:	f57f af43 	bpl.w	80016aa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff f9b6 	bl	8000b94 <HAL_GetTick>
 8001828:	1b80      	subs	r0, r0, r6
 800182a:	2802      	cmp	r0, #2
 800182c:	d9f6      	bls.n	800181c <HAL_RCC_OscConfig+0x18c>
 800182e:	e771      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001830:	4c33      	ldr	r4, [pc, #204]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001832:	69e3      	ldr	r3, [r4, #28]
 8001834:	00d8      	lsls	r0, r3, #3
 8001836:	d424      	bmi.n	8001882 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001838:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	69e3      	ldr	r3, [r4, #28]
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61e3      	str	r3, [r4, #28]
 8001842:	69e3      	ldr	r3, [r4, #28]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4e30      	ldr	r6, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x280>)
 800184e:	6833      	ldr	r3, [r6, #0]
 8001850:	05d9      	lsls	r1, r3, #23
 8001852:	d518      	bpl.n	8001886 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	68eb      	ldr	r3, [r5, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d126      	bne.n	80018a8 <HAL_RCC_OscConfig+0x218>
 800185a:	6a23      	ldr	r3, [r4, #32]
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001862:	f7ff f997 	bl	8000b94 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800186a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	6a23      	ldr	r3, [r4, #32]
 800186e:	079b      	lsls	r3, r3, #30
 8001870:	d53f      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001872:	2f00      	cmp	r7, #0
 8001874:	f43f af1d 	beq.w	80016b2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	69e3      	ldr	r3, [r4, #28]
 800187a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187e:	61e3      	str	r3, [r4, #28]
 8001880:	e717      	b.n	80016b2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2700      	movs	r7, #0
 8001884:	e7e2      	b.n	800184c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	6833      	ldr	r3, [r6, #0]
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800188e:	f7ff f981 	bl	8000b94 <HAL_GetTick>
 8001892:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	6833      	ldr	r3, [r6, #0]
 8001896:	05da      	lsls	r2, r3, #23
 8001898:	d4dc      	bmi.n	8001854 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff f97b 	bl	8000b94 <HAL_GetTick>
 800189e:	eba0 0008 	sub.w	r0, r0, r8
 80018a2:	2864      	cmp	r0, #100	; 0x64
 80018a4:	d9f6      	bls.n	8001894 <HAL_RCC_OscConfig+0x204>
 80018a6:	e735      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	b9ab      	cbnz	r3, 80018d6 <HAL_RCC_OscConfig+0x246>
 80018aa:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6223      	str	r3, [r4, #32]
 80018b6:	6a23      	ldr	r3, [r4, #32]
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018be:	f7ff f969 	bl	8000b94 <HAL_GetTick>
 80018c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	6a23      	ldr	r3, [r4, #32]
 80018c6:	0798      	lsls	r0, r3, #30
 80018c8:	d5d3      	bpl.n	8001872 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f963 	bl	8000b94 <HAL_GetTick>
 80018ce:	1b80      	subs	r0, r0, r6
 80018d0:	4540      	cmp	r0, r8
 80018d2:	d9f7      	bls.n	80018c4 <HAL_RCC_OscConfig+0x234>
 80018d4:	e71e      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	6a23      	ldr	r3, [r4, #32]
 80018da:	d103      	bne.n	80018e4 <HAL_RCC_OscConfig+0x254>
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6223      	str	r3, [r4, #32]
 80018e2:	e7ba      	b.n	800185a <HAL_RCC_OscConfig+0x1ca>
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6223      	str	r3, [r4, #32]
 80018ea:	6a23      	ldr	r3, [r4, #32]
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	e7b6      	b.n	8001860 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff f94f 	bl	8000b94 <HAL_GetTick>
 80018f6:	eba0 0008 	sub.w	r0, r0, r8
 80018fa:	42b0      	cmp	r0, r6
 80018fc:	d9b6      	bls.n	800186c <HAL_RCC_OscConfig+0x1dc>
 80018fe:	e709      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
 8001900:	40021000 	.word	0x40021000
 8001904:	42420000 	.word	0x42420000
 8001908:	42420480 	.word	0x42420480
 800190c:	20000008 	.word	0x20000008
 8001910:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	4c22      	ldr	r4, [pc, #136]	; (80019a0 <HAL_RCC_OscConfig+0x310>)
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	f43f aee2 	beq.w	80016e6 <HAL_RCC_OscConfig+0x56>
 8001922:	2300      	movs	r3, #0
 8001924:	4e1f      	ldr	r6, [pc, #124]	; (80019a4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001926:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001928:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	d12b      	bne.n	8001984 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800192c:	f7ff f932 	bl	8000b94 <HAL_GetTick>
 8001930:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	0199      	lsls	r1, r3, #6
 8001936:	d41f      	bmi.n	8001978 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001938:	6a2b      	ldr	r3, [r5, #32]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001940:	6862      	ldr	r2, [r4, #4]
 8001942:	68a9      	ldr	r1, [r5, #8]
 8001944:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001948:	430a      	orrs	r2, r1
 800194a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800194e:	6862      	ldr	r2, [r4, #4]
 8001950:	430b      	orrs	r3, r1
 8001952:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001956:	4313      	orrs	r3, r2
 8001958:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800195a:	2301      	movs	r3, #1
 800195c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800195e:	f7ff f919 	bl	8000b94 <HAL_GetTick>
 8001962:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	019a      	lsls	r2, r3, #6
 8001968:	f53f aea7 	bmi.w	80016ba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f912 	bl	8000b94 <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	2802      	cmp	r0, #2
 8001974:	d9f6      	bls.n	8001964 <HAL_RCC_OscConfig+0x2d4>
 8001976:	e6cd      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f90c 	bl	8000b94 <HAL_GetTick>
 800197c:	1bc0      	subs	r0, r0, r7
 800197e:	2802      	cmp	r0, #2
 8001980:	d9d7      	bls.n	8001932 <HAL_RCC_OscConfig+0x2a2>
 8001982:	e6c7      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001984:	f7ff f906 	bl	8000b94 <HAL_GetTick>
 8001988:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	019b      	lsls	r3, r3, #6
 800198e:	f57f ae94 	bpl.w	80016ba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f8ff 	bl	8000b94 <HAL_GetTick>
 8001996:	1b40      	subs	r0, r0, r5
 8001998:	2802      	cmp	r0, #2
 800199a:	d9f6      	bls.n	800198a <HAL_RCC_OscConfig+0x2fa>
 800199c:	e6ba      	b.n	8001714 <HAL_RCC_OscConfig+0x84>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	42420060 	.word	0x42420060

080019a8 <HAL_RCC_GetSysClockFreq>:
{
 80019a8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80019ac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ae:	ac02      	add	r4, sp, #8
 80019b0:	f103 0510 	add.w	r5, r3, #16
 80019b4:	4622      	mov	r2, r4
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	3308      	adds	r3, #8
 80019bc:	c203      	stmia	r2!, {r0, r1}
 80019be:	42ab      	cmp	r3, r5
 80019c0:	4614      	mov	r4, r2
 80019c2:	d1f7      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80019c8:	4911      	ldr	r1, [pc, #68]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019ca:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80019ce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019d0:	f003 020c 	and.w	r2, r3, #12
 80019d4:	2a08      	cmp	r2, #8
 80019d6:	d117      	bne.n	8001a08 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019dc:	a806      	add	r0, sp, #24
 80019de:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e6:	d50c      	bpl.n	8001a02 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019f0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f2:	aa06      	add	r2, sp, #24
 80019f4:	4413      	add	r3, r2
 80019f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80019fe:	b007      	add	sp, #28
 8001a00:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x70>)
 8001a04:	4350      	muls	r0, r2
 8001a06:	e7fa      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001a0a:	e7f8      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x56>
 8001a0c:	080049c4 	.word	0x080049c4
 8001a10:	40021000 	.word	0x40021000
 8001a14:	007a1200 	.word	0x007a1200
 8001a18:	003d0900 	.word	0x003d0900

08001a1c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	; (8001b50 <HAL_RCC_ClockConfig+0x134>)
{
 8001a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a22:	6813      	ldr	r3, [r2, #0]
{
 8001a24:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	428b      	cmp	r3, r1
{
 8001a2c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a2e:	d327      	bcc.n	8001a80 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	682a      	ldr	r2, [r5, #0]
 8001a32:	0791      	lsls	r1, r2, #30
 8001a34:	d431      	bmi.n	8001a9a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	07d2      	lsls	r2, r2, #31
 8001a38:	d437      	bmi.n	8001aaa <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a3a:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <HAL_RCC_ClockConfig+0x134>)
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	42b3      	cmp	r3, r6
 8001a44:	d871      	bhi.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	682a      	ldr	r2, [r5, #0]
 8001a48:	4c42      	ldr	r4, [pc, #264]	; (8001b54 <HAL_RCC_ClockConfig+0x138>)
 8001a4a:	f012 0f04 	tst.w	r2, #4
 8001a4e:	d177      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	0713      	lsls	r3, r2, #28
 8001a52:	d506      	bpl.n	8001a62 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a54:	6863      	ldr	r3, [r4, #4]
 8001a56:	692a      	ldr	r2, [r5, #16]
 8001a58:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a60:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a62:	f7ff ffa1 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001a66:	6863      	ldr	r3, [r4, #4]
 8001a68:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <HAL_RCC_ClockConfig+0x13c>)
 8001a6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	40d8      	lsrs	r0, r3
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_RCC_ClockConfig+0x140>)
 8001a74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f001 ff1e 	bl	80038b8 <HAL_InitTick>
  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	430b      	orrs	r3, r1
 8001a88:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d0cd      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
}
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9a:	492e      	ldr	r1, [pc, #184]	; (8001b54 <HAL_RCC_ClockConfig+0x138>)
 8001a9c:	68a8      	ldr	r0, [r5, #8]
 8001a9e:	684b      	ldr	r3, [r1, #4]
 8001aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aa4:	4303      	orrs	r3, r0
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e7c5      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	686a      	ldr	r2, [r5, #4]
 8001aac:	4c29      	ldr	r4, [pc, #164]	; (8001b54 <HAL_RCC_ClockConfig+0x138>)
 8001aae:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	d11b      	bne.n	8001aec <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	d0ec      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac0:	f023 0303 	bic.w	r3, r3, #3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f864 	bl	8000b94 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001ace:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d113      	bne.n	8001afc <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d0ad      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7ff f859 	bl	8000b94 <HAL_GetTick>
 8001ae2:	1bc0      	subs	r0, r0, r7
 8001ae4:	4540      	cmp	r0, r8
 8001ae6:	d9f5      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 8001ae8:	2003      	movs	r0, #3
 8001aea:	e7d4      	b.n	8001a96 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aec:	2a02      	cmp	r2, #2
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001af4:	e7e0      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	f013 0f02 	tst.w	r3, #2
 8001afa:	e7dd      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d10f      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d097      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7ff f843 	bl	8000b94 <HAL_GetTick>
 8001b0e:	1bc0      	subs	r0, r0, r7
 8001b10:	4540      	cmp	r0, r8
 8001b12:	d9f5      	bls.n	8001b00 <HAL_RCC_ClockConfig+0xe4>
 8001b14:	e7e8      	b.n	8001ae8 <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7ff f83d 	bl	8000b94 <HAL_GetTick>
 8001b1a:	1bc0      	subs	r0, r0, r7
 8001b1c:	4540      	cmp	r0, r8
 8001b1e:	d8e3      	bhi.n	8001ae8 <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b20:	6863      	ldr	r3, [r4, #4]
 8001b22:	f013 0f0c 	tst.w	r3, #12
 8001b26:	d1f6      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
 8001b28:	e787      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f023 0307 	bic.w	r3, r3, #7
 8001b30:	4333      	orrs	r3, r6
 8001b32:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	42b3      	cmp	r3, r6
 8001b3c:	d1aa      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x78>
 8001b3e:	e782      	b.n	8001a46 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	6863      	ldr	r3, [r4, #4]
 8001b42:	68e9      	ldr	r1, [r5, #12]
 8001b44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6063      	str	r3, [r4, #4]
 8001b4c:	e780      	b.n	8001a50 <HAL_RCC_ClockConfig+0x34>
 8001b4e:	bf00      	nop
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	080073ee 	.word	0x080073ee
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_RCC_GetHCLKFreq>:
}
 8001b60:	4b01      	ldr	r3, [pc, #4]	; (8001b68 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008

08001b6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b7a:	6810      	ldr	r0, [r2, #0]
}    
 8001b7c:	40d8      	lsrs	r0, r3
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000
 8001b84:	080073fe 	.word	0x080073fe
 8001b88:	20000008 	.word	0x20000008

08001b8c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_GetClockConfig+0x34>)
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001ba0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001ba8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bb2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetClockConfig+0x38>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	600b      	str	r3, [r1, #0]
}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bc8:	6803      	ldr	r3, [r0, #0]
{
 8001bca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bce:	07d9      	lsls	r1, r3, #31
{
 8001bd0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bd2:	d520      	bpl.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4c35      	ldr	r4, [pc, #212]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001bd6:	69e3      	ldr	r3, [r4, #28]
 8001bd8:	00da      	lsls	r2, r3, #3
 8001bda:	d432      	bmi.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001bdc:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	69e3      	ldr	r3, [r4, #28]
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61e3      	str	r3, [r4, #28]
 8001be6:	69e3      	ldr	r3, [r4, #28]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4e2f      	ldr	r6, [pc, #188]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001bf2:	6833      	ldr	r3, [r6, #0]
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	d526      	bpl.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bf8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bfa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bfe:	d136      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001c00:	6a23      	ldr	r3, [r4, #32]
 8001c02:	686a      	ldr	r2, [r5, #4]
 8001c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c0c:	b11f      	cbz	r7, 8001c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	69e3      	ldr	r3, [r4, #28]
 8001c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c14:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c16:	6828      	ldr	r0, [r5, #0]
 8001c18:	0783      	lsls	r3, r0, #30
 8001c1a:	d506      	bpl.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c1e:	68a9      	ldr	r1, [r5, #8]
 8001c20:	6853      	ldr	r3, [r2, #4]
 8001c22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c2a:	f010 0010 	ands.w	r0, r0, #16
 8001c2e:	d01b      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c32:	68e9      	ldr	r1, [r5, #12]
 8001c34:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6053      	str	r3, [r2, #4]
 8001c40:	e012      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2700      	movs	r7, #0
 8001c44:	e7d4      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	6833      	ldr	r3, [r6, #0]
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c4e:	f7fe ffa1 	bl	8000b94 <HAL_GetTick>
 8001c52:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	6833      	ldr	r3, [r6, #0]
 8001c56:	05d8      	lsls	r0, r3, #23
 8001c58:	d4ce      	bmi.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7fe ff9b 	bl	8000b94 <HAL_GetTick>
 8001c5e:	eba0 0008 	sub.w	r0, r0, r8
 8001c62:	2864      	cmp	r0, #100	; 0x64
 8001c64:	d9f6      	bls.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001c66:	2003      	movs	r0, #3
}
 8001c68:	b002      	add	sp, #8
 8001c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c6e:	686a      	ldr	r2, [r5, #4]
 8001c70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d0c3      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c78:	2001      	movs	r0, #1
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c7c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c7e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c80:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c86:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001c88:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c8a:	07d9      	lsls	r1, r3, #31
 8001c8c:	d5b8      	bpl.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ff81 	bl	8000b94 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	6a23      	ldr	r3, [r4, #32]
 8001c9a:	079a      	lsls	r2, r3, #30
 8001c9c:	d4b0      	bmi.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe ff79 	bl	8000b94 <HAL_GetTick>
 8001ca2:	1b80      	subs	r0, r0, r6
 8001ca4:	4540      	cmp	r0, r8
 8001ca6:	d9f7      	bls.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001ca8:	e7dd      	b.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42420440 	.word	0x42420440

08001cb8 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb8:	4770      	bx	lr

08001cba <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cba:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001cbc:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_OC_DelayElapsedCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_IC_CaptureCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_TriggerCallback>:
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd8:	6803      	ldr	r3, [r0, #0]
{
 8001cda:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cdc:	691a      	ldr	r2, [r3, #16]
{
 8001cde:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce0:	0791      	lsls	r1, r2, #30
 8001ce2:	d50e      	bpl.n	8001d02 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	0792      	lsls	r2, r2, #30
 8001ce8:	d50b      	bpl.n	8001d02 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cea:	f06f 0202 	mvn.w	r2, #2
 8001cee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf0:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf6:	079b      	lsls	r3, r3, #30
 8001cf8:	d077      	beq.n	8001dea <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	f7ff ffea 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	0750      	lsls	r0, r2, #29
 8001d08:	d510      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	0751      	lsls	r1, r2, #29
 8001d0e:	d50d      	bpl.n	8001d2c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d10:	f06f 0204 	mvn.w	r2, #4
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d16:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d18:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d20:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d22:	d068      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d24:	f7ff ffd5 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	0712      	lsls	r2, r2, #28
 8001d32:	d50f      	bpl.n	8001d54 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	0710      	lsls	r0, r2, #28
 8001d38:	d50c      	bpl.n	8001d54 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3a:	f06f 0208 	mvn.w	r2, #8
 8001d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d40:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d42:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d44:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d46:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d48:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4a:	d05a      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	f7ff ffc1 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d50:	2300      	movs	r3, #0
 8001d52:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	06d2      	lsls	r2, r2, #27
 8001d5a:	d510      	bpl.n	8001d7e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	06d0      	lsls	r0, r2, #27
 8001d60:	d50d      	bpl.n	8001d7e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d62:	f06f 0210 	mvn.w	r2, #16
 8001d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d68:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	d04b      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	f7ff ffac 	bl	8001cd2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	07d1      	lsls	r1, r2, #31
 8001d84:	d508      	bpl.n	8001d98 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	07d2      	lsls	r2, r2, #31
 8001d8a:	d505      	bpl.n	8001d98 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d8c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d92:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d94:	f001 f9ce 	bl	8003134 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	0610      	lsls	r0, r2, #24
 8001d9e:	d508      	bpl.n	8001db2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	0611      	lsls	r1, r2, #24
 8001da4:	d505      	bpl.n	8001db2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001daa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dae:	f000 f888 	bl	8001ec2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	0652      	lsls	r2, r2, #25
 8001db8:	d508      	bpl.n	8001dcc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	0650      	lsls	r0, r2, #25
 8001dbe:	d505      	bpl.n	8001dcc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001dc4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001dc8:	f7ff ff85 	bl	8001cd6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	0691      	lsls	r1, r2, #26
 8001dd2:	d522      	bpl.n	8001e1a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	0692      	lsls	r2, r2, #26
 8001dd8:	d51f      	bpl.n	8001e1a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dda:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001dde:	4620      	mov	r0, r4
    }
  }
}
 8001de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001de6:	f000 b86b 	b.w	8001ec0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	f7ff ff71 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff ff70 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001df4:	e783      	b.n	8001cfe <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	f7ff ff6b 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff ff6a 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e00:	e792      	b.n	8001d28 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	f7ff ff65 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff ff64 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e0c:	e7a0      	b.n	8001d50 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	f7ff ff5f 	bl	8001cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff ff5e 	bl	8001cd4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e18:	e7af      	b.n	8001d7a <HAL_TIM_IRQHandler+0xa2>
}
 8001e1a:	bd10      	pop	{r4, pc}

08001e1c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001e1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	4290      	cmp	r0, r2
 8001e22:	d00a      	beq.n	8001e3a <TIM_Base_SetConfig+0x1e>
 8001e24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x1e>
 8001e2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e2e:	4290      	cmp	r0, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x1e>
 8001e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e36:	4290      	cmp	r0, r2
 8001e38:	d115      	bne.n	8001e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e40:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <TIM_Base_SetConfig+0x6c>)
 8001e44:	4290      	cmp	r0, r2
 8001e46:	d00a      	beq.n	8001e5e <TIM_Base_SetConfig+0x42>
 8001e48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e4c:	d007      	beq.n	8001e5e <TIM_Base_SetConfig+0x42>
 8001e4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e52:	4290      	cmp	r0, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0x42>
 8001e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d103      	bne.n	8001e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e64:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e66:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e6c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001e6e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	688b      	ldr	r3, [r1, #8]
 8001e72:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e74:	680b      	ldr	r3, [r1, #0]
 8001e76:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <TIM_Base_SetConfig+0x6c>)
 8001e7a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e7c:	bf04      	itt	eq
 8001e7e:	690b      	ldreq	r3, [r1, #16]
 8001e80:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001e82:	2301      	movs	r3, #1
 8001e84:	6143      	str	r3, [r0, #20]
}
 8001e86:	4770      	bx	lr
 8001e88:	40012c00 	.word	0x40012c00

08001e8c <HAL_TIM_Base_Init>:
{
 8001e8c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e8e:	4604      	mov	r4, r0
 8001e90:	b1a0      	cbz	r0, 8001ebc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e9a:	b91b      	cbnz	r3, 8001ea4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ea0:	f7ff ff0a 	bl	8001cb8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	1d21      	adds	r1, r4, #4
 8001eae:	f7ff ffb5 	bl	8001e1c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001eb2:	2301      	movs	r3, #1
  return HAL_OK;
 8001eb4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001eb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001eba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	e7fc      	b.n	8001eba <HAL_TIM_Base_Init+0x2e>

08001ec0 <HAL_TIMEx_CommutationCallback>:
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIMEx_BreakCallback>:
 8001ec2:	4770      	bx	lr

08001ec4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001ec4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ec6:	f000 fb55 	bl	8002574 <xTaskGetSchedulerState>
 8001eca:	2801      	cmp	r0, #1
 8001ecc:	d003      	beq.n	8001ed6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001ed2:	f000 bc07 	b.w	80026e4 <xPortSysTickHandler>
}
 8001ed6:	bd08      	pop	{r3, pc}

08001ed8 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001edc:	f100 0308 	add.w	r3, r0, #8
 8001ee0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001eec:	4770      	bx	lr

08001eee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ef2:	4770      	bx	lr

08001ef4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ef4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ef6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001ef8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001efa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f00:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f02:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f04:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f06:	3301      	adds	r3, #1
 8001f08:	6003      	str	r3, [r0, #0]
}
 8001f0a:	4770      	bx	lr

08001f0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f0c:	680a      	ldr	r2, [r1, #0]
{
 8001f0e:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f10:	1c53      	adds	r3, r2, #1
 8001f12:	d10a      	bne.n	8001f2a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f14:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f1a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f1c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f1e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f20:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f22:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f24:	3301      	adds	r3, #1
 8001f26:	6003      	str	r3, [r0, #0]
}
 8001f28:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f2a:	f100 0308 	add.w	r3, r0, #8
 8001f2e:	685c      	ldr	r4, [r3, #4]
 8001f30:	6825      	ldr	r5, [r4, #0]
 8001f32:	4295      	cmp	r5, r2
 8001f34:	d8ef      	bhi.n	8001f16 <vListInsert+0xa>
 8001f36:	4623      	mov	r3, r4
 8001f38:	e7f9      	b.n	8001f2e <vListInsert+0x22>

08001f3a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f3a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f3c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8001f40:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f42:	6882      	ldr	r2, [r0, #8]
 8001f44:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f4a:	bf08      	it	eq
 8001f4c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f4e:	2200      	movs	r2, #0
 8001f50:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	3801      	subs	r0, #1
 8001f56:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001f58:	4770      	bx	lr
	...

08001f5c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <prvResetNextTaskUnblockTime+0x1c>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <prvResetNextTaskUnblockTime+0x20>)
 8001f64:	b919      	cbnz	r1, 8001f6e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f6a:	601a      	str	r2, [r3, #0]
	}
}
 8001f6c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	6852      	ldr	r2, [r2, #4]
 8001f76:	e7f8      	b.n	8001f6a <prvResetNextTaskUnblockTime+0xe>
 8001f78:	20000090 	.word	0x20000090
 8001f7c:	20000168 	.word	0x20000168

08001f80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f84:	4e1b      	ldr	r6, [pc, #108]	; (8001ff4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001f86:	681c      	ldr	r4, [r3, #0]
{
 8001f88:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f8a:	6830      	ldr	r0, [r6, #0]
{
 8001f8c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f8e:	3004      	adds	r0, #4
 8001f90:	f7ff ffd3 	bl	8001f3a <uxListRemove>
 8001f94:	4633      	mov	r3, r6
 8001f96:	b940      	cbnz	r0, 8001faa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f98:	2001      	movs	r0, #1
 8001f9a:	6831      	ldr	r1, [r6, #0]
 8001f9c:	4e16      	ldr	r6, [pc, #88]	; (8001ff8 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001fa0:	6832      	ldr	r2, [r6, #0]
 8001fa2:	4088      	lsls	r0, r1
 8001fa4:	ea22 0200 	bic.w	r2, r2, r0
 8001fa8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001faa:	1c6a      	adds	r2, r5, #1
 8001fac:	d107      	bne.n	8001fbe <prvAddCurrentTaskToDelayedList+0x3e>
 8001fae:	b137      	cbz	r7, 8001fbe <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	4812      	ldr	r0, [pc, #72]	; (8001ffc <prvAddCurrentTaskToDelayedList+0x7c>)
 8001fb4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fba:	f7ff bf9b 	b.w	8001ef4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	1964      	adds	r4, r4, r5
 8001fc2:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001fc4:	d307      	bcc.n	8001fd6 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <prvAddCurrentTaskToDelayedList+0x80>)
 8001fc8:	6810      	ldr	r0, [r2, #0]
 8001fca:	6819      	ldr	r1, [r3, #0]
}
 8001fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fd0:	3104      	adds	r1, #4
 8001fd2:	f7ff bf9b 	b.w	8001f0c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <prvAddCurrentTaskToDelayedList+0x84>)
 8001fd8:	6810      	ldr	r0, [r2, #0]
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	3104      	adds	r1, #4
 8001fde:	f7ff ff95 	bl	8001f0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <prvAddCurrentTaskToDelayedList+0x88>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8001fe8:	bf88      	it	hi
 8001fea:	601c      	strhi	r4, [r3, #0]
}
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200001b0 	.word	0x200001b0
 8001ff4:	2000008c 	.word	0x2000008c
 8001ff8:	20000138 	.word	0x20000138
 8001ffc:	20000188 	.word	0x20000188
 8002000:	20000094 	.word	0x20000094
 8002004:	20000090 	.word	0x20000090
 8002008:	20000168 	.word	0x20000168

0800200c <xTaskCreate>:
	{
 800200c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002010:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002014:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002016:	4650      	mov	r0, sl
	{
 8002018:	460f      	mov	r7, r1
 800201a:	4699      	mov	r9, r3
 800201c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800201e:	f000 fbf9 	bl	8002814 <pvPortMalloc>
			if( pxStack != NULL )
 8002022:	4605      	mov	r5, r0
 8002024:	2800      	cmp	r0, #0
 8002026:	f000 8097 	beq.w	8002158 <xTaskCreate+0x14c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800202a:	2064      	movs	r0, #100	; 0x64
 800202c:	f000 fbf2 	bl	8002814 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002030:	4604      	mov	r4, r0
 8002032:	2800      	cmp	r0, #0
 8002034:	f000 808d 	beq.w	8002152 <xTaskCreate+0x146>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002038:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 800203c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800203e:	4455      	add	r5, sl
 8002040:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002042:	f025 0a07 	bic.w	sl, r5, #7
 8002046:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800204a:	371d      	adds	r7, #29
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800204c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002050:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002054:	7819      	ldrb	r1, [r3, #0]
 8002056:	b109      	cbz	r1, 800205c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002058:	429f      	cmp	r7, r3
 800205a:	d1f7      	bne.n	800204c <xTaskCreate+0x40>
 800205c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800205e:	f04f 0b00 	mov.w	fp, #0
 8002062:	2d06      	cmp	r5, #6
 8002064:	bf28      	it	cs
 8002066:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002068:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800206a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800206c:	e9c4 5b15 	strd	r5, fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002070:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002072:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002076:	f7ff ff3a 	bl	8001eee <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800207a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800207e:	f104 0018 	add.w	r0, r4, #24
 8002082:	f7ff ff34 	bl	8001eee <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002086:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800208a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800208e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002090:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002094:	464a      	mov	r2, r9
 8002096:	4641      	mov	r1, r8
 8002098:	4650      	mov	r0, sl
 800209a:	f000 faa3 	bl	80025e4 <pxPortInitialiseStack>
 800209e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80020a0:	b106      	cbz	r6, 80020a4 <xTaskCreate+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020a2:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80020a4:	f000 fac6 	bl	8002634 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80020aa:	4e33      	ldr	r6, [pc, #204]	; (8002178 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80021a4 <xTaskCreate+0x198>
 80020b2:	3201      	adds	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80020b6:	6835      	ldr	r5, [r6, #0]
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	d150      	bne.n	800215e <xTaskCreate+0x152>
			pxCurrentTCB = pxNewTCB;
 80020bc:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d11f      	bne.n	8002104 <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020c4:	f04f 0914 	mov.w	r9, #20
 80020c8:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020cc:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020ce:	f7ff ff03 	bl	8001ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d2:	2d07      	cmp	r5, #7
 80020d4:	d1f8      	bne.n	80020c8 <xTaskCreate+0xbc>
	vListInitialise( &xDelayedTaskList1 );
 80020d6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80021a8 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80020da:	4d28      	ldr	r5, [pc, #160]	; (800217c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80020dc:	4648      	mov	r0, r9
 80020de:	f7ff fefb 	bl	8001ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7ff fef8 	bl	8001ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020e8:	4825      	ldr	r0, [pc, #148]	; (8002180 <xTaskCreate+0x174>)
 80020ea:	f7ff fef5 	bl	8001ed8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80020ee:	4825      	ldr	r0, [pc, #148]	; (8002184 <xTaskCreate+0x178>)
 80020f0:	f7ff fef2 	bl	8001ed8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80020f4:	4824      	ldr	r0, [pc, #144]	; (8002188 <xTaskCreate+0x17c>)
 80020f6:	f7ff feef 	bl	8001ed8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <xTaskCreate+0x180>)
 80020fc:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <xTaskCreate+0x184>)
 8002102:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002104:	2501      	movs	r5, #1
		uxTaskNumber++;
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002108:	4923      	ldr	r1, [pc, #140]	; (8002198 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800210a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800210c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800210e:	3301      	adds	r3, #1
 8002110:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002114:	fa05 f302 	lsl.w	r3, r5, r2
 8002118:	4303      	orrs	r3, r0
 800211a:	2014      	movs	r0, #20
 800211c:	600b      	str	r3, [r1, #0]
 800211e:	fb00 8002 	mla	r0, r0, r2, r8
 8002122:	4639      	mov	r1, r7
 8002124:	f7ff fee6 	bl	8001ef4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002128:	f000 faa6 	bl	8002678 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <xTaskCreate+0x190>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b163      	cbz	r3, 800214c <xTaskCreate+0x140>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002132:	6833      	ldr	r3, [r6, #0]
 8002134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002136:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <xTaskCreate+0x140>
			taskYIELD_IF_USING_PREEMPTION();
 800213c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <xTaskCreate+0x194>)
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	f3bf 8f6f 	isb	sy
	}
 800214c:	4628      	mov	r0, r5
 800214e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002152:	4628      	mov	r0, r5
 8002154:	f000 fbea 	bl	800292c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002158:	f04f 35ff 	mov.w	r5, #4294967295
 800215c:	e7f6      	b.n	800214c <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <xTaskCreate+0x190>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ce      	bne.n	8002104 <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002166:	6833      	ldr	r3, [r6, #0]
 8002168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800216e:	bf28      	it	cs
 8002170:	6034      	strcs	r4, [r6, #0]
 8002172:	e7c7      	b.n	8002104 <xTaskCreate+0xf8>
 8002174:	20000124 	.word	0x20000124
 8002178:	2000008c 	.word	0x2000008c
 800217c:	20000150 	.word	0x20000150
 8002180:	20000170 	.word	0x20000170
 8002184:	2000019c 	.word	0x2000019c
 8002188:	20000188 	.word	0x20000188
 800218c:	20000090 	.word	0x20000090
 8002190:	20000094 	.word	0x20000094
 8002194:	20000134 	.word	0x20000134
 8002198:	20000138 	.word	0x20000138
 800219c:	20000184 	.word	0x20000184
 80021a0:	e000ed04 	.word	0xe000ed04
 80021a4:	20000098 	.word	0x20000098
 80021a8:	2000013c 	.word	0x2000013c

080021ac <vTaskStartScheduler>:
{
 80021ac:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80021ae:	2400      	movs	r4, #0
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <vTaskStartScheduler+0x60>)
 80021b2:	9400      	str	r4, [sp, #0]
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	4623      	mov	r3, r4
 80021ba:	4915      	ldr	r1, [pc, #84]	; (8002210 <vTaskStartScheduler+0x64>)
 80021bc:	4815      	ldr	r0, [pc, #84]	; (8002214 <vTaskStartScheduler+0x68>)
 80021be:	f7ff ff25 	bl	800200c <xTaskCreate>
	if( xReturn == pdPASS )
 80021c2:	2801      	cmp	r0, #1
 80021c4:	d114      	bne.n	80021f0 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <vTaskStartScheduler+0x6c>)
 80021dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <vTaskStartScheduler+0x70>)
 80021e0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <vTaskStartScheduler+0x74>)
 80021e4:	601c      	str	r4, [r3, #0]
}
 80021e6:	b002      	add	sp, #8
 80021e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80021ec:	f000 baa4 	b.w	8002738 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021f0:	3001      	adds	r0, #1
 80021f2:	d108      	bne.n	8002206 <vTaskStartScheduler+0x5a>
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	e7fe      	b.n	8002204 <vTaskStartScheduler+0x58>
}
 8002206:	b002      	add	sp, #8
 8002208:	bd10      	pop	{r4, pc}
 800220a:	bf00      	nop
 800220c:	20000164 	.word	0x20000164
 8002210:	080070e4 	.word	0x080070e4
 8002214:	0800248d 	.word	0x0800248d
 8002218:	20000168 	.word	0x20000168
 800221c:	20000184 	.word	0x20000184
 8002220:	200001b0 	.word	0x200001b0

08002224 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002224:	4a02      	ldr	r2, [pc, #8]	; (8002230 <vTaskSuspendAll+0xc>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000130 	.word	0x20000130

08002234 <xTaskIncrementTick>:
{
 8002234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <xTaskIncrementTick+0xf8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d16e      	bne.n	800231e <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <xTaskIncrementTick+0xfc>)
 8002242:	681c      	ldr	r4, [r3, #0]
 8002244:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002246:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002248:	b9bc      	cbnz	r4, 800227a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <xTaskIncrementTick+0x100>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	b142      	cbz	r2, 8002264 <xTaskIncrementTick+0x30>
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	e7fe      	b.n	8002262 <xTaskIncrementTick+0x2e>
 8002264:	4a34      	ldr	r2, [pc, #208]	; (8002338 <xTaskIncrementTick+0x104>)
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	6810      	ldr	r0, [r2, #0]
 800226a:	6018      	str	r0, [r3, #0]
 800226c:	6011      	str	r1, [r2, #0]
 800226e:	4a33      	ldr	r2, [pc, #204]	; (800233c <xTaskIncrementTick+0x108>)
 8002270:	6813      	ldr	r3, [r2, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	f7ff fe71 	bl	8001f5c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800227a:	4d31      	ldr	r5, [pc, #196]	; (8002340 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800227c:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	4f30      	ldr	r7, [pc, #192]	; (8002344 <xTaskIncrementTick+0x110>)
 8002284:	42a3      	cmp	r3, r4
 8002286:	d911      	bls.n	80022ac <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <xTaskIncrementTick+0x114>)
 800228c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800228e:	2214      	movs	r2, #20
 8002290:	434a      	muls	r2, r1
 8002292:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002294:	2a02      	cmp	r2, #2
 8002296:	bf28      	it	cs
 8002298:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <xTaskIncrementTick+0x118>)
 800229e:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80022a0:	2a00      	cmp	r2, #0
}
 80022a2:	bf0c      	ite	eq
 80022a4:	4658      	moveq	r0, fp
 80022a6:	2001      	movne	r0, #1
 80022a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ac:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002334 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80022b0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002354 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022b4:	f8da 2000 	ldr.w	r2, [sl]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	b91a      	cbnz	r2, 80022c4 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	602a      	str	r2, [r5, #0]
					break;
 80022c2:	e7e1      	b.n	8002288 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022c4:	f8da 2000 	ldr.w	r2, [sl]
 80022c8:	68d2      	ldr	r2, [r2, #12]
 80022ca:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022cc:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80022ce:	428c      	cmp	r4, r1
 80022d0:	d201      	bcs.n	80022d6 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80022d2:	6029      	str	r1, [r5, #0]
						break;
 80022d4:	e7d8      	b.n	8002288 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022d6:	f106 0804 	add.w	r8, r6, #4
 80022da:	4640      	mov	r0, r8
 80022dc:	f7ff fe2d 	bl	8001f3a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022e0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80022e2:	b119      	cbz	r1, 80022ec <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022e4:	f106 0018 	add.w	r0, r6, #24
 80022e8:	f7ff fe27 	bl	8001f3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022ec:	2201      	movs	r2, #1
 80022ee:	f04f 0c14 	mov.w	ip, #20
 80022f2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80022f4:	f8d9 3000 	ldr.w	r3, [r9]
 80022f8:	fa02 f100 	lsl.w	r1, r2, r0
 80022fc:	4319      	orrs	r1, r3
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <xTaskIncrementTick+0x114>)
 8002300:	f8c9 1000 	str.w	r1, [r9]
 8002304:	fb0c 3000 	mla	r0, ip, r0, r3
 8002308:	4641      	mov	r1, r8
 800230a:	f7ff fdf3 	bl	8001ef4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002312:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002314:	4291      	cmp	r1, r2
 8002316:	bf28      	it	cs
 8002318:	f04f 0b01 	movcs.w	fp, #1
 800231c:	e7ca      	b.n	80022b4 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8002320:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e7b7      	b.n	800229c <xTaskIncrementTick+0x68>
 800232c:	20000130 	.word	0x20000130
 8002330:	200001b0 	.word	0x200001b0
 8002334:	20000090 	.word	0x20000090
 8002338:	20000094 	.word	0x20000094
 800233c:	2000016c 	.word	0x2000016c
 8002340:	20000168 	.word	0x20000168
 8002344:	2000008c 	.word	0x2000008c
 8002348:	20000098 	.word	0x20000098
 800234c:	200001b4 	.word	0x200001b4
 8002350:	2000012c 	.word	0x2000012c
 8002354:	20000138 	.word	0x20000138

08002358 <xTaskResumeAll>:
{
 8002358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800235c:	4c30      	ldr	r4, [pc, #192]	; (8002420 <xTaskResumeAll+0xc8>)
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	b943      	cbnz	r3, 8002374 <xTaskResumeAll+0x1c>
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	e7fe      	b.n	8002372 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002374:	f000 f95e 	bl	8002634 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800237e:	6824      	ldr	r4, [r4, #0]
 8002380:	b12c      	cbz	r4, 800238e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002382:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002384:	f000 f978 	bl	8002678 <vPortExitCritical>
}
 8002388:	4620      	mov	r0, r4
 800238a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <xTaskResumeAll+0xcc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f5      	beq.n	8002382 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002396:	4d24      	ldr	r5, [pc, #144]	; (8002428 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002398:	4e24      	ldr	r6, [pc, #144]	; (800242c <xTaskResumeAll+0xd4>)
 800239a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002440 <xTaskResumeAll+0xe8>
 800239e:	e01f      	b.n	80023e0 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80023a0:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 80023a2:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80023a4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023a6:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023aa:	f104 0018 	add.w	r0, r4, #24
 80023ae:	f7ff fdc4 	bl	8001f3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023b2:	4648      	mov	r0, r9
 80023b4:	f7ff fdc1 	bl	8001f3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023b8:	2014      	movs	r0, #20
 80023ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023bc:	6831      	ldr	r1, [r6, #0]
 80023be:	fa07 f302 	lsl.w	r3, r7, r2
 80023c2:	430b      	orrs	r3, r1
 80023c4:	fb00 8002 	mla	r0, r0, r2, r8
 80023c8:	4649      	mov	r1, r9
 80023ca:	6033      	str	r3, [r6, #0]
 80023cc:	f7ff fd92 	bl	8001ef4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <xTaskResumeAll+0xd8>)
 80023d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d301      	bcc.n	80023e0 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <xTaskResumeAll+0xdc>)
 80023de:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1dc      	bne.n	80023a0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80023e6:	b10c      	cbz	r4, 80023ec <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80023e8:	f7ff fdb8 	bl	8001f5c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023ec:	4d12      	ldr	r5, [pc, #72]	; (8002438 <xTaskResumeAll+0xe0>)
 80023ee:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80023f0:	b144      	cbz	r4, 8002404 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80023f2:	2701      	movs	r7, #1
 80023f4:	4e0f      	ldr	r6, [pc, #60]	; (8002434 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80023f6:	f7ff ff1d 	bl	8002234 <xTaskIncrementTick>
 80023fa:	b100      	cbz	r0, 80023fe <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80023fc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80023fe:	3c01      	subs	r4, #1
 8002400:	d1f9      	bne.n	80023f6 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002402:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <xTaskResumeAll+0xdc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ba      	beq.n	8002382 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800240c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <xTaskResumeAll+0xe4>)
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800241c:	2401      	movs	r4, #1
 800241e:	e7b1      	b.n	8002384 <xTaskResumeAll+0x2c>
 8002420:	20000130 	.word	0x20000130
 8002424:	20000124 	.word	0x20000124
 8002428:	20000170 	.word	0x20000170
 800242c:	20000138 	.word	0x20000138
 8002430:	2000008c 	.word	0x2000008c
 8002434:	200001b4 	.word	0x200001b4
 8002438:	2000012c 	.word	0x2000012c
 800243c:	e000ed04 	.word	0xe000ed04
 8002440:	20000098 	.word	0x20000098

08002444 <vTaskDelay>:
	{
 8002444:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002446:	b940      	cbnz	r0, 800245a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <vTaskDelay+0x40>)
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	f3bf 8f6f 	isb	sy
	}
 8002458:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <vTaskDelay+0x44>)
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	b141      	cbz	r1, 8002472 <vTaskDelay+0x2e>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	e7fe      	b.n	8002470 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002472:	f7ff fed7 	bl	8002224 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002476:	f7ff fd83 	bl	8001f80 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800247a:	f7ff ff6d 	bl	8002358 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800247e:	2800      	cmp	r0, #0
 8002480:	d0e2      	beq.n	8002448 <vTaskDelay+0x4>
 8002482:	e7e9      	b.n	8002458 <vTaskDelay+0x14>
 8002484:	e000ed04 	.word	0xe000ed04
 8002488:	20000130 	.word	0x20000130

0800248c <prvIdleTask>:
{
 800248c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800248e:	4e17      	ldr	r6, [pc, #92]	; (80024ec <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002490:	4c17      	ldr	r4, [pc, #92]	; (80024f0 <prvIdleTask+0x64>)
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	b963      	cbnz	r3, 80024b0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <prvIdleTask+0x68>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d9f8      	bls.n	8002490 <prvIdleTask+0x4>
				taskYIELD();
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <prvIdleTask+0x6c>)
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	e7ef      	b.n	8002490 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80024b0:	f7ff feb8 	bl	8002224 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024b4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80024b6:	f7ff ff4f 	bl	8002358 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80024ba:	2d00      	cmp	r5, #0
 80024bc:	d0e9      	beq.n	8002492 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80024be:	f000 f8b9 	bl	8002634 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80024c2:	68f3      	ldr	r3, [r6, #12]
 80024c4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024c6:	1d28      	adds	r0, r5, #4
 80024c8:	f7ff fd37 	bl	8001f3a <uxListRemove>
					--uxCurrentNumberOfTasks;
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <prvIdleTask+0x70>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80024da:	f000 f8cd 	bl	8002678 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80024de:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80024e0:	f000 fa24 	bl	800292c <vPortFree>
			vPortFree( pxTCB );
 80024e4:	4628      	mov	r0, r5
 80024e6:	f000 fa21 	bl	800292c <vPortFree>
 80024ea:	e7d2      	b.n	8002492 <prvIdleTask+0x6>
 80024ec:	2000019c 	.word	0x2000019c
 80024f0:	20000128 	.word	0x20000128
 80024f4:	20000098 	.word	0x20000098
 80024f8:	e000ed04 	.word	0xe000ed04
 80024fc:	20000124 	.word	0x20000124

08002500 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <vTaskSwitchContext+0x60>)
{
 8002502:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <vTaskSwitchContext+0x64>)
 8002508:	b112      	cbz	r2, 8002510 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800250a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002510:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <vTaskSwitchContext+0x68>)
 8002514:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	2214      	movs	r2, #20
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f1c3 031f 	rsb	r3, r3, #31
 8002522:	435a      	muls	r2, r3
 8002524:	4911      	ldr	r1, [pc, #68]	; (800256c <vTaskSwitchContext+0x6c>)
 8002526:	588c      	ldr	r4, [r1, r2]
 8002528:	1888      	adds	r0, r1, r2
 800252a:	b944      	cbnz	r4, 800253e <vTaskSwitchContext+0x3e>
	__asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	e7fe      	b.n	800253c <vTaskSwitchContext+0x3c>
 800253e:	6844      	ldr	r4, [r0, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	6864      	ldr	r4, [r4, #4]
 8002544:	440a      	add	r2, r1
 8002546:	4294      	cmp	r4, r2
 8002548:	bf08      	it	eq
 800254a:	6862      	ldreq	r2, [r4, #4]
 800254c:	6044      	str	r4, [r0, #4]
 800254e:	bf08      	it	eq
 8002550:	6042      	streq	r2, [r0, #4]
 8002552:	2214      	movs	r2, #20
 8002554:	fb02 1303 	mla	r3, r2, r3, r1
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <vTaskSwitchContext+0x70>)
 800255e:	e7d5      	b.n	800250c <vTaskSwitchContext+0xc>
 8002560:	20000130 	.word	0x20000130
 8002564:	200001b4 	.word	0x200001b4
 8002568:	20000138 	.word	0x20000138
 800256c:	20000098 	.word	0x20000098
 8002570:	2000008c 	.word	0x2000008c

08002574 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <xTaskGetSchedulerState+0x18>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b133      	cbz	r3, 8002588 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <xTaskGetSchedulerState+0x1c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002580:	bf0c      	ite	eq
 8002582:	2002      	moveq	r0, #2
 8002584:	2000      	movne	r0, #0
 8002586:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002588:	2001      	movs	r0, #1
	}
 800258a:	4770      	bx	lr
 800258c:	20000184 	.word	0x20000184
 8002590:	20000130 	.word	0x20000130

08002594 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <prvTaskExitError+0x2c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	d008      	beq.n	80025ae <prvTaskExitError+0x1a>
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	e7fe      	b.n	80025ac <prvTaskExitError+0x18>
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	e7fe      	b.n	80025be <prvTaskExitError+0x2a>
 80025c0:	20000004 	.word	0x20000004

080025c4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80025c4:	4806      	ldr	r0, [pc, #24]	; (80025e0 <prvPortStartFirstTask+0x1c>)
 80025c6:	6800      	ldr	r0, [r0, #0]
 80025c8:	6800      	ldr	r0, [r0, #0]
 80025ca:	f380 8808 	msr	MSP, r0
 80025ce:	b662      	cpsie	i
 80025d0:	b661      	cpsie	f
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	df00      	svc	0
 80025dc:	bf00      	nop
 80025de:	0000      	.short	0x0000
 80025e0:	e000ed08 	.word	0xe000ed08

080025e4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025ee:	f021 0101 	bic.w	r1, r1, #1
 80025f2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025f6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025fa:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80025fe:	3840      	subs	r0, #64	; 0x40
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	08002595 	.word	0x08002595
	...

08002610 <SVC_Handler>:
	__asm volatile (
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <pxCurrentTCBConst2>)
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	6808      	ldr	r0, [r1, #0]
 8002616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800261a:	f380 8809 	msr	PSP, r0
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f380 8811 	msr	BASEPRI, r0
 800262a:	f04e 0e0d 	orr.w	lr, lr, #13
 800262e:	4770      	bx	lr

08002630 <pxCurrentTCBConst2>:
 8002630:	2000008c 	.word	0x2000008c

08002634 <vPortEnterCritical>:
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <vPortEnterCritical+0x3c>)
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800264a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800264c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800264e:	d10d      	bne.n	800266c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <vPortEnterCritical+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002658:	d008      	beq.n	800266c <vPortEnterCritical+0x38>
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	e7fe      	b.n	800266a <vPortEnterCritical+0x36>
	}
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000004 	.word	0x20000004
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <vPortExitCritical+0x24>)
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	b943      	cbnz	r3, 8002690 <vPortExitCritical+0x18>
 800267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	e7fe      	b.n	800268e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002690:	3b01      	subs	r3, #1
 8002692:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002694:	b90b      	cbnz	r3, 800269a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002696:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800269a:	4770      	bx	lr
 800269c:	20000004 	.word	0x20000004

080026a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80026a0:	f3ef 8009 	mrs	r0, PSP
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <pxCurrentTCBConst>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026b0:	6010      	str	r0, [r2, #0]
 80026b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80026b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80026ba:	f380 8811 	msr	BASEPRI, r0
 80026be:	f7ff ff1f 	bl	8002500 <vTaskSwitchContext>
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f380 8811 	msr	BASEPRI, r0
 80026ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	6808      	ldr	r0, [r1, #0]
 80026d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026d6:	f380 8809 	msr	PSP, r0
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	4770      	bx	lr

080026e0 <pxCurrentTCBConst>:
 80026e0:	2000008c 	.word	0x2000008c

080026e4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026e4:	b508      	push	{r3, lr}
	__asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80026f6:	f7ff fd9d 	bl	8002234 <xTaskIncrementTick>
 80026fa:	b118      	cbz	r0, 8002704 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	4b02      	ldr	r3, [pc, #8]	; (800270c <xPortSysTickHandler+0x28>)
 8002702:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002704:	2300      	movs	r3, #0
 8002706:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800270a:	bd08      	pop	{r3, pc}
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <vPortSetupTimerInterrupt+0x1c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fbb3 f3f2 	udiv	r3, r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <vPortSetupTimerInterrupt+0x20>)
 800271e:	3b01      	subs	r3, #1
 8002720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002722:	2207      	movs	r2, #7
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <vPortSetupTimerInterrupt+0x24>)
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	e000e014 	.word	0xe000e014
 8002734:	e000e010 	.word	0xe000e010

08002738 <xPortStartScheduler>:
{
 8002738:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800273c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002748:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002752:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002756:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800275a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800275c:	2207      	movs	r2, #7
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <xPortStartScheduler+0x88>)
 8002760:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002762:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002766:	1e54      	subs	r4, r2, #1
 8002768:	0600      	lsls	r0, r0, #24
 800276a:	d41c      	bmi.n	80027a6 <xPortStartScheduler+0x6e>
 800276c:	b101      	cbz	r1, 8002770 <xPortStartScheduler+0x38>
 800276e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002774:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002778:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800277a:	9b01      	ldr	r3, [sp, #4]
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <xPortStartScheduler+0x80>)
 800277e:	b2db      	uxtb	r3, r3
 8002780:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <xPortStartScheduler+0x8c>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800278a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002792:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002794:	f7ff ffbc 	bl	8002710 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002798:	2200      	movs	r2, #0
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <xPortStartScheduler+0x90>)
 800279c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800279e:	f7ff ff11 	bl	80025c4 <prvPortStartFirstTask>
	prvTaskExitError();
 80027a2:	f7ff fef7 	bl	8002594 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80027aa:	2101      	movs	r1, #1
 80027ac:	0052      	lsls	r2, r2, #1
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f88d 2003 	strb.w	r2, [sp, #3]
 80027b4:	4622      	mov	r2, r4
 80027b6:	e7d4      	b.n	8002762 <xPortStartScheduler+0x2a>
 80027b8:	e000e400 	.word	0xe000e400
 80027bc:	200001b8 	.word	0x200001b8
 80027c0:	200001bc 	.word	0x200001bc
 80027c4:	e000ed20 	.word	0xe000ed20
 80027c8:	20000004 	.word	0x20000004

080027cc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027cc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <prvInsertBlockIntoFreeList+0x40>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4282      	cmp	r2, r0
 80027d4:	d318      	bcc.n	8002808 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027d6:	685c      	ldr	r4, [r3, #4]
 80027d8:	1919      	adds	r1, r3, r4
 80027da:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027dc:	bf01      	itttt	eq
 80027de:	6841      	ldreq	r1, [r0, #4]
 80027e0:	4618      	moveq	r0, r3
 80027e2:	1909      	addeq	r1, r1, r4
 80027e4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027e6:	6844      	ldr	r4, [r0, #4]
 80027e8:	1901      	adds	r1, r0, r4
 80027ea:	428a      	cmp	r2, r1
 80027ec:	d107      	bne.n	80027fe <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <prvInsertBlockIntoFreeList+0x44>)
 80027f0:	6809      	ldr	r1, [r1, #0]
 80027f2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027f4:	bf1f      	itttt	ne
 80027f6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027f8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027fa:	1909      	addne	r1, r1, r4
 80027fc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80027fe:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002800:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002802:	bf18      	it	ne
 8002804:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002806:	bd10      	pop	{r4, pc}
 8002808:	4613      	mov	r3, r2
 800280a:	e7e1      	b.n	80027d0 <prvInsertBlockIntoFreeList+0x4>
 800280c:	20000dd0 	.word	0x20000dd0
 8002810:	200001c0 	.word	0x200001c0

08002814 <pvPortMalloc>:
{
 8002814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002818:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800281a:	f7ff fd03 	bl	8002224 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800281e:	493d      	ldr	r1, [pc, #244]	; (8002914 <pvPortMalloc+0x100>)
 8002820:	4d3d      	ldr	r5, [pc, #244]	; (8002918 <pvPortMalloc+0x104>)
 8002822:	680b      	ldr	r3, [r1, #0]
 8002824:	b9fb      	cbnz	r3, 8002866 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002826:	4a3d      	ldr	r2, [pc, #244]	; (800291c <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002828:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800282a:	0756      	lsls	r6, r2, #29
 800282c:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002830:	bf0f      	iteee	eq
 8002832:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002836:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002838:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800283c:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800283e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002840:	4e37      	ldr	r6, [pc, #220]	; (8002920 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8002842:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002844:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002848:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800284a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800284c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002850:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8002852:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002854:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <pvPortMalloc+0x110>)
 800285a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <pvPortMalloc+0x114>)
 800285e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002864:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002866:	682f      	ldr	r7, [r5, #0]
 8002868:	4227      	tst	r7, r4
 800286a:	d14d      	bne.n	8002908 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800286c:	2c00      	cmp	r4, #0
 800286e:	d03e      	beq.n	80028ee <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8002870:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002874:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002876:	bf1c      	itt	ne
 8002878:	f023 0307 	bicne.w	r3, r3, #7
 800287c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800287e:	2b00      	cmp	r3, #0
 8002880:	d042      	beq.n	8002908 <pvPortMalloc+0xf4>
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <pvPortMalloc+0x114>)
 8002884:	6816      	ldr	r6, [r2, #0]
 8002886:	4690      	mov	r8, r2
 8002888:	429e      	cmp	r6, r3
 800288a:	d33d      	bcc.n	8002908 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 800288c:	4a24      	ldr	r2, [pc, #144]	; (8002920 <pvPortMalloc+0x10c>)
 800288e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002890:	6868      	ldr	r0, [r5, #4]
 8002892:	4298      	cmp	r0, r3
 8002894:	d201      	bcs.n	800289a <pvPortMalloc+0x86>
 8002896:	682c      	ldr	r4, [r5, #0]
 8002898:	b9a4      	cbnz	r4, 80028c4 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800289a:	6809      	ldr	r1, [r1, #0]
 800289c:	42a9      	cmp	r1, r5
 800289e:	d033      	beq.n	8002908 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028a0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028a2:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028a4:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028a6:	1ac2      	subs	r2, r0, r3
 80028a8:	2a10      	cmp	r2, #16
 80028aa:	d912      	bls.n	80028d2 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ac:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028ae:	0741      	lsls	r1, r0, #29
 80028b0:	d00b      	beq.n	80028ca <pvPortMalloc+0xb6>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	e7fe      	b.n	80028c2 <pvPortMalloc+0xae>
 80028c4:	462a      	mov	r2, r5
 80028c6:	4625      	mov	r5, r4
 80028c8:	e7e2      	b.n	8002890 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028ca:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028cc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028ce:	f7ff ff7d 	bl	80027cc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028d2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028d4:	4913      	ldr	r1, [pc, #76]	; (8002924 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028d6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028d8:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80028da:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028dc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028de:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028e2:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028e4:	bf38      	it	cc
 80028e6:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028e8:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028ea:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028ec:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80028ee:	f7ff fd33 	bl	8002358 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028f2:	0763      	lsls	r3, r4, #29
 80028f4:	d00a      	beq.n	800290c <pvPortMalloc+0xf8>
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	e7fe      	b.n	8002906 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8002908:	2400      	movs	r4, #0
 800290a:	e7f0      	b.n	80028ee <pvPortMalloc+0xda>
}
 800290c:	4620      	mov	r0, r4
 800290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002912:	bf00      	nop
 8002914:	200001c0 	.word	0x200001c0
 8002918:	20000dc4 	.word	0x20000dc4
 800291c:	200001c4 	.word	0x200001c4
 8002920:	20000dd0 	.word	0x20000dd0
 8002924:	20000dcc 	.word	0x20000dcc
 8002928:	20000dc8 	.word	0x20000dc8

0800292c <vPortFree>:
{
 800292c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800292e:	4604      	mov	r4, r0
 8002930:	b370      	cbz	r0, 8002990 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002932:	4a18      	ldr	r2, [pc, #96]	; (8002994 <vPortFree+0x68>)
 8002934:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4213      	tst	r3, r2
 800293c:	d108      	bne.n	8002950 <vPortFree+0x24>
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	e7fe      	b.n	800294e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002950:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002954:	b141      	cbz	r1, 8002968 <vPortFree+0x3c>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	e7fe      	b.n	8002966 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002968:	ea23 0302 	bic.w	r3, r3, r2
 800296c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002970:	f7ff fc58 	bl	8002224 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002974:	4a08      	ldr	r2, [pc, #32]	; (8002998 <vPortFree+0x6c>)
 8002976:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800297a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800297c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002980:	440b      	add	r3, r1
 8002982:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002984:	f7ff ff22 	bl	80027cc <prvInsertBlockIntoFreeList>
}
 8002988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800298c:	f7ff bce4 	b.w	8002358 <xTaskResumeAll>
}
 8002990:	bd10      	pop	{r4, pc}
 8002992:	bf00      	nop
 8002994:	20000dc4 	.word	0x20000dc4
 8002998:	20000dc8 	.word	0x20000dc8

0800299c <_Z9init_LFSRm>:
/*
 * Fun��o que passa o valor "semente" para a variavel utilizada na fun��o prng_LFSR()
 */
void init_LFSR(uint32_t valor)
{
	lfsr = valor;
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <_Z9init_LFSRm+0x8>)
 800299e:	6018      	str	r0, [r3, #0]
}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000dd8 	.word	0x20000dd8

080029a8 <_Z9prng_LFSRv>:
 */
uint32_t  prng_LFSR() 	// Galois LFSRs, Liner-Feedback Shift Register, (PRNG)
{
	uint32_t lsb;

	if (lfsr==0)		// garantia para que valor nao seja zero
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_Z9prng_LFSRv+0x20>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	b90a      	cbnz	r2, 80029b2 <_Z9prng_LFSRv+0xa>
	    lfsr = 1;
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

	lsb = lfsr & 0x00000001;
 80029b2:	6819      	ldr	r1, [r3, #0]
	lfsr = lfsr >> 1;
 80029b4:	084a      	lsrs	r2, r1, #1

	if (lsb)
 80029b6:	07c9      	lsls	r1, r1, #31
	    lfsr = lfsr ^ 0x80000057;	//polinomio retirado de http://users.ece.cmu.edu/~koopman/lfsr/
 80029b8:	bf44      	itt	mi
 80029ba:	f082 4200 	eormi.w	r2, r2, #2147483648	; 0x80000000
 80029be:	f082 0257 	eormi.w	r2, r2, #87	; 0x57
 80029c2:	601a      	str	r2, [r3, #0]

	return lfsr;
}
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	4770      	bx	lr
 80029c8:	20000dd8 	.word	0x20000dd8

080029cc <_Z9atraso_usm>:
	asm volatile (  "movw r1, #:lower16:const_us	\n\t"
					"movt r1, #:upper16:const_us	\n\t"		//r1 = fcpu/3000000 (const_us)
					"mul  r0, r0, r1				\n\t"	    //r0 = valor*(fcpu/3000000), c�lculo do n�mero de repeti��es do la�o

					"r_us:	   subs r0, r0, #1		\n\t"
					"bne  r_us						\n\t");		//2 ciclos gastos quando tomado, 1 contr�rio
 80029cc:	f240 010c 	movw	r1, #12
 80029d0:	f2c0 0100 	movt	r1, #0
 80029d4:	fb00 f001 	mul.w	r0, r0, r1

080029d8 <r_us>:
 80029d8:	3801      	subs	r0, #1
 80029da:	d1fd      	bne.n	80029d8 <r_us>
}
 80029dc:	4770      	bx	lr

080029de <_Z15vTask_LCD_PrintPv>:
}

//---------------------------------------------------------------------------------------------------
// Tarefa para atualizar periodicamente o LCD
void vTask_LCD_Print(void *pvParameters)
{
 80029de:	b508      	push	{r3, lr}
	while(1) imprime_LCD();
 80029e0:	f000 fc68 	bl	80032b4 <_Z11imprime_LCDv>
 80029e4:	e7fc      	b.n	80029e0 <_Z15vTask_LCD_PrintPv+0x2>
	...

080029e8 <_Z3maxPii>:
    for (int i=0; i<len; i++){
 80029e8:	2300      	movs	r3, #0
int max (int* arr, int len){
 80029ea:	b510      	push	{r4, lr}
    int maxval = -999; //TODO: proper -inf
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <_Z3maxPii+0x1c>)
    for (int i=0; i<len; i++){
 80029ee:	428b      	cmp	r3, r1
 80029f0:	da06      	bge.n	8002a00 <_Z3maxPii+0x18>
 80029f2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80029f6:	3301      	adds	r3, #1
 80029f8:	42a2      	cmp	r2, r4
 80029fa:	bfb8      	it	lt
 80029fc:	4622      	movlt	r2, r4
 80029fe:	e7f6      	b.n	80029ee <_Z3maxPii+0x6>
}
 8002a00:	4610      	mov	r0, r2
 8002a02:	bd10      	pop	{r4, pc}
 8002a04:	fffffc19 	.word	0xfffffc19

08002a08 <_Z6argmaxPii>:
    for (int i=0; i<len; i++){
 8002a08:	2300      	movs	r3, #0
    int maxidx = 0;
 8002a0a:	461a      	mov	r2, r3
int argmax (int* arr, int len){
 8002a0c:	b530      	push	{r4, r5, lr}
    int maxval = -999; //TODO: proper -inf
 8002a0e:	4c06      	ldr	r4, [pc, #24]	; (8002a28 <_Z6argmaxPii+0x20>)
    for (int i=0; i<len; i++){
 8002a10:	428b      	cmp	r3, r1
 8002a12:	da07      	bge.n	8002a24 <_Z6argmaxPii+0x1c>
        if (arr[i] > maxval){
 8002a14:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8002a18:	42a5      	cmp	r5, r4
 8002a1a:	bfc4      	itt	gt
 8002a1c:	461a      	movgt	r2, r3
 8002a1e:	462c      	movgt	r4, r5
    for (int i=0; i<len; i++){
 8002a20:	3301      	adds	r3, #1
 8002a22:	e7f5      	b.n	8002a10 <_Z6argmaxPii+0x8>
}
 8002a24:	4610      	mov	r0, r2
 8002a26:	bd30      	pop	{r4, r5, pc}
 8002a28:	fffffc19 	.word	0xfffffc19

08002a2c <_ZN4Blob4moveEii>:
        x += dx;
 8002a2c:	6803      	ldr	r3, [r0, #0]
 8002a2e:	4419      	add	r1, r3
        y += dy;
 8002a30:	6843      	ldr	r3, [r0, #4]
        if (x >= GRID_SIZE)
 8002a32:	2907      	cmp	r1, #7
        y += dy;
 8002a34:	441a      	add	r2, r3
        	 x = 0;
 8002a36:	bfc8      	it	gt
 8002a38:	2300      	movgt	r3, #0
        x += dx;
 8002a3a:	6001      	str	r1, [r0, #0]
        	 x = 0;
 8002a3c:	bfc8      	it	gt
 8002a3e:	6003      	strgt	r3, [r0, #0]
        if (x<0)
 8002a40:	6803      	ldr	r3, [r0, #0]
        y += dy;
 8002a42:	6042      	str	r2, [r0, #4]
        if (x<0)
 8002a44:	2b00      	cmp	r3, #0
            x = GRID_SIZE - 1;
 8002a46:	bfbc      	itt	lt
 8002a48:	2307      	movlt	r3, #7
 8002a4a:	6003      	strlt	r3, [r0, #0]
        if (y >= GRID_SIZE)
 8002a4c:	2a07      	cmp	r2, #7
        	y = 0;
 8002a4e:	bfc4      	itt	gt
 8002a50:	2300      	movgt	r3, #0
 8002a52:	6043      	strgt	r3, [r0, #4]
        if (y<0)
 8002a54:	6843      	ldr	r3, [r0, #4]
 8002a56:	2b00      	cmp	r3, #0
            y = GRID_SIZE - 1;
 8002a58:	bfbc      	itt	lt
 8002a5a:	2307      	movlt	r3, #7
 8002a5c:	6043      	strlt	r3, [r0, #4]
    }
 8002a5e:	4770      	bx	lr

08002a60 <_ZN7EnvBlob5resetEv>:
    void reset(void){
 8002a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a64:	4604      	mov	r4, r0
        inits[0] = prng_LFSR()%GRID_SIZE;
 8002a66:	f7ff ff9f 	bl	80029a8 <_Z9prng_LFSRv>
 8002a6a:	f000 0607 	and.w	r6, r0, #7
        inits[1] = prng_LFSR()%GRID_SIZE;
 8002a6e:	f7ff ff9b 	bl	80029a8 <_Z9prng_LFSRv>
 8002a72:	f000 0907 	and.w	r9, r0, #7
            inits[2] = prng_LFSR()%GRID_SIZE;
 8002a76:	f7ff ff97 	bl	80029a8 <_Z9prng_LFSRv>
 8002a7a:	f000 0507 	and.w	r5, r0, #7
            inits[3] = prng_LFSR()%GRID_SIZE;
 8002a7e:	f7ff ff93 	bl	80029a8 <_Z9prng_LFSRv>
            if (inits[2]!=inits[0] || inits[3]!=inits[1])
 8002a82:	42ae      	cmp	r6, r5
            inits[3] = prng_LFSR()%GRID_SIZE;
 8002a84:	f000 0707 	and.w	r7, r0, #7
            if (inits[2]!=inits[0] || inits[3]!=inits[1])
 8002a88:	d022      	beq.n	8002ad0 <_ZN7EnvBlob5resetEv+0x70>
            inits[4] = prng_LFSR()%GRID_SIZE;
 8002a8a:	f7ff ff8d 	bl	80029a8 <_Z9prng_LFSRv>
 8002a8e:	f000 0807 	and.w	r8, r0, #7
            inits[5] = prng_LFSR()%GRID_SIZE;
 8002a92:	f7ff ff89 	bl	80029a8 <_Z9prng_LFSRv>
            if ((inits[4]!=inits[0] || inits[5]!=inits[1]) && (inits[4]!=inits[2] || inits[5]!=inits[3]))
 8002a96:	4546      	cmp	r6, r8
            inits[5] = prng_LFSR()%GRID_SIZE;
 8002a98:	f000 0007 	and.w	r0, r0, #7
            if ((inits[4]!=inits[0] || inits[5]!=inits[1]) && (inits[4]!=inits[2] || inits[5]!=inits[3]))
 8002a9c:	d101      	bne.n	8002aa2 <_ZN7EnvBlob5resetEv+0x42>
 8002a9e:	4581      	cmp	r9, r0
 8002aa0:	d0f3      	beq.n	8002a8a <_ZN7EnvBlob5resetEv+0x2a>
 8002aa2:	45a8      	cmp	r8, r5
 8002aa4:	d101      	bne.n	8002aaa <_ZN7EnvBlob5resetEv+0x4a>
 8002aa6:	4287      	cmp	r7, r0
 8002aa8:	d0ef      	beq.n	8002a8a <_ZN7EnvBlob5resetEv+0x2a>
        _step_counter = 0;
 8002aaa:	2300      	movs	r3, #0
       assert(_player.x != _enemy.x or _player.y != _enemy.y);
 8002aac:	4546      	cmp	r6, r8
        y=y0;
 8002aae:	e9c4 6902 	strd	r6, r9, [r4, #8]
 8002ab2:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8002ab6:	e9c4 8006 	strd	r8, r0, [r4, #24]
        _done = 0;
 8002aba:	e9c4 3300 	strd	r3, r3, [r4]
       assert(_player.x != _enemy.x or _player.y != _enemy.y);
 8002abe:	d10b      	bne.n	8002ad8 <_ZN7EnvBlob5resetEv+0x78>
 8002ac0:	4581      	cmp	r9, r0
 8002ac2:	d109      	bne.n	8002ad8 <_ZN7EnvBlob5resetEv+0x78>
 8002ac4:	21a6      	movs	r1, #166	; 0xa6
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <_ZN7EnvBlob5resetEv+0x9c>)
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <_ZN7EnvBlob5resetEv+0xa0>)
       assert(_player.x != _food.x or _player.y != _food.y);
 8002aca:	480e      	ldr	r0, [pc, #56]	; (8002b04 <_ZN7EnvBlob5resetEv+0xa4>)
 8002acc:	f000 ff96 	bl	80039fc <__assert_func>
            if (inits[2]!=inits[0] || inits[3]!=inits[1])
 8002ad0:	45b9      	cmp	r9, r7
 8002ad2:	d0d0      	beq.n	8002a76 <_ZN7EnvBlob5resetEv+0x16>
 8002ad4:	4635      	mov	r5, r6
 8002ad6:	e7d8      	b.n	8002a8a <_ZN7EnvBlob5resetEv+0x2a>
       assert(_player.x != _food.x or _player.y != _food.y);
 8002ad8:	42ae      	cmp	r6, r5
 8002ada:	d105      	bne.n	8002ae8 <_ZN7EnvBlob5resetEv+0x88>
 8002adc:	45b9      	cmp	r9, r7
 8002ade:	d103      	bne.n	8002ae8 <_ZN7EnvBlob5resetEv+0x88>
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <_ZN7EnvBlob5resetEv+0xa8>)
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <_ZN7EnvBlob5resetEv+0xa0>)
 8002ae4:	21a7      	movs	r1, #167	; 0xa7
 8002ae6:	e7f0      	b.n	8002aca <_ZN7EnvBlob5resetEv+0x6a>
       assert(_enemy.x != _food.x or _enemy.y != _food.y);
 8002ae8:	4545      	cmp	r5, r8
 8002aea:	d105      	bne.n	8002af8 <_ZN7EnvBlob5resetEv+0x98>
 8002aec:	4287      	cmp	r7, r0
 8002aee:	d103      	bne.n	8002af8 <_ZN7EnvBlob5resetEv+0x98>
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <_ZN7EnvBlob5resetEv+0xac>)
 8002af2:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <_ZN7EnvBlob5resetEv+0xa0>)
 8002af4:	21a8      	movs	r1, #168	; 0xa8
 8002af6:	e7e8      	b.n	8002aca <_ZN7EnvBlob5resetEv+0x6a>
    }
 8002af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002afc:	080070ef 	.word	0x080070ef
 8002b00:	08007186 	.word	0x08007186
 8002b04:	0800711e 	.word	0x0800711e
 8002b08:	0800712e 	.word	0x0800712e
 8002b0c:	0800715b 	.word	0x0800715b

08002b10 <_ZN7EnvBlob6renderEv>:
    void render(void){
 8002b10:	b510      	push	{r4, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	4604      	mov	r4, r0
    	limpa_LCD();
 8002b16:	f000 fc03 	bl	8003320 <_Z9limpa_LCDv>
		scenery.x1 = 0;
 8002b1a:	2300      	movs	r3, #0
		scenery.y2 = 47;
 8002b1c:	2253      	movs	r2, #83	; 0x53
		scenery.y1 = 0;
 8002b1e:	e9cd 3300 	strd	r3, r3, [sp]
		scenery.y2 = 47;
 8002b22:	232f      	movs	r3, #47	; 0x2f
		desenha_retangulo(&scenery,1);
 8002b24:	4668      	mov	r0, sp
 8002b26:	2101      	movs	r1, #1
		scenery.y2 = 47;
 8002b28:	e9cd 2302 	strd	r2, r3, [sp, #8]
		desenha_retangulo(&scenery,1);
 8002b2c:	f000 fd43 	bl	80035b6 <_Z17desenha_retanguloP8pontos_tm>
    	print_AI(_player.x*8,_player.y*8);
 8002b30:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002b34:	00c9      	lsls	r1, r1, #3
 8002b36:	00c0      	lsls	r0, r0, #3
 8002b38:	f000 fdfc 	bl	8003734 <_Z8print_AImm>
    	print_food(_food.x*8,_food.y*8);
 8002b3c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002b40:	00c9      	lsls	r1, r1, #3
 8002b42:	00c0      	lsls	r0, r0, #3
 8002b44:	f000 fdf0 	bl	8003728 <_Z10print_foodmm>
    	print_monster(_enemy.x*8,_enemy.y*8);
 8002b48:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002b4c:	00c9      	lsls	r1, r1, #3
 8002b4e:	00c0      	lsls	r0, r0, #3
 8002b50:	f000 fdfe 	bl	8003750 <_Z13print_monstermm>
    }
 8002b54:	b006      	add	sp, #24
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <_Z9game_initv>:
{
 8002b58:	b510      	push	{r4, lr}
	env.render();
 8002b5a:	4c23      	ldr	r4, [pc, #140]	; (8002be8 <_Z9game_initv+0x90>)
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff ffd7 	bl	8002b10 <_ZN7EnvBlob6renderEv>
	HAL_Delay(500);
 8002b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b66:	f7fe f81b 	bl	8000ba0 <HAL_Delay>
	limpa_LCD();
 8002b6a:	f000 fbd9 	bl	8003320 <_Z9limpa_LCDv>
	HAL_Delay(100);
 8002b6e:	2064      	movs	r0, #100	; 0x64
 8002b70:	f7fe f816 	bl	8000ba0 <HAL_Delay>
	env.render();
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff ffcb 	bl	8002b10 <_ZN7EnvBlob6renderEv>
	HAL_Delay(500);
 8002b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b7e:	f7fe f80f 	bl	8000ba0 <HAL_Delay>
	limpa_LCD();
 8002b82:	f000 fbcd 	bl	8003320 <_Z9limpa_LCDv>
	HAL_Delay(100);
 8002b86:	2064      	movs	r0, #100	; 0x64
 8002b88:	f7fe f80a 	bl	8000ba0 <HAL_Delay>
	env.render();
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ffbf 	bl	8002b10 <_ZN7EnvBlob6renderEv>
	HAL_Delay(500);
 8002b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b96:	f7fe f803 	bl	8000ba0 <HAL_Delay>
	limpa_LCD();
 8002b9a:	f000 fbc1 	bl	8003320 <_Z9limpa_LCDv>
	HAL_Delay(100);
 8002b9e:	2064      	movs	r0, #100	; 0x64
 8002ba0:	f7fd fffe 	bl	8000ba0 <HAL_Delay>
	env.render();
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff ffb3 	bl	8002b10 <_ZN7EnvBlob6renderEv>
	HAL_Delay(500);
 8002baa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bae:	f7fd fff7 	bl	8000ba0 <HAL_Delay>
	limpa_LCD();
 8002bb2:	f000 fbb5 	bl	8003320 <_Z9limpa_LCDv>
	HAL_Delay(100);
 8002bb6:	2064      	movs	r0, #100	; 0x64
 8002bb8:	f7fd fff2 	bl	8000ba0 <HAL_Delay>
	env.reset();
 8002bbc:	4620      	mov	r0, r4
            _epsilon *= EPS_DECAY;
 8002bbe:	4c0b      	ldr	r4, [pc, #44]	; (8002bec <_Z9game_initv+0x94>)
	env.reset();
 8002bc0:	f7ff ff4e 	bl	8002a60 <_ZN7EnvBlob5resetEv>
            _epsilon *= EPS_DECAY;
 8002bc4:	6820      	ldr	r0, [r4, #0]
 8002bc6:	f7fd fc15 	bl	80003f4 <__aeabi_i2d>
 8002bca:	a305      	add	r3, pc, #20	; (adr r3, 8002be0 <_Z9game_initv+0x88>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fc7a 	bl	80004c8 <__aeabi_dmul>
 8002bd4:	f7fd fe8a 	bl	80008ec <__aeabi_d2iz>
 8002bd8:	6020      	str	r0, [r4, #0]
}
 8002bda:	bd10      	pop	{r4, pc}
 8002bdc:	f3af 8000 	nop.w
 8002be0:	83a53b8e 	.word	0x83a53b8e
 8002be4:	3feffff5 	.word	0x3feffff5
 8002be8:	200034f8 	.word	0x200034f8
 8002bec:	20000de4 	.word	0x20000de4

08002bf0 <_Z3appv>:
int app(){
 8002bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf4:	f06f 0201 	mvn.w	r2, #1
        o.dfx = _preprocess_obs(_player.x - _food.x);
 8002bf8:	4c85      	ldr	r4, [pc, #532]	; (8002e10 <_Z3appv+0x220>)
 8002bfa:	68a7      	ldr	r7, [r4, #8]
 8002bfc:	6926      	ldr	r6, [r4, #16]
        o.dfy = _preprocess_obs(_player.y - _food.y);
 8002bfe:	68e3      	ldr	r3, [r4, #12]
        o.dfx = _preprocess_obs(_player.x - _food.x);
 8002c00:	1bbe      	subs	r6, r7, r6
 8002c02:	4296      	cmp	r6, r2
 8002c04:	bfb8      	it	lt
 8002c06:	4616      	movlt	r6, r2
        o.dfy = _preprocess_obs(_player.y - _food.y);
 8002c08:	6965      	ldr	r5, [r4, #20]
 8002c0a:	2e02      	cmp	r6, #2
 8002c0c:	eba3 0505 	sub.w	r5, r3, r5
 8002c10:	bfa8      	it	ge
 8002c12:	2602      	movge	r6, #2
 8002c14:	4295      	cmp	r5, r2
 8002c16:	bfb8      	it	lt
 8002c18:	4615      	movlt	r5, r2
        o.dex = _preprocess_obs(_player.x - _enemy.x);
 8002c1a:	69a1      	ldr	r1, [r4, #24]
 8002c1c:	2d02      	cmp	r5, #2
 8002c1e:	eba7 0701 	sub.w	r7, r7, r1
 8002c22:	bfa8      	it	ge
 8002c24:	2502      	movge	r5, #2
 8002c26:	4297      	cmp	r7, r2
 8002c28:	bfb8      	it	lt
 8002c2a:	4617      	movlt	r7, r2
        o.dey = _preprocess_obs(_player.y - _enemy.y);
 8002c2c:	69e1      	ldr	r1, [r4, #28]
 8002c2e:	2f02      	cmp	r7, #2
 8002c30:	eba3 0801 	sub.w	r8, r3, r1
 8002c34:	bfa8      	it	ge
 8002c36:	2702      	movge	r7, #2
 8002c38:	4590      	cmp	r8, r2
 8002c3a:	bfb8      	it	lt
 8002c3c:	4690      	movlt	r8, r2
 8002c3e:	f1b8 0f02 	cmp.w	r8, #2
 8002c42:	bfa8      	it	ge
 8002c44:	f04f 0802 	movge.w	r8, #2
            if (prng_LFSR()%100 > _epsilon)
 8002c48:	f7ff feae 	bl	80029a8 <_Z9prng_LFSRv>
 8002c4c:	2364      	movs	r3, #100	; 0x64
 8002c4e:	fbb0 f2f3 	udiv	r2, r0, r3
 8002c52:	fb02 0013 	mls	r0, r2, r3, r0
 8002c56:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <_Z3appv+0x224>)
        obs = obs+max_obs; // Make positive
 8002c58:	3702      	adds	r7, #2
            if (prng_LFSR()%100 > _epsilon)
 8002c5a:	681a      	ldr	r2, [r3, #0]
        obs = obs+max_obs; // Make positive
 8002c5c:	3602      	adds	r6, #2
            if (prng_LFSR()%100 > _epsilon)
 8002c5e:	4290      	cmp	r0, r2
        obs = obs+max_obs; // Make positive
 8002c60:	f105 0502 	add.w	r5, r5, #2
 8002c64:	f108 0802 	add.w	r8, r8, #2
 8002c68:	46a3      	mov	fp, r4
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
            if (prng_LFSR()%100 > _epsilon)
 8002c70:	f240 809e 	bls.w	8002db0 <_Z3appv+0x1c0>
                action = argmax(&_q_table[obs->dfx][obs->dfy][obs->dex][obs->dey][0], ACTION_SPACE);
 8002c74:	2219      	movs	r2, #25
 8002c76:	eb0a 0007 	add.w	r0, sl, r7
 8002c7a:	fb02 0005 	mla	r0, r2, r5, r0
 8002c7e:	eb00 0308 	add.w	r3, r0, r8
 8002c82:	207d      	movs	r0, #125	; 0x7d
 8002c84:	2104      	movs	r1, #4
 8002c86:	fb00 3006 	mla	r0, r0, r6, r3
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <_Z3appv+0x224>)
 8002c8c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002c90:	4408      	add	r0, r1
 8002c92:	f7ff feb9 	bl	8002a08 <_Z6argmaxPii>
 8002c96:	4681      	mov	r9, r0
        if (action == 0)
 8002c98:	f1b9 0f00 	cmp.w	r9, #0
 8002c9c:	f040 808d 	bne.w	8002dba <_Z3appv+0x1ca>
            _player.move(1, 0);
 8002ca0:	464a      	mov	r2, r9
 8002ca2:	2101      	movs	r1, #1
            _player.move(0, -1);
 8002ca4:	485c      	ldr	r0, [pc, #368]	; (8002e18 <_Z3appv+0x228>)
 8002ca6:	f7ff fec1 	bl	8002a2c <_ZN4Blob4moveEii>
        if (dex==0 && dey==0) // exactly on the enemy
 8002caa:	e9db 2c06 	ldrd	r2, ip, [fp, #24]
        int dfx = _player.x - _food.x;
 8002cae:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002cb2:	f8db 4010 	ldr.w	r4, [fp, #16]
        int dfy = _player.y - _food.y;
 8002cb6:	f8db 100c 	ldr.w	r1, [fp, #12]
 8002cba:	f8db 3014 	ldr.w	r3, [fp, #20]
        if (dex==0 && dey==0) // exactly on the enemy
 8002cbe:	4290      	cmp	r0, r2
        int dfx = _player.x - _food.x;
 8002cc0:	eba0 0404 	sub.w	r4, r0, r4
        int dfy = _player.y - _food.y;
 8002cc4:	eba1 0303 	sub.w	r3, r1, r3
        if (dex==0 && dey==0) // exactly on the enemy
 8002cc8:	d102      	bne.n	8002cd0 <_Z3appv+0xe0>
 8002cca:	4561      	cmp	r1, ip
 8002ccc:	f000 8089 	beq.w	8002de2 <_Z3appv+0x1f2>
        else if (dfx==0 && dfy==0) // exactly on the food
 8002cd0:	b914      	cbnz	r4, 8002cd8 <_Z3appv+0xe8>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8087 	beq.w	8002de6 <_Z3appv+0x1f6>
        else if ((dfx*dfx + dfy*dfy)<3) // Near food //TODO: overflow?
 8002cd8:	435b      	muls	r3, r3
 8002cda:	fb04 3404 	mla	r4, r4, r4, r3
 8002cde:	2c02      	cmp	r4, #2
 8002ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ce4:	bfd8      	it	le
 8002ce6:	2400      	movle	r4, #0
        _step_counter += 1;
 8002ce8:	f8db 3000 	ldr.w	r3, [fp]
 8002cec:	3301      	adds	r3, #1
        if (_step_counter>=199 || s.reward==FOOD_REWARD  || s.reward==ENEMY_PENALTY)
 8002cee:	2bc6      	cmp	r3, #198	; 0xc6
        _step_counter += 1;
 8002cf0:	f8cb 3000 	str.w	r3, [fp]
        if (_step_counter>=199 || s.reward==FOOD_REWARD  || s.reward==ENEMY_PENALTY)
 8002cf4:	dc7a      	bgt.n	8002dec <_Z3appv+0x1fc>
 8002cf6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002cfa:	d077      	beq.n	8002dec <_Z3appv+0x1fc>
 8002cfc:	f514 7f96 	cmn.w	r4, #300	; 0x12c
 8002d00:	bf14      	ite	ne
 8002d02:	f04f 0b00 	movne.w	fp, #0
 8002d06:	f04f 0b01 	moveq.w	fp, #1
            _q_table[obs->dfx][obs->dfy][obs->dex][obs->dey][action] = new_q;
 8002d0a:	4457      	add	r7, sl
 8002d0c:	f04f 0a7d 	mov.w	sl, #125	; 0x7d
 8002d10:	fb0a 7606 	mla	r6, sl, r6, r7
 8002d14:	2719      	movs	r7, #25
 8002d16:	fb07 6505 	mla	r5, r7, r5, r6
            float max_future_q = (float) max(&_q_table[new_obs->dfx][new_obs->dfy][new_obs->dex][new_obs->dey][0], ACTION_SPACE);
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	483f      	ldr	r0, [pc, #252]	; (8002e1c <_Z3appv+0x22c>)
 8002d1e:	f7ff fe63 	bl	80029e8 <_Z3maxPii>
            _q_table[obs->dfx][obs->dfy][obs->dex][obs->dey][action] = new_q;
 8002d22:	44a8      	add	r8, r5
 8002d24:	9b01      	ldr	r3, [sp, #4]
 8002d26:	eb09 0988 	add.w	r9, r9, r8, lsl #2
 8002d2a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
            float max_future_q = (float) max(&_q_table[new_obs->dfx][new_obs->dfy][new_obs->dex][new_obs->dey][0], ACTION_SPACE);
 8002d2e:	f7fd febf 	bl	8000ab0 <__aeabi_i2f>
            int new_q = (int) ((1 - LEARNING_RATE)*current_q + LEARNING_RATE*((float)reward+DISCOUNT*max_future_q));
 8002d32:	f7fd fb71 	bl	8000418 <__aeabi_f2d>
 8002d36:	a330      	add	r3, pc, #192	; (adr r3, 8002df8 <_Z3appv+0x208>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fbc4 	bl	80004c8 <__aeabi_dmul>
 8002d40:	4606      	mov	r6, r0
 8002d42:	4620      	mov	r0, r4
 8002d44:	460f      	mov	r7, r1
 8002d46:	f7fd feb3 	bl	8000ab0 <__aeabi_i2f>
 8002d4a:	f7fd fb65 	bl	8000418 <__aeabi_f2d>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4630      	mov	r0, r6
 8002d54:	4639      	mov	r1, r7
 8002d56:	f7fd fa01 	bl	800015c <__adddf3>
 8002d5a:	a329      	add	r3, pc, #164	; (adr r3, 8002e00 <_Z3appv+0x210>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fbb2 	bl	80004c8 <__aeabi_dmul>
 8002d64:	4606      	mov	r6, r0
            float current_q = (float) _q_table[obs->dfx][obs->dfy][obs->dex][obs->dey][action];
 8002d66:	f8d9 0004 	ldr.w	r0, [r9, #4]
            int new_q = (int) ((1 - LEARNING_RATE)*current_q + LEARNING_RATE*((float)reward+DISCOUNT*max_future_q));
 8002d6a:	460f      	mov	r7, r1
            float current_q = (float) _q_table[obs->dfx][obs->dfy][obs->dex][obs->dey][action];
 8002d6c:	f7fd fea0 	bl	8000ab0 <__aeabi_i2f>
            int new_q = (int) ((1 - LEARNING_RATE)*current_q + LEARNING_RATE*((float)reward+DISCOUNT*max_future_q));
 8002d70:	f7fd fb52 	bl	8000418 <__aeabi_f2d>
 8002d74:	a324      	add	r3, pc, #144	; (adr r3, 8002e08 <_Z3appv+0x218>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fba5 	bl	80004c8 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4630      	mov	r0, r6
 8002d84:	4639      	mov	r1, r7
 8002d86:	f7fd f9e9 	bl	800015c <__adddf3>
 8002d8a:	f7fd fdaf 	bl	80008ec <__aeabi_d2iz>
            episode_rewards += step.reward;
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <_Z3appv+0x230>)
            int new_q = (int) ((1 - LEARNING_RATE)*current_q + LEARNING_RATE*((float)reward+DISCOUNT*max_future_q));
 8002d90:	f8c9 0004 	str.w	r0, [r9, #4]
            episode_rewards += step.reward;
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	441c      	add	r4, r3
 8002d98:	6014      	str	r4, [r2, #0]
            if(step.done==1)
 8002d9a:	f1bb 0f00 	cmp.w	fp, #0
 8002d9e:	d001      	beq.n	8002da4 <_Z3appv+0x1b4>
            	game_init();
 8002da0:	f7ff feda 	bl	8002b58 <_Z9game_initv>
                env.render();
 8002da4:	481a      	ldr	r0, [pc, #104]	; (8002e10 <_Z3appv+0x220>)
 8002da6:	f7ff feb3 	bl	8002b10 <_ZN7EnvBlob6renderEv>
}
 8002daa:	b003      	add	sp, #12
 8002dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                action = prng_LFSR()%ACTION_SPACE;
 8002db0:	f7ff fdfa 	bl	80029a8 <_Z9prng_LFSRv>
 8002db4:	f000 0903 	and.w	r9, r0, #3
 8002db8:	e76e      	b.n	8002c98 <_Z3appv+0xa8>
        else if (action == 1)
 8002dba:	f1b9 0f01 	cmp.w	r9, #1
 8002dbe:	d103      	bne.n	8002dc8 <_Z3appv+0x1d8>
            _player.move(-1, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc6:	e76d      	b.n	8002ca4 <_Z3appv+0xb4>
        else if (action == 2)
 8002dc8:	f1b9 0f02 	cmp.w	r9, #2
 8002dcc:	d102      	bne.n	8002dd4 <_Z3appv+0x1e4>
            _player.move(0, 1);
 8002dce:	2201      	movs	r2, #1
            _player.move(0, -1);
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	e767      	b.n	8002ca4 <_Z3appv+0xb4>
        else if (action == 3)
 8002dd4:	f1b9 0f03 	cmp.w	r9, #3
 8002dd8:	f47f af67 	bne.w	8002caa <_Z3appv+0xba>
            _player.move(0, -1);
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	e7f6      	b.n	8002dd0 <_Z3appv+0x1e0>
            s.reward = ENEMY_PENALTY;
 8002de2:	4c10      	ldr	r4, [pc, #64]	; (8002e24 <_Z3appv+0x234>)
 8002de4:	e780      	b.n	8002ce8 <_Z3appv+0xf8>
            s.reward = FOOD_REWARD;
 8002de6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002dea:	e77d      	b.n	8002ce8 <_Z3appv+0xf8>
            s.done=1;
 8002dec:	f04f 0b01 	mov.w	fp, #1
 8002df0:	e78b      	b.n	8002d0a <_Z3appv+0x11a>
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	47ae147b 	.word	0x47ae147b
 8002dfc:	3fb47ae1 	.word	0x3fb47ae1
 8002e00:	47ae147b 	.word	0x47ae147b
 8002e04:	3f847ae1 	.word	0x3f847ae1
 8002e08:	7ae147ae 	.word	0x7ae147ae
 8002e0c:	3fefae14 	.word	0x3fefae14
 8002e10:	200034f8 	.word	0x200034f8
 8002e14:	20000de4 	.word	0x20000de4
 8002e18:	20003500 	.word	0x20003500
 8002e1c:	20000de8 	.word	0x20000de8
 8002e20:	20003518 	.word	0x20003518
 8002e24:	fffffed4 	.word	0xfffffed4

08002e28 <_Z16vTask_Game_PrintPv>:
	while(1)
	{
		app();

		// joystick conditions
		if(valor_ADC[0] > 3000)
 8002e28:	4c1b      	ldr	r4, [pc, #108]	; (8002e98 <_Z16vTask_Game_PrintPv+0x70>)
 8002e2a:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8002e2e:	4626      	mov	r6, r4
{
 8002e30:	b508      	push	{r3, lr}
		app();
 8002e32:	f7ff fedd 	bl	8002bf0 <_Z3appv>
		if(valor_ADC[0] > 3000)
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	42ab      	cmp	r3, r5
 8002e3a:	d920      	bls.n	8002e7e <_Z16vTask_Game_PrintPv+0x56>
			_enemy.move(0, -1);
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
			_enemy.move(0, 1);
 8002e40:	2100      	movs	r1, #0
 8002e42:	4816      	ldr	r0, [pc, #88]	; (8002e9c <_Z16vTask_Game_PrintPv+0x74>)
 8002e44:	f7ff fdf2 	bl	8002a2c <_ZN4Blob4moveEii>
		else if(valor_ADC[0] < 1000)
		{
			env.step_enemy(2);
		}

		if(valor_ADC[1] > 3000)
 8002e48:	6873      	ldr	r3, [r6, #4]
 8002e4a:	42ab      	cmp	r3, r5
 8002e4c:	d91c      	bls.n	8002e88 <_Z16vTask_Game_PrintPv+0x60>
			_enemy.move(1, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2101      	movs	r1, #1
			_enemy.move(-1, 0);
 8002e52:	4812      	ldr	r0, [pc, #72]	; (8002e9c <_Z16vTask_Game_PrintPv+0x74>)
 8002e54:	f7ff fdea 	bl	8002a2c <_ZN4Blob4moveEii>
		}
		else if(valor_ADC[1] < 1000)
		{
			env.step_enemy(1);
		}
		escreve_Nr_Peq(65,16,episode_rewards,0);
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <_Z16vTask_Game_PrintPv+0x78>)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	2041      	movs	r0, #65	; 0x41
 8002e62:	f000 fc03 	bl	800366c <_Z14escreve_Nr_Peqmmlm>
		goto_XY(48,1);
 8002e66:	2101      	movs	r1, #1
 8002e68:	2030      	movs	r0, #48	; 0x30
 8002e6a:	f000 fa15 	bl	8003298 <_Z7goto_XYmm>
		string_LCD("score");
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <_Z16vTask_Game_PrintPv+0x7c>)
 8002e70:	f000 fa4c 	bl	800330c <_Z10string_LCDPc>
		vTaskDelay(400);
 8002e74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e78:	f7ff fae4 	bl	8002444 <vTaskDelay>
		app();
 8002e7c:	e7d9      	b.n	8002e32 <_Z16vTask_Game_PrintPv+0xa>
		else if(valor_ADC[0] < 1000)
 8002e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e82:	d2e1      	bcs.n	8002e48 <_Z16vTask_Game_PrintPv+0x20>
			_enemy.move(0, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	e7db      	b.n	8002e40 <_Z16vTask_Game_PrintPv+0x18>
		else if(valor_ADC[1] < 1000)
 8002e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e8c:	d2e4      	bcs.n	8002e58 <_Z16vTask_Game_PrintPv+0x30>
			_enemy.move(-1, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	e7dd      	b.n	8002e52 <_Z16vTask_Game_PrintPv+0x2a>
 8002e96:	bf00      	nop
 8002e98:	20003590 	.word	0x20003590
 8002e9c:	20003510 	.word	0x20003510
 8002ea0:	20003518 	.word	0x20003518
 8002ea4:	080070e9 	.word	0x080070e9

08002ea8 <HAL_ADC_ConvCpltCallback>:
	if(hadc->Instance == ADC1)
 8002ea8:	6802      	ldr	r2, [r0, #0]
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_ADC_ConvCpltCallback+0x18>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d105      	bne.n	8002ebc <HAL_ADC_ConvCpltCallback+0x14>
		valor_ADC[0]=ADC_buffer[0];
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_ADC_ConvCpltCallback+0x20>)
 8002eb4:	6811      	ldr	r1, [r2, #0]
		valor_ADC[1]=ADC_buffer[1];
 8002eb6:	6852      	ldr	r2, [r2, #4]
		valor_ADC[0]=ADC_buffer[0];
 8002eb8:	6019      	str	r1, [r3, #0]
		valor_ADC[1]=ADC_buffer[1];
 8002eba:	605a      	str	r2, [r3, #4]
}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012400 	.word	0x40012400
 8002ec4:	20000ddc 	.word	0x20000ddc
 8002ec8:	20003590 	.word	0x20003590

08002ecc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ecc:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ed4:	2402      	movs	r4, #2
{
 8002ed6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002edc:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ede:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ee2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ee8:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eea:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002eec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eee:	f7fe fbcf 	bl	8001690 <HAL_RCC_OscConfig>
 8002ef2:	b100      	cbz	r0, 8002ef6 <_Z18SystemClock_Configv+0x2a>
 8002ef4:	e7fe      	b.n	8002ef4 <_Z18SystemClock_Configv+0x28>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002efa:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002efe:	e9cd 3008 	strd	r3, r0, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f02:	4621      	mov	r1, r4
 8002f04:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f06:	e9cd 5405 	strd	r5, r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f0a:	f7fe fd87 	bl	8001a1c <HAL_RCC_ClockConfig>
 8002f0e:	b100      	cbz	r0, 8002f12 <_Z18SystemClock_Configv+0x46>
 8002f10:	e7fe      	b.n	8002f10 <_Z18SystemClock_Configv+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f16:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f18:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002f1a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1c:	f7fe fe54 	bl	8001bc8 <HAL_RCCEx_PeriphCLKConfig>
 8002f20:	4604      	mov	r4, r0
 8002f22:	b100      	cbz	r0, 8002f26 <_Z18SystemClock_Configv+0x5a>
 8002f24:	e7fe      	b.n	8002f24 <_Z18SystemClock_Configv+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f26:	f7fe fe1b 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8002f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f32:	f7fe f999 	bl	8001268 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f36:	2004      	movs	r0, #4
 8002f38:	f7fe f9ac 	bl	8001294 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f7fe f950 	bl	80011e8 <HAL_NVIC_SetPriority>
}
 8002f48:	b015      	add	sp, #84	; 0x54
 8002f4a:	bd30      	pop	{r4, r5, pc}

08002f4c <main>:
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4c6b      	ldr	r4, [pc, #428]	; (80030fc <main+0x1b0>)
{
 8002f50:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002f52:	f7fd fe01 	bl	8000b58 <HAL_Init>
  SystemClock_Config();
 8002f56:	f7ff ffb9 	bl	8002ecc <_Z18SystemClock_Configv>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5a:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f5c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	61a3      	str	r3, [r4, #24]
 8002f64:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	9303      	str	r3, [sp, #12]
 8002f70:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f72:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f74:	4862      	ldr	r0, [pc, #392]	; (8003100 <main+0x1b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f76:	f043 0320 	orr.w	r3, r3, #32
 8002f7a:	61a3      	str	r3, [r4, #24]
 8002f7c:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	61a3      	str	r3, [r4, #24]
 8002f92:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f94:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f9e:	f7fe fb71 	bl	8001684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	21f8      	movs	r1, #248	; 0xf8
 8002fa6:	4857      	ldr	r0, [pc, #348]	; (8003104 <main+0x1b8>)
 8002fa8:	f7fe fb6c 	bl	8001684 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb0:	a906      	add	r1, sp, #24
 8002fb2:	4853      	ldr	r0, [pc, #332]	; (8003100 <main+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb4:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fba:	f7fe fa7d 	bl	80014b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc2:	a906      	add	r1, sp, #24
 8002fc4:	484e      	ldr	r0, [pc, #312]	; (8003100 <main+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc6:	e9cd 3706 	strd	r3, r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fca:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fcc:	f7fe fa74 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002fd0:	23f8      	movs	r3, #248	; 0xf8
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	a906      	add	r1, sp, #24
 8002fd4:	484b      	ldr	r0, [pc, #300]	; (8003104 <main+0x1b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	f7fe fa6c 	bl	80014b8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fe0:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002fe2:	463a      	mov	r2, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fe4:	4333      	orrs	r3, r6
 8002fe6:	6163      	str	r3, [r4, #20]
 8002fe8:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002fea:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fec:	4033      	ands	r3, r6
 8002fee:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002ff0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ff2:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002ff4:	f7fe f8f8 	bl	80011e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ff8:	200b      	movs	r0, #11
 8002ffa:	f7fe f929 	bl	8001250 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002ffe:	4c42      	ldr	r4, [pc, #264]	; (8003108 <main+0x1bc>)
 8003000:	4b42      	ldr	r3, [pc, #264]	; (800310c <main+0x1c0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003002:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8003004:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003006:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.ContinuousConvMode = ENABLE;
 800300a:	e9c4 3602 	strd	r3, r6, [r4, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800300e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003012:	6167      	str	r7, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003014:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003016:	6067      	str	r7, [r4, #4]
  hadc1.Init.NbrOfConversion = 2;
 8003018:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800301a:	f7fe f851 	bl	80010c0 <HAL_ADC_Init>
 800301e:	b100      	cbz	r0, 8003022 <main+0xd6>
 8003020:	e7fe      	b.n	8003020 <main+0xd4>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003022:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003024:	a906      	add	r1, sp, #24
 8003026:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003028:	e9cd 6606 	strd	r6, r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800302c:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800302e:	f7fd fe7b 	bl	8000d28 <HAL_ADC_ConfigChannel>
 8003032:	b100      	cbz	r0, 8003036 <main+0xea>
 8003034:	e7fe      	b.n	8003034 <main+0xe8>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003036:	a906      	add	r1, sp, #24
 8003038:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800303a:	e9cd 5506 	strd	r5, r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800303e:	f7fd fe73 	bl	8000d28 <HAL_ADC_ConfigChannel>
 8003042:	4606      	mov	r6, r0
 8003044:	b100      	cbz	r0, 8003048 <main+0xfc>
 8003046:	e7fe      	b.n	8003046 <main+0xfa>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_buffer,2);
 8003048:	462a      	mov	r2, r5
 800304a:	4931      	ldr	r1, [pc, #196]	; (8003110 <main+0x1c4>)
 800304c:	4620      	mov	r0, r4
 800304e:	f7fd ff87 	bl	8000f60 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8003052:	4620      	mov	r0, r4
 8003054:	f7fd ff1e 	bl	8000e94 <HAL_ADC_Start_IT>
	inic_LCD();
 8003058:	f000 f8f8 	bl	800324c <_Z8inic_LCDv>
	limpa_LCD();
 800305c:	f000 f960 	bl	8003320 <_Z9limpa_LCDv>
	game_init();
 8003060:	f7ff fd7a 	bl	8002b58 <_Z9game_initv>
	goto_XY(0, 0);
 8003064:	4631      	mov	r1, r6
 8003066:	4630      	mov	r0, r6
 8003068:	f000 f916 	bl	8003298 <_Z7goto_XYmm>
	string_LCD("Press.  Botao");
 800306c:	4829      	ldr	r0, [pc, #164]	; (8003114 <main+0x1c8>)
 800306e:	f000 f94d 	bl	800330c <_Z10string_LCDPc>
	goto_XY(20,2);
 8003072:	4629      	mov	r1, r5
 8003074:	2014      	movs	r0, #20
 8003076:	f000 f90f 	bl	8003298 <_Z7goto_XYmm>
	string_LCD("AI");
 800307a:	4827      	ldr	r0, [pc, #156]	; (8003118 <main+0x1cc>)
 800307c:	f000 f946 	bl	800330c <_Z10string_LCDPc>
	goto_XY(20,3);
 8003080:	2103      	movs	r1, #3
 8003082:	2014      	movs	r0, #20
 8003084:	f000 f908 	bl	8003298 <_Z7goto_XYmm>
	string_LCD("food");
 8003088:	4824      	ldr	r0, [pc, #144]	; (800311c <main+0x1d0>)
 800308a:	f000 f93f 	bl	800330c <_Z10string_LCDPc>
	goto_XY(20,4);
 800308e:	2104      	movs	r1, #4
 8003090:	2014      	movs	r0, #20
 8003092:	f000 f901 	bl	8003298 <_Z7goto_XYmm>
	string_LCD("player");
 8003096:	4822      	ldr	r0, [pc, #136]	; (8003120 <main+0x1d4>)
 8003098:	f000 f938 	bl	800330c <_Z10string_LCDPc>
	print_AI(10,17);
 800309c:	2111      	movs	r1, #17
 800309e:	200a      	movs	r0, #10
 80030a0:	f000 fb48 	bl	8003734 <_Z8print_AImm>
	print_food(10,25);
 80030a4:	2119      	movs	r1, #25
 80030a6:	200a      	movs	r0, #10
 80030a8:	f000 fb3e 	bl	8003728 <_Z10print_foodmm>
	print_monster(10,38);
 80030ac:	2126      	movs	r1, #38	; 0x26
 80030ae:	200a      	movs	r0, #10
 80030b0:	f000 fb4e 	bl	8003750 <_Z13print_monstermm>
	imprime_LCD();
 80030b4:	f000 f8fe 	bl	80032b4 <_Z11imprime_LCDv>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) // enquando nao pressionar joystick fica travado
 80030b8:	4d11      	ldr	r5, [pc, #68]	; (8003100 <main+0x1b4>)
 80030ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030be:	4628      	mov	r0, r5
 80030c0:	f7fe fada 	bl	8001678 <HAL_GPIO_ReadPin>
 80030c4:	4604      	mov	r4, r0
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d1f7      	bne.n	80030ba <main+0x16e>
	xTaskCreate(vTask_LCD_Print, "Task 1", 100, NULL, 1,NULL);
 80030ca:	2501      	movs	r5, #1
	init_LFSR(666);	// inicializacao para posicoes aleatorias
 80030cc:	f240 209a 	movw	r0, #666	; 0x29a
 80030d0:	f7ff fc64 	bl	800299c <_Z9init_LFSRm>
	xTaskCreate(vTask_LCD_Print, "Task 1", 100, NULL, 1,NULL);
 80030d4:	4623      	mov	r3, r4
 80030d6:	2264      	movs	r2, #100	; 0x64
 80030d8:	4912      	ldr	r1, [pc, #72]	; (8003124 <main+0x1d8>)
 80030da:	9401      	str	r4, [sp, #4]
 80030dc:	9500      	str	r5, [sp, #0]
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <main+0x1dc>)
 80030e0:	f7fe ff94 	bl	800200c <xTaskCreate>
	xTaskCreate(vTask_Game_Print, "Task 2", 100, NULL, 1,NULL);
 80030e4:	4623      	mov	r3, r4
 80030e6:	2264      	movs	r2, #100	; 0x64
 80030e8:	4910      	ldr	r1, [pc, #64]	; (800312c <main+0x1e0>)
 80030ea:	e9cd 5400 	strd	r5, r4, [sp]
 80030ee:	4810      	ldr	r0, [pc, #64]	; (8003130 <main+0x1e4>)
 80030f0:	f7fe ff8c 	bl	800200c <xTaskCreate>
	vTaskStartScheduler();	// apos este comando o RTOS passa a executar as tarefas
 80030f4:	f7ff f85a 	bl	80021ac <vTaskStartScheduler>
 80030f8:	e7fe      	b.n	80030f8 <main+0x1ac>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	40011000 	.word	0x40011000
 8003104:	40010800 	.word	0x40010800
 8003108:	2000351c 	.word	0x2000351c
 800310c:	40012400 	.word	0x40012400
 8003110:	20000ddc 	.word	0x20000ddc
 8003114:	0800719c 	.word	0x0800719c
 8003118:	080071aa 	.word	0x080071aa
 800311c:	080071ad 	.word	0x080071ad
 8003120:	080071b2 	.word	0x080071b2
 8003124:	080071b9 	.word	0x080071b9
 8003128:	080029df 	.word	0x080029df
 800312c:	080071c0 	.word	0x080071c0
 8003130:	08002e29 	.word	0x08002e29

08003134 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003134:	6802      	ldr	r2, [r0, #0]
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003138:	429a      	cmp	r2, r3
 800313a:	d101      	bne.n	8003140 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800313c:	f7fd bd1e 	b.w	8000b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40000800 	.word	0x40000800

08003148 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003148:	e7fe      	b.n	8003148 <_Error_Handler>
	...

0800314c <_GLOBAL__sub_I_hadc1>:
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800314c:	b538      	push	{r3, r4, r5, lr}
        _player = Blob();
 800314e:	2400      	movs	r4, #0
	        IntelligentAgent(){
 8003150:	4d07      	ldr	r5, [pc, #28]	; (8003170 <_GLOBAL__sub_I_hadc1+0x24>)
        _player = Blob();
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <_GLOBAL__sub_I_hadc1+0x28>)
	        IntelligentAgent(){
 8003154:	f242 7210 	movw	r2, #10000	; 0x2710
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <_GLOBAL__sub_I_hadc1+0x2c>)
 800315a:	1d28      	adds	r0, r5, #4
        _player = Blob();
 800315c:	e9c3 4402 	strd	r4, r4, [r3, #8]
        _food = Blob();
 8003160:	e9c3 4404 	strd	r4, r4, [r3, #16]
        _enemy = Blob();
 8003164:	e9c3 4406 	strd	r4, r4, [r3, #24]
	        IntelligentAgent(){
 8003168:	f000 fc9c 	bl	8003aa4 <memcpy>
	            _epsilon = INITIAL_EPSILON;
 800316c:	602c      	str	r4, [r5, #0]
}
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	20000de4 	.word	0x20000de4
 8003174:	200034f8 	.word	0x200034f8
 8003178:	080049d4 	.word	0x080049d4

0800317c <_Z7cmd_LCDm>:
//----------------------------------------------------------------------------------------------
/*	There are two memory banks in the LCD, data/RAM and commands. This
	function sets the DC pin high or low depending, and then sends the data byte */
//----------------------------------------------------------------------------------------------
void cmd_LCD(uint32_t data)
{
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i=8;

	CLR_DC();					// comando para o LCD
 800317e:	2200      	movs	r2, #0
 8003180:	2120      	movs	r1, #32
{
 8003182:	4605      	mov	r5, r0
	CLR_DC();					// comando para o LCD
 8003184:	4816      	ldr	r0, [pc, #88]	; (80031e0 <_Z7cmd_LCDm+0x64>)
 8003186:	f7fe fa7d 	bl	8001684 <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 800318a:	2200      	movs	r2, #0
 800318c:	2140      	movs	r1, #64	; 0x40
 800318e:	4814      	ldr	r0, [pc, #80]	; (80031e0 <_Z7cmd_LCDm+0x64>)
 8003190:	f7fe fa78 	bl	8001684 <HAL_GPIO_WritePin>
	uint32_t i=8;
 8003194:	2408      	movs	r4, #8
	do								// MSB primeiro
	{	i--;
		if(tst_bit(data,i))
 8003196:	2701      	movs	r7, #1
			SET_DIN();
		else
			CLR_DIN();
 8003198:	4e11      	ldr	r6, [pc, #68]	; (80031e0 <_Z7cmd_LCDm+0x64>)
	{	i--;
 800319a:	3c01      	subs	r4, #1
		if(tst_bit(data,i))
 800319c:	fa07 f204 	lsl.w	r2, r7, r4
 80031a0:	402a      	ands	r2, r5
			SET_DIN();
 80031a2:	bf18      	it	ne
 80031a4:	2201      	movne	r2, #1
			CLR_DIN();
 80031a6:	2110      	movs	r1, #16
 80031a8:	4630      	mov	r0, r6
 80031aa:	f7fe fa6b 	bl	8001684 <HAL_GPIO_WritePin>
		PULSO_CLK();
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff fc0c 	bl	80029cc <_Z9atraso_usm>
 80031b4:	2201      	movs	r2, #1
 80031b6:	2108      	movs	r1, #8
 80031b8:	4809      	ldr	r0, [pc, #36]	; (80031e0 <_Z7cmd_LCDm+0x64>)
 80031ba:	f7fe fa63 	bl	8001684 <HAL_GPIO_WritePin>
 80031be:	2001      	movs	r0, #1
 80031c0:	f7ff fc04 	bl	80029cc <_Z9atraso_usm>
 80031c4:	2200      	movs	r2, #0
 80031c6:	2108      	movs	r1, #8
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <_Z7cmd_LCDm+0x64>)
 80031ca:	f7fe fa5b 	bl	8001684 <HAL_GPIO_WritePin>

	}while(i!=0);
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d1e3      	bne.n	800319a <_Z7cmd_LCDm+0x1e>

	SET_CE();
}
 80031d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	SET_CE();
 80031d6:	2201      	movs	r2, #1
 80031d8:	2140      	movs	r1, #64	; 0x40
 80031da:	4801      	ldr	r0, [pc, #4]	; (80031e0 <_Z7cmd_LCDm+0x64>)
 80031dc:	f7fe ba52 	b.w	8001684 <HAL_GPIO_WritePin>
 80031e0:	40010800 	.word	0x40010800

080031e4 <_Z8data_LCDm>:
//----------------------------------------------------------------------------------------------
void data_LCD(uint32_t data)
{
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t i=8;

	SET_DC();					// dado para o LCD
 80031e6:	2201      	movs	r2, #1
 80031e8:	2120      	movs	r1, #32
{
 80031ea:	4605      	mov	r5, r0
	SET_DC();					// dado para o LCD
 80031ec:	4816      	ldr	r0, [pc, #88]	; (8003248 <_Z8data_LCDm+0x64>)
 80031ee:	f7fe fa49 	bl	8001684 <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 80031f2:	2200      	movs	r2, #0
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	4814      	ldr	r0, [pc, #80]	; (8003248 <_Z8data_LCDm+0x64>)
 80031f8:	f7fe fa44 	bl	8001684 <HAL_GPIO_WritePin>
	uint32_t i=8;
 80031fc:	2408      	movs	r4, #8
	do								// MSB primeiro
	{	i--;
		if(tst_bit(data,i))
 80031fe:	2701      	movs	r7, #1
			SET_DIN();
		else
			CLR_DIN();
 8003200:	4e11      	ldr	r6, [pc, #68]	; (8003248 <_Z8data_LCDm+0x64>)
	{	i--;
 8003202:	3c01      	subs	r4, #1
		if(tst_bit(data,i))
 8003204:	fa07 f204 	lsl.w	r2, r7, r4
 8003208:	402a      	ands	r2, r5
			SET_DIN();
 800320a:	bf18      	it	ne
 800320c:	2201      	movne	r2, #1
			CLR_DIN();
 800320e:	2110      	movs	r1, #16
 8003210:	4630      	mov	r0, r6
 8003212:	f7fe fa37 	bl	8001684 <HAL_GPIO_WritePin>
		PULSO_CLK();
 8003216:	2001      	movs	r0, #1
 8003218:	f7ff fbd8 	bl	80029cc <_Z9atraso_usm>
 800321c:	2201      	movs	r2, #1
 800321e:	2108      	movs	r1, #8
 8003220:	4809      	ldr	r0, [pc, #36]	; (8003248 <_Z8data_LCDm+0x64>)
 8003222:	f7fe fa2f 	bl	8001684 <HAL_GPIO_WritePin>
 8003226:	2001      	movs	r0, #1
 8003228:	f7ff fbd0 	bl	80029cc <_Z9atraso_usm>
 800322c:	2200      	movs	r2, #0
 800322e:	2108      	movs	r1, #8
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <_Z8data_LCDm+0x64>)
 8003232:	f7fe fa27 	bl	8001684 <HAL_GPIO_WritePin>

	}while(i!=0);
 8003236:	2c00      	cmp	r4, #0
 8003238:	d1e3      	bne.n	8003202 <_Z8data_LCDm+0x1e>

	SET_CE();
}
 800323a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	SET_CE();
 800323e:	2201      	movs	r2, #1
 8003240:	2140      	movs	r1, #64	; 0x40
 8003242:	4801      	ldr	r0, [pc, #4]	; (8003248 <_Z8data_LCDm+0x64>)
 8003244:	f7fe ba1e 	b.w	8001684 <HAL_GPIO_WritePin>
 8003248:	40010800 	.word	0x40010800

0800324c <_Z8inic_LCDv>:
//-----------------------------------------------------------------------------------------------
void inic_LCD()
{
 800324c:	b510      	push	{r4, lr}
	// Reset the LCD to a known state
	CLR_RST();
 800324e:	4c11      	ldr	r4, [pc, #68]	; (8003294 <_Z8inic_LCDv+0x48>)
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	4620      	mov	r0, r4
 8003256:	f7fe fa15 	bl	8001684 <HAL_GPIO_WritePin>
	atraso_us(10);
 800325a:	200a      	movs	r0, #10
 800325c:	f7ff fbb6 	bl	80029cc <_Z9atraso_usm>
	SET_RST();
 8003260:	2201      	movs	r2, #1
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	4620      	mov	r0, r4
 8003266:	f7fe fa0d 	bl	8001684 <HAL_GPIO_WritePin>

	cmd_LCD(0x21);			//Tell LCD that extended commands follow
 800326a:	2021      	movs	r0, #33	; 0x21
 800326c:	f7ff ff86 	bl	800317c <_Z7cmd_LCDm>
	cmd_LCD(0xBA);			//Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
 8003270:	20ba      	movs	r0, #186	; 0xba
 8003272:	f7ff ff83 	bl	800317c <_Z7cmd_LCDm>
	cmd_LCD(0x04);			//Set Temp coefficent
 8003276:	2004      	movs	r0, #4
 8003278:	f7ff ff80 	bl	800317c <_Z7cmd_LCDm>
	cmd_LCD(0x14);			//LCD bias mode 1:48: Try 0x13 or 0x14
 800327c:	2014      	movs	r0, #20
 800327e:	f7ff ff7d 	bl	800317c <_Z7cmd_LCDm>

	cmd_LCD(0x20);			//We must send 0x20 before modifying the display control mode
 8003282:	2020      	movs	r0, #32
 8003284:	f7ff ff7a 	bl	800317c <_Z7cmd_LCDm>
	cmd_LCD(0x0C);			//Set display control, normal mode. 0x0D for inverse
}
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	cmd_LCD(0x0C);			//Set display control, normal mode. 0x0D for inverse
 800328c:	200c      	movs	r0, #12
 800328e:	f7ff bf75 	b.w	800317c <_Z7cmd_LCDm>
 8003292:	bf00      	nop
 8003294:	40010800 	.word	0x40010800

08003298 <_Z7goto_XYmm>:
//-----------------------------------------------------------------------------------------------
void goto_XY(uint32_t x, uint32_t y)  // 0<=x<=83  0<=y<=5
{
 8003298:	2905      	cmp	r1, #5
 800329a:	bf28      	it	cs
 800329c:	2105      	movcs	r1, #5
	if(y>5)	y=5;
	if(x>84)	x=83;

	indice_fb =  x + (84*y);		// indice para ser empregado no fb
 800329e:	2354      	movs	r3, #84	; 0x54
	if(x>84)	x=83;
 80032a0:	2854      	cmp	r0, #84	; 0x54
 80032a2:	bf88      	it	hi
 80032a4:	2053      	movhi	r0, #83	; 0x53
	indice_fb =  x + (84*y);		// indice para ser empregado no fb
 80032a6:	fb03 0101 	mla	r1, r3, r1, r0
 80032aa:	4b01      	ldr	r3, [pc, #4]	; (80032b0 <_Z7goto_XYmm+0x18>)
 80032ac:	6019      	str	r1, [r3, #0]
}
 80032ae:	4770      	bx	lr
 80032b0:	20003790 	.word	0x20003790

080032b4 <_Z11imprime_LCDv>:
	for(i=0; i<504; i++)
		fb[i]= imagem[i];
}
//-----------------------------------------------------------------------------------------------
void imprime_LCD()		// desenha em todo o LCD
{
 80032b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t i;

	for (i=0 ; i < 504 ; i++)
 80032b6:	2400      	movs	r4, #0
		data_LCD(fb[i]);
 80032b8:	4d04      	ldr	r5, [pc, #16]	; (80032cc <_Z11imprime_LCDv+0x18>)
 80032ba:	5d28      	ldrb	r0, [r5, r4]
	for (i=0 ; i < 504 ; i++)
 80032bc:	3401      	adds	r4, #1
		data_LCD(fb[i]);
 80032be:	f7ff ff91 	bl	80031e4 <_Z8data_LCDm>
	for (i=0 ; i < 504 ; i++)
 80032c2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80032c6:	d1f8      	bne.n	80032ba <_Z11imprime_LCDv+0x6>
}
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
 80032ca:	bf00      	nop
 80032cc:	20003598 	.word	0x20003598

080032d0 <_Z13caractere_LCDc>:
 * Os caracteres s� podem ser escritos na linha correspondente ao banco	(0-5)							*/
void caractere_LCD(char character)
{
	uint32_t i;

	fb[indice_fb] = 0x00;		//Blank vertical line padding
 80032d0:	2100      	movs	r1, #0
{
 80032d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	fb[indice_fb] = 0x00;		//Blank vertical line padding
 80032d4:	4c0a      	ldr	r4, [pc, #40]	; (8003300 <_Z13caractere_LCDc+0x30>)
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <_Z13caractere_LCDc+0x34>)
 80032d8:	6823      	ldr	r3, [r4, #0]
	indice_fb++;

	for( i= 0 ; i < 5 ; i++)
	{
		fb[indice_fb] = ASCII[character - 0x20][i];//0x20 is the ASCII character for Space (' '). The font table starts with this character
 80032da:	4f0b      	ldr	r7, [pc, #44]	; (8003308 <_Z13caractere_LCDc+0x38>)
	fb[indice_fb] = 0x00;		//Blank vertical line padding
 80032dc:	54d1      	strb	r1, [r2, r3]
 80032de:	2101      	movs	r1, #1
 80032e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		fb[indice_fb] = ASCII[character - 0x20][i];//0x20 is the ASCII character for Space (' '). The font table starts with this character
 80032e4:	18d6      	adds	r6, r2, r3
 80032e6:	180d      	adds	r5, r1, r0
 80032e8:	443d      	add	r5, r7
 80032ea:	f815 5ca1 	ldrb.w	r5, [r5, #-161]
 80032ee:	5475      	strb	r5, [r6, r1]
 80032f0:	3101      	adds	r1, #1
	for( i= 0 ; i < 5 ; i++)
 80032f2:	2906      	cmp	r1, #6
 80032f4:	d1f7      	bne.n	80032e6 <_Z13caractere_LCDc+0x16>
		indice_fb++;
	}

	fb[indice_fb] = 0x00; //Blank vertical line padding
 80032f6:	2100      	movs	r1, #0
 80032f8:	3306      	adds	r3, #6
 80032fa:	54d1      	strb	r1, [r2, r3]
 80032fc:	6023      	str	r3, [r4, #0]
}
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003300:	20003790 	.word	0x20003790
 8003304:	20003598 	.word	0x20003598
 8003308:	080071c7 	.word	0x080071c7

0800330c <_Z10string_LCDPc>:
//-----------------------------------------------------------------------------------------------
void string_LCD(char *msg)
{
 800330c:	b510      	push	{r4, lr}
 800330e:	1e44      	subs	r4, r0, #1
	while(*msg)
 8003310:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003314:	b110      	cbz	r0, 800331c <_Z10string_LCDPc+0x10>
		caractere_LCD(*msg++);
 8003316:	f7ff ffdb 	bl	80032d0 <_Z13caractere_LCDc>
	while(*msg)
 800331a:	e7f9      	b.n	8003310 <_Z10string_LCDPc+0x4>
}
 800331c:	bd10      	pop	{r4, pc}
	...

08003320 <_Z9limpa_LCDv>:
//Clears the LCD by writing zeros to the entire screen
void limpa_LCD()
{
	uint32_t i;

	for ( i= 0 ; i < 504 ; i++)
 8003320:	2300      	movs	r3, #0
		fb[i] = 0x00;
 8003322:	4619      	mov	r1, r3
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <_Z9limpa_LCDv+0x14>)
 8003326:	5499      	strb	r1, [r3, r2]
	for ( i= 0 ; i < 504 ; i++)
 8003328:	3301      	adds	r3, #1
 800332a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800332e:	d1fa      	bne.n	8003326 <_Z9limpa_LCDv+0x6>
}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20003598 	.word	0x20003598

08003338 <_Z13desenha_pixelmmm>:
// Desenha pixel
//-----------------------------------------------------------------------------------------------
void desenha_pixel(uint32_t x,				/* ponto horizontal para o pixel: 0 -> 83 (esq -> dir)	*/
				   uint32_t y,				/* ponto vertical para o pixel: 0 -> 47 (cima -> baixo)	*/
				   uint32_t propr)			/* 0 =  apaga pixel, 1 = liga pixel				*/
{
 8003338:	292f      	cmp	r1, #47	; 0x2f
 800333a:	bf28      	it	cs
 800333c:	212f      	movcs	r1, #47	; 0x2f
	uint32_t i;

	if(x>83)	x=83;
	if(y>47)	y=47;

	i = x + (84*(y/8));		/* determina��o do indice do byte a ser alterado [0 - 503]	*/
 800333e:	2853      	cmp	r0, #83	; 0x53
 8003340:	f04f 0354 	mov.w	r3, #84	; 0x54
 8003344:	bf28      	it	cs
 8003346:	2053      	movcs	r0, #83	; 0x53
{
 8003348:	b530      	push	{r4, r5, lr}
	i = x + (84*(y/8));		/* determina��o do indice do byte a ser alterado [0 - 503]	*/
 800334a:	08cc      	lsrs	r4, r1, #3
 800334c:	fb03 0004 	mla	r0, r3, r4, r0
 8003350:	f001 0407 	and.w	r4, r1, #7
 8003354:	2101      	movs	r1, #1
 8003356:	4d05      	ldr	r5, [pc, #20]	; (800336c <_Z13desenha_pixelmmm+0x34>)
 8003358:	40a1      	lsls	r1, r4
 800335a:	562b      	ldrsb	r3, [r5, r0]
 800335c:	b249      	sxtb	r1, r1

	if(propr==0)
 800335e:	b91a      	cbnz	r2, 8003368 <_Z13desenha_pixelmmm+0x30>
		clr_bit(fb[i],y%8);
 8003360:	ea23 0301 	bic.w	r3, r3, r1
	else
		set_bit(fb[i],y%8);
 8003364:	542b      	strb	r3, [r5, r0]

}
 8003366:	bd30      	pop	{r4, r5, pc}
		set_bit(fb[i],y%8);
 8003368:	430b      	orrs	r3, r1
 800336a:	e7fb      	b.n	8003364 <_Z13desenha_pixelmmm+0x2c>
 800336c:	20003598 	.word	0x20003598

08003370 <_Z13desenha_linhaP8pontos_tm>:
//-----------------------------------------------------------------------------------------------
// Desenha linha - ALGORITMO DE BRESENHAM - (http://www.etechplanet.com/codesnippets/computer-graphics-draw-a-line-using-bresenham-algorithm.aspx)
//-----------------------------------------------------------------------------------------------
void desenha_linha(struct  pontos_t *p,		/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, passagem dos pontos por struct	*/
						   uint32_t prop)	/* 0 =  paga pixel, 1 = liga pixel				*/
{
 8003370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, x, y, x1, y1, x2, y2;
	int32_t dx, dy, dx1, dy1, px, py, xe, ye;

	x1 = p->x1;
	y1 = p->y1;
 8003374:	e9d0 4500 	ldrd	r4, r5, [r0]
	x2 = p->x2;
	y2 = p->y2;
 8003378:	e9d0 3202 	ldrd	r3, r2, [r0, #8]

	dx = x2-x1;
 800337c:	eba3 0a04 	sub.w	sl, r3, r4
	dy = y2-y1;
 8003380:	eba2 0805 	sub.w	r8, r2, r5

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8003384:	ea8a 76ea 	eor.w	r6, sl, sl, asr #31
 8003388:	ea88 77e8 	eor.w	r7, r8, r8, asr #31
 800338c:	eba6 76ea 	sub.w	r6, r6, sl, asr #31
 8003390:	eba7 77e8 	sub.w	r7, r7, r8, asr #31
	dx1 = abs(dx);
	dy1 = abs(dy);
	px = 2*dy1 - dx1;
	py = 2*dx1 - dy1;

	if(dy1 <= dx1)
 8003394:	42be      	cmp	r6, r7
{
 8003396:	4689      	mov	r9, r1
	if(dy1 <= dx1)
 8003398:	db30      	blt.n	80033fc <_Z13desenha_linhaP8pontos_tm+0x8c>
	{	if(dx >= 0)
 800339a:	f1ba 0f00 	cmp.w	sl, #0
			y = y1;
			xe = x2;
		}
		else
		{	x = x2;
			y = y2;
 800339e:	bfbd      	ittte	lt
 80033a0:	4615      	movlt	r5, r2
			xe = x1;
 80033a2:	9400      	strlt	r4, [sp, #0]
		{	x = x2;
 80033a4:	461c      	movlt	r4, r3
			xe = x2;
 80033a6:	9300      	strge	r3, [sp, #0]
		}
		desenha_pixel(x,y,prop);
 80033a8:	460a      	mov	r2, r1
	px = 2*dy1 - dx1;
 80033aa:	007b      	lsls	r3, r7, #1
		desenha_pixel(x,y,prop);
 80033ac:	4629      	mov	r1, r5
 80033ae:	4620      	mov	r0, r4
	px = 2*dy1 - dx1;
 80033b0:	eba3 0b06 	sub.w	fp, r3, r6
 80033b4:	9301      	str	r3, [sp, #4]
		desenha_pixel(x,y,prop);
 80033b6:	f7ff ffbf 	bl	8003338 <_Z13desenha_pixelmmm>
			{
				if((dx<0 && dy<0) || (dx>0 && dy>0))
					y++;
				else
					y--;
				px = px + 2*(dy1-dx1);
 80033ba:	1bbe      	subs	r6, r7, r6
 80033bc:	0076      	lsls	r6, r6, #1
		for(i=0; x<xe; i++)
 80033be:	9b00      	ldr	r3, [sp, #0]
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	d94e      	bls.n	8003462 <_Z13desenha_linhaP8pontos_tm+0xf2>
			if(px<0)
 80033c4:	f1bb 0f00 	cmp.w	fp, #0
			x++;
 80033c8:	f104 0401 	add.w	r4, r4, #1
			if(px<0)
 80033cc:	da07      	bge.n	80033de <_Z13desenha_linhaP8pontos_tm+0x6e>
				px = px + 2*dy1;
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	449b      	add	fp, r3
			}
			desenha_pixel(x,y,prop);
 80033d2:	464a      	mov	r2, r9
 80033d4:	4629      	mov	r1, r5
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff ffae 	bl	8003338 <_Z13desenha_pixelmmm>
		for(i=0; x<xe; i++)
 80033dc:	e7ef      	b.n	80033be <_Z13desenha_linhaP8pontos_tm+0x4e>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 80033de:	f1ba 0f00 	cmp.w	sl, #0
 80033e2:	da05      	bge.n	80033f0 <_Z13desenha_linhaP8pontos_tm+0x80>
 80033e4:	f1b8 0f00 	cmp.w	r8, #0
 80033e8:	da06      	bge.n	80033f8 <_Z13desenha_linhaP8pontos_tm+0x88>
					y++;
 80033ea:	3501      	adds	r5, #1
				px = px + 2*(dy1-dx1);
 80033ec:	44b3      	add	fp, r6
 80033ee:	e7f0      	b.n	80033d2 <_Z13desenha_linhaP8pontos_tm+0x62>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 80033f0:	d002      	beq.n	80033f8 <_Z13desenha_linhaP8pontos_tm+0x88>
 80033f2:	f1b8 0f00 	cmp.w	r8, #0
 80033f6:	dcf8      	bgt.n	80033ea <_Z13desenha_linhaP8pontos_tm+0x7a>
					y--;
 80033f8:	3d01      	subs	r5, #1
 80033fa:	e7f7      	b.n	80033ec <_Z13desenha_linhaP8pontos_tm+0x7c>
		}
	}
	else
	{
		if(dy >= 0)
 80033fc:	f1b8 0f00 	cmp.w	r8, #0
		{	x=x1;
			y=y1;
			ye=y2;
		}
		else
		{	x=x2;
 8003400:	bfbe      	ittt	lt
 8003402:	461c      	movlt	r4, r3
			y=y2;
			ye=y1;
 8003404:	9500      	strlt	r5, [sp, #0]
			y=y2;
 8003406:	4615      	movlt	r5, r2
	py = 2*dx1 - dy1;
 8003408:	ea4f 0346 	mov.w	r3, r6, lsl #1
			ye=y2;
 800340c:	bfa8      	it	ge
 800340e:	9200      	strge	r2, [sp, #0]
		}
		desenha_pixel(x,y,prop);
 8003410:	4620      	mov	r0, r4
 8003412:	460a      	mov	r2, r1
 8003414:	4629      	mov	r1, r5
	py = 2*dx1 - dy1;
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	eba3 0b07 	sub.w	fp, r3, r7
		desenha_pixel(x,y,prop);
 800341c:	f7ff ff8c 	bl	8003338 <_Z13desenha_pixelmmm>
			{
				if((dx<0 && dy<0) || (dx>0 && dy>0))
					x++;
				else
					x--;
				py = py + 2*(dx1-dy1);
 8003420:	1bf6      	subs	r6, r6, r7
 8003422:	0076      	lsls	r6, r6, #1
		for(i=0;y<ye;i++)
 8003424:	9b00      	ldr	r3, [sp, #0]
 8003426:	42ab      	cmp	r3, r5
 8003428:	d91b      	bls.n	8003462 <_Z13desenha_linhaP8pontos_tm+0xf2>
			if(py <= 0)
 800342a:	f1bb 0f00 	cmp.w	fp, #0
			y++;
 800342e:	f105 0501 	add.w	r5, r5, #1
			if(py <= 0)
 8003432:	dc07      	bgt.n	8003444 <_Z13desenha_linhaP8pontos_tm+0xd4>
				py = py + 2*dx1;
 8003434:	9b01      	ldr	r3, [sp, #4]
 8003436:	449b      	add	fp, r3
			}
			desenha_pixel(x,y,prop);
 8003438:	464a      	mov	r2, r9
 800343a:	4629      	mov	r1, r5
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff ff7b 	bl	8003338 <_Z13desenha_pixelmmm>
		for(i=0;y<ye;i++)
 8003442:	e7ef      	b.n	8003424 <_Z13desenha_linhaP8pontos_tm+0xb4>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 8003444:	f1ba 0f00 	cmp.w	sl, #0
 8003448:	da05      	bge.n	8003456 <_Z13desenha_linhaP8pontos_tm+0xe6>
 800344a:	f1b8 0f00 	cmp.w	r8, #0
 800344e:	da06      	bge.n	800345e <_Z13desenha_linhaP8pontos_tm+0xee>
					x++;
 8003450:	3401      	adds	r4, #1
				py = py + 2*(dx1-dy1);
 8003452:	44b3      	add	fp, r6
 8003454:	e7f0      	b.n	8003438 <_Z13desenha_linhaP8pontos_tm+0xc8>
				if((dx<0 && dy<0) || (dx>0 && dy>0))
 8003456:	d002      	beq.n	800345e <_Z13desenha_linhaP8pontos_tm+0xee>
 8003458:	f1b8 0f00 	cmp.w	r8, #0
 800345c:	dcf8      	bgt.n	8003450 <_Z13desenha_linhaP8pontos_tm+0xe0>
					x--;
 800345e:	3c01      	subs	r4, #1
 8003460:	e7f7      	b.n	8003452 <_Z13desenha_linhaP8pontos_tm+0xe2>
		}
	}
}
 8003462:	b003      	add	sp, #12
 8003464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003468 <_Z15desenha_circulolllm>:
//--------------------------------------------------------------------------------------------------------------
// Desenha Circulo - Algoritmo de Ponto M�dio http://rosettacode.org/wiki/Bitmap/Midpoint_circle_algorithm#C
//--------------------------------------------------------------------------------------------------------------
void desenha_circulo(int32_t x0, int32_t y0,int32_t radius,	// valores int se fazem necess�rio devido as compara��es
											 uint32_t prop) // 0 =  paga pixel, 1 = liga pixel
{
 8003468:	2853      	cmp	r0, #83	; 0x53
 800346a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346e:	bfa8      	it	ge
 8003470:	2053      	movge	r0, #83	; 0x53
 8003472:	292f      	cmp	r1, #47	; 0x2f
 8003474:	bfa8      	it	ge
 8003476:	212f      	movge	r1, #47	; 0x2f
	  if(x0>83)	x0=83;
	  if(y0>47) y0=47;

	  f = 1 - radius;
	  ddF_x = 0;
	  ddF_y = -2 * radius;
 8003478:	f06f 0a01 	mvn.w	sl, #1
 800347c:	460d      	mov	r5, r1
	  x = 0;
	  y = radius;

	  // evita a impress�o fora do dom�nio de x e y (erros de impress�o)
	  if((y0 + radius) < 48)		desenha_pixel(x0, y0 + radius,prop);
 800347e:	4411      	add	r1, r2
 8003480:	292f      	cmp	r1, #47	; 0x2f
{
 8003482:	4614      	mov	r4, r2
 8003484:	461e      	mov	r6, r3
 8003486:	4607      	mov	r7, r0
	  f = 1 - radius;
 8003488:	f1c2 0801 	rsb	r8, r2, #1
	  ddF_y = -2 * radius;
 800348c:	fb0a fa02 	mul.w	sl, sl, r2
	  if((y0 + radius) < 48)		desenha_pixel(x0, y0 + radius,prop);
 8003490:	dc02      	bgt.n	8003498 <_Z15desenha_circulolllm+0x30>
 8003492:	461a      	mov	r2, r3
 8003494:	f7ff ff50 	bl	8003338 <_Z13desenha_pixelmmm>
	  if((y0 - radius) >= 0)		desenha_pixel(x0, y0 - radius,prop);
 8003498:	1b29      	subs	r1, r5, r4
 800349a:	d403      	bmi.n	80034a4 <_Z15desenha_circulolllm+0x3c>
 800349c:	4632      	mov	r2, r6
 800349e:	4638      	mov	r0, r7
 80034a0:	f7ff ff4a 	bl	8003338 <_Z13desenha_pixelmmm>
	  if((x0 + radius) < 84)		desenha_pixel(x0 + radius, y0,prop);
 80034a4:	1938      	adds	r0, r7, r4
 80034a6:	2853      	cmp	r0, #83	; 0x53
 80034a8:	dc03      	bgt.n	80034b2 <_Z15desenha_circulolllm+0x4a>
 80034aa:	4632      	mov	r2, r6
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7ff ff43 	bl	8003338 <_Z13desenha_pixelmmm>
	  if((x0 - radius) >= 0)		desenha_pixel(x0 - radius, y0,prop);
 80034b2:	1b38      	subs	r0, r7, r4
 80034b4:	d403      	bmi.n	80034be <_Z15desenha_circulolllm+0x56>
 80034b6:	4632      	mov	r2, r6
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7ff ff3d 	bl	8003338 <_Z13desenha_pixelmmm>
{
 80034be:	2600      	movs	r6, #0

	  while(x < y)
 80034c0:	42a6      	cmp	r6, r4
 80034c2:	da75      	bge.n	80035b0 <_Z15desenha_circulolllm+0x148>
	  {
		  if(f >= 0)
 80034c4:	f1b8 0f00 	cmp.w	r8, #0
		  {
			  y--;
			  ddF_y += 2;
 80034c8:	bfa8      	it	ge
 80034ca:	f10a 0a02 	addge.w	sl, sl, #2
			  f += ddF_y;
		  }
		  x++;
 80034ce:	f106 0601 	add.w	r6, r6, #1
			  f += ddF_y;
 80034d2:	bfa8      	it	ge
 80034d4:	44d0      	addge	r8, sl
 80034d6:	eb06 0907 	add.w	r9, r6, r7
			  y--;
 80034da:	bfa8      	it	ge
 80034dc:	f104 34ff 	addge.w	r4, r4, #4294967295
		  ddF_x += 2;
		  f += ddF_x + 1;
 80034e0:	eb08 0846 	add.w	r8, r8, r6, lsl #1

		  // evita a impress�o fora do dom�nio de x e y (erros de impress�o)
		  if(((x0+x) <84) && ((y0+y) < 48))		desenha_pixel(x0 + x, y0 + y,1);
 80034e4:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
		  f += ddF_x + 1;
 80034e8:	f108 0801 	add.w	r8, r8, #1
		  if(((x0+x) <84) && ((y0+y) < 48))		desenha_pixel(x0 + x, y0 + y,1);
 80034ec:	dc06      	bgt.n	80034fc <_Z15desenha_circulolllm+0x94>
 80034ee:	1929      	adds	r1, r5, r4
 80034f0:	292f      	cmp	r1, #47	; 0x2f
 80034f2:	dc03      	bgt.n	80034fc <_Z15desenha_circulolllm+0x94>
 80034f4:	2201      	movs	r2, #1
 80034f6:	4648      	mov	r0, r9
 80034f8:	f7ff ff1e 	bl	8003338 <_Z13desenha_pixelmmm>
		  if(((x0-x) >=0) && ((y0+y) < 48))		desenha_pixel(x0 - x, y0 + y,1);
 80034fc:	ebb7 0b06 	subs.w	fp, r7, r6
 8003500:	d419      	bmi.n	8003536 <_Z15desenha_circulolllm+0xce>
 8003502:	1929      	adds	r1, r5, r4
 8003504:	292f      	cmp	r1, #47	; 0x2f
 8003506:	dc03      	bgt.n	8003510 <_Z15desenha_circulolllm+0xa8>
 8003508:	2201      	movs	r2, #1
 800350a:	4658      	mov	r0, fp
 800350c:	f7ff ff14 	bl	8003338 <_Z13desenha_pixelmmm>
		  if(((x0+x) <84) && ((y0-y) >=0))		desenha_pixel(x0 + x, y0 - y,1);
 8003510:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 8003514:	dd12      	ble.n	800353c <_Z15desenha_circulolllm+0xd4>
		  if(((x0-x) >=0) && ((y0-y) >=0))		desenha_pixel(x0 - x, y0 - y,1);
 8003516:	1b2b      	subs	r3, r5, r4
 8003518:	d41c      	bmi.n	8003554 <_Z15desenha_circulolllm+0xec>
 800351a:	2201      	movs	r2, #1
 800351c:	4619      	mov	r1, r3
 800351e:	4658      	mov	r0, fp
 8003520:	f7ff ff0a 	bl	8003338 <_Z13desenha_pixelmmm>
 8003524:	e016      	b.n	8003554 <_Z15desenha_circulolllm+0xec>
 8003526:	f1bb 0f00 	cmp.w	fp, #0
 800352a:	daf4      	bge.n	8003516 <_Z15desenha_circulolllm+0xae>
 800352c:	e012      	b.n	8003554 <_Z15desenha_circulolllm+0xec>
		  if(((x0+y) <84) && ((y0+x) < 48))		desenha_pixel(x0 + y, y0 + x,1);
		  if(((x0-y) >=0) && ((y0+x) < 48))		desenha_pixel(x0 - y, y0 + x,1);
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 800352e:	f1bb 0f00 	cmp.w	fp, #0
 8003532:	da28      	bge.n	8003586 <_Z15desenha_circulolllm+0x11e>
 8003534:	e7c4      	b.n	80034c0 <_Z15desenha_circulolllm+0x58>
		  if(((x0+x) <84) && ((y0-y) >=0))		desenha_pixel(x0 + x, y0 - y,1);
 8003536:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 800353a:	dc0b      	bgt.n	8003554 <_Z15desenha_circulolllm+0xec>
 800353c:	1b2b      	subs	r3, r5, r4
 800353e:	d4f2      	bmi.n	8003526 <_Z15desenha_circulolllm+0xbe>
 8003540:	4619      	mov	r1, r3
 8003542:	2201      	movs	r2, #1
 8003544:	4648      	mov	r0, r9
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	f7ff fef6 	bl	8003338 <_Z13desenha_pixelmmm>
		  if(((x0-x) >=0) && ((y0-y) >=0))		desenha_pixel(x0 - x, y0 - y,1);
 800354c:	f1bb 0f00 	cmp.w	fp, #0
 8003550:	9b01      	ldr	r3, [sp, #4]
 8003552:	dae2      	bge.n	800351a <_Z15desenha_circulolllm+0xb2>
		  if(((x0+y) <84) && ((y0+x) < 48))		desenha_pixel(x0 + y, y0 + x,1);
 8003554:	eb07 0904 	add.w	r9, r7, r4
 8003558:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 800355c:	dc06      	bgt.n	800356c <_Z15desenha_circulolllm+0x104>
 800355e:	19a9      	adds	r1, r5, r6
 8003560:	292f      	cmp	r1, #47	; 0x2f
 8003562:	dc03      	bgt.n	800356c <_Z15desenha_circulolllm+0x104>
 8003564:	2201      	movs	r2, #1
 8003566:	4648      	mov	r0, r9
 8003568:	f7ff fee6 	bl	8003338 <_Z13desenha_pixelmmm>
		  if(((x0-y) >=0) && ((y0+x) < 48))		desenha_pixel(x0 - y, y0 + x,1);
 800356c:	ebb7 0b04 	subs.w	fp, r7, r4
 8003570:	d412      	bmi.n	8003598 <_Z15desenha_circulolllm+0x130>
 8003572:	19a9      	adds	r1, r5, r6
 8003574:	292f      	cmp	r1, #47	; 0x2f
 8003576:	dc03      	bgt.n	8003580 <_Z15desenha_circulolllm+0x118>
 8003578:	2201      	movs	r2, #1
 800357a:	4658      	mov	r0, fp
 800357c:	f7ff fedc 	bl	8003338 <_Z13desenha_pixelmmm>
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
 8003580:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 8003584:	dd0b      	ble.n	800359e <_Z15desenha_circulolllm+0x136>
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 8003586:	1bab      	subs	r3, r5, r6
 8003588:	2b00      	cmp	r3, #0
 800358a:	db99      	blt.n	80034c0 <_Z15desenha_circulolllm+0x58>
 800358c:	2201      	movs	r2, #1
 800358e:	1ba9      	subs	r1, r5, r6
 8003590:	4658      	mov	r0, fp
 8003592:	f7ff fed1 	bl	8003338 <_Z13desenha_pixelmmm>
 8003596:	e793      	b.n	80034c0 <_Z15desenha_circulolllm+0x58>
		  if(((x0+y) <84) && ((y0-x) >=0))		desenha_pixel(x0 + y, y0 - x,1);
 8003598:	f1b9 0f53 	cmp.w	r9, #83	; 0x53
 800359c:	dc90      	bgt.n	80034c0 <_Z15desenha_circulolllm+0x58>
 800359e:	1ba9      	subs	r1, r5, r6
 80035a0:	d4c5      	bmi.n	800352e <_Z15desenha_circulolllm+0xc6>
 80035a2:	2201      	movs	r2, #1
 80035a4:	4648      	mov	r0, r9
 80035a6:	f7ff fec7 	bl	8003338 <_Z13desenha_pixelmmm>
		  if(((x0-y) >=0) && ((y0-x) >=0))		desenha_pixel(x0 - y, y0 - x,1);
 80035aa:	f1bb 0f00 	cmp.w	fp, #0
 80035ae:	e7ec      	b.n	800358a <_Z15desenha_circulolllm+0x122>
	  }
}
 80035b0:	b003      	add	sp, #12
 80035b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080035b6 <_Z17desenha_retanguloP8pontos_tm>:
*/
void desenha_retangulo(struct  pontos_t *p,	uint32_t prop)	/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, passagem dos pontos por struct	*/
															/*  ponto superior esquerdo e ponto inferior direito					*/
															/* 0 =  apaga pixel, 1 = liga pixel, 									*/
															/* 2 = preenchimento pixel apagado, 3 = preenchimento pixel ligado		*/
{	struct pontos_t pr;
 80035b6:	b570      	push	{r4, r5, r6, lr}
	uint32_t pxl, i;

	if(prop < 2)								// desenho com quatro linhas
 80035b8:	2901      	cmp	r1, #1
{	struct pontos_t pr;
 80035ba:	b086      	sub	sp, #24
 80035bc:	4604      	mov	r4, r0
 80035be:	460e      	mov	r6, r1
 80035c0:	6842      	ldr	r2, [r0, #4]
 80035c2:	68c3      	ldr	r3, [r0, #12]
 80035c4:	6805      	ldr	r5, [r0, #0]
	if(prop < 2)								// desenho com quatro linhas
 80035c6:	d820      	bhi.n	800360a <_Z17desenha_retanguloP8pontos_tm+0x54>
	{
		pr.x1 = p->x1; pr.y1 = p->y1;
		pr.x2 = p->x1; pr.y2 = p->y2;
		desenha_linha(&pr,prop);
 80035c8:	4668      	mov	r0, sp
		pr.x1 = p->x1; pr.y1 = p->y1;
 80035ca:	e9cd 5200 	strd	r5, r2, [sp]
		pr.x2 = p->x1; pr.y2 = p->y2;
 80035ce:	e9cd 5302 	strd	r5, r3, [sp, #8]
		desenha_linha(&pr,prop);
 80035d2:	f7ff fecd 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>

		pr.x2 = p->x2; pr.y2 = p->y1;
 80035d6:	68a3      	ldr	r3, [r4, #8]
		desenha_linha(&pr,prop);
 80035d8:	4631      	mov	r1, r6
		pr.x2 = p->x2; pr.y2 = p->y1;
 80035da:	9302      	str	r3, [sp, #8]
 80035dc:	6863      	ldr	r3, [r4, #4]
		desenha_linha(&pr,prop);
 80035de:	4668      	mov	r0, sp
		pr.x2 = p->x2; pr.y2 = p->y1;
 80035e0:	9303      	str	r3, [sp, #12]
		desenha_linha(&pr,prop);
 80035e2:	f7ff fec5 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>

		pr.x1 = p->x2; pr.y1 = p->y2;
 80035e6:	68a3      	ldr	r3, [r4, #8]
		desenha_linha(&pr,prop);
 80035e8:	4631      	mov	r1, r6
		pr.x1 = p->x2; pr.y1 = p->y2;
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	68e3      	ldr	r3, [r4, #12]
		desenha_linha(&pr,prop);
 80035ee:	4668      	mov	r0, sp
		pr.x1 = p->x2; pr.y1 = p->y2;
 80035f0:	9301      	str	r3, [sp, #4]
		desenha_linha(&pr,prop);
 80035f2:	f7ff febd 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>

		pr.x2 = p->x1; pr.y2 = p->y2;
 80035f6:	6823      	ldr	r3, [r4, #0]
		desenha_linha(&pr,prop);
 80035f8:	4631      	mov	r1, r6
		pr.x2 = p->x1; pr.y2 = p->y2;
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	68e3      	ldr	r3, [r4, #12]
		desenha_linha(&pr,prop);
 80035fe:	4668      	mov	r0, sp
		pr.x2 = p->x1; pr.y2 = p->y2;
 8003600:	9303      	str	r3, [sp, #12]
		desenha_linha(&pr,prop);
 8003602:	f7ff feb5 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>
			pr.x1 = i;
			pr.x2 = i;
			desenha_linha(&pr,pxl);
		}
	}
}
 8003606:	b006      	add	sp, #24
 8003608:	bd70      	pop	{r4, r5, r6, pc}
		if(prop == 2)							// propriedade para ligar ou apagar os pixeis
 800360a:	1e8e      	subs	r6, r1, #2
 800360c:	bf18      	it	ne
 800360e:	2601      	movne	r6, #1
		pr.y1 = p->y1;
 8003610:	9201      	str	r2, [sp, #4]
		pr.y2 = p->y2;
 8003612:	9303      	str	r3, [sp, #12]
		for(i = p->x1; i <= p->x2; i++)			// desenha as linhas verticalmente
 8003614:	68a3      	ldr	r3, [r4, #8]
 8003616:	42ab      	cmp	r3, r5
 8003618:	d3f5      	bcc.n	8003606 <_Z17desenha_retanguloP8pontos_tm+0x50>
			desenha_linha(&pr,pxl);
 800361a:	4631      	mov	r1, r6
 800361c:	4668      	mov	r0, sp
			pr.x1 = i;
 800361e:	9500      	str	r5, [sp, #0]
			pr.x2 = i;
 8003620:	9502      	str	r5, [sp, #8]
			desenha_linha(&pr,pxl);
 8003622:	f7ff fea5 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>
		for(i = p->x1; i <= p->x2; i++)			// desenha as linhas verticalmente
 8003626:	3501      	adds	r5, #1
 8003628:	e7f4      	b.n	8003614 <_Z17desenha_retanguloP8pontos_tm+0x5e>

0800362a <_Z17desenha_trianguloP8pontos_tm>:
*		p1--------p3
*/
void desenha_triangulo(struct  pontos_t *p,		/*  p.x1=x1, p.y1=y1, p.x2=x2, p.y2=y2, , p.x3=x3, p.y3=y3				*/
												/*  ponto superior esquerdo e ponto inferior direito					*/
								uint32_t prop)	/* 0 =  apaga pixel, 1 = liga pixel,									*/
{	struct pontos_t pt;
 800362a:	b530      	push	{r4, r5, lr}
 800362c:	4604      	mov	r4, r0
 800362e:	460d      	mov	r5, r1

	pt.x1 = p->x1; pt.y1 = p->y1;
 8003630:	6803      	ldr	r3, [r0, #0]
{	struct pontos_t pt;
 8003632:	b087      	sub	sp, #28
	pt.x1 = p->x1; pt.y1 = p->y1;
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	6843      	ldr	r3, [r0, #4]
 8003638:	9301      	str	r3, [sp, #4]
	pt.x2 = p->x2; pt.y2 = p->y2;
 800363a:	6883      	ldr	r3, [r0, #8]
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	68c3      	ldr	r3, [r0, #12]
	desenha_linha(&pt,prop);
 8003640:	4668      	mov	r0, sp
	pt.x2 = p->x2; pt.y2 = p->y2;
 8003642:	9303      	str	r3, [sp, #12]
	desenha_linha(&pt,prop);
 8003644:	f7ff fe94 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>

	pt.x2 = p->x3; pt.y2 = p->y3;
 8003648:	6923      	ldr	r3, [r4, #16]
	desenha_linha(&pt,prop);
 800364a:	4629      	mov	r1, r5
	pt.x2 = p->x3; pt.y2 = p->y3;
 800364c:	9302      	str	r3, [sp, #8]
 800364e:	6963      	ldr	r3, [r4, #20]
	desenha_linha(&pt,prop);
 8003650:	4668      	mov	r0, sp
	pt.x2 = p->x3; pt.y2 = p->y3;
 8003652:	9303      	str	r3, [sp, #12]
	desenha_linha(&pt,prop);
 8003654:	f7ff fe8c 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>

	pt.x1 = p->x2; pt.y1 = p->y2;
 8003658:	68a3      	ldr	r3, [r4, #8]
	desenha_linha(&pt,prop);
 800365a:	4629      	mov	r1, r5
	pt.x1 = p->x2; pt.y1 = p->y2;
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68e3      	ldr	r3, [r4, #12]
	desenha_linha(&pt,prop);
 8003660:	4668      	mov	r0, sp
	pt.x1 = p->x2; pt.y1 = p->y2;
 8003662:	9301      	str	r3, [sp, #4]
	desenha_linha(&pt,prop);
 8003664:	f7ff fe84 	bl	8003370 <_Z13desenha_linhaP8pontos_tm>

}
 8003668:	b007      	add	sp, #28
 800366a:	bd30      	pop	{r4, r5, pc}

0800366c <_Z14escreve_Nr_Peqmmlm>:
	}
	//------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------
void escreve_Nr_Peq(uint32_t x, uint32_t y, int32_t valor, uint32_t quant2Print) // quant2Print = 0, imprime todos os digitos
{
 800366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003670:	4607      	mov	r7, r0
 8003672:	4689      	mov	r9, r1
	uint32_t n=0, i, j, px=0, neg=0;
	unsigned char digitos[11];	// m�ximo de 10 digitos com um digito de sinal

	for(i=0; i<11; i++)
		digitos[i] = ' ';
 8003674:	2020      	movs	r0, #32
	for(i=0; i<11; i++)
 8003676:	2100      	movs	r1, #0
{
 8003678:	b087      	sub	sp, #28
		digitos[i] = ' ';
 800367a:	ad03      	add	r5, sp, #12
 800367c:	5548      	strb	r0, [r1, r5]
	for(i=0; i<11; i++)
 800367e:	3101      	adds	r1, #1
 8003680:	290b      	cmp	r1, #11
 8003682:	d1fb      	bne.n	800367c <_Z14escreve_Nr_Peqmmlm+0x10>

	if(valor<0)
 8003684:	2a00      	cmp	r2, #0
	{
		neg=1;
 8003686:	bfb4      	ite	lt
 8003688:	2401      	movlt	r4, #1
	uint32_t n=0, i, j, px=0, neg=0;
 800368a:	2400      	movge	r4, #0
		neg=1;
 800368c:	f04f 0000 	mov.w	r0, #0
		valor = valor*-1;
	}

	do
	{
		digitos[n] = valor%10;	//pega o resto da divisao por 10
 8003690:	f04f 0c0a 	mov.w	ip, #10
		valor = valor*-1;
 8003694:	bfb8      	it	lt
 8003696:	4252      	neglt	r2, r2
		digitos[n] = valor%10;	//pega o resto da divisao por 10
 8003698:	fb92 f6fc 	sdiv	r6, r2, ip
 800369c:	fb0c 2216 	mls	r2, ip, r6, r2
		valor /=10;						//pega o inteiro da divis�o por 10
		n++;
 80036a0:	1c41      	adds	r1, r0, #1
		digitos[n] = valor%10;	//pega o resto da divisao por 10
 80036a2:	542a      	strb	r2, [r5, r0]

	}while (valor!=0);
 80036a4:	4632      	mov	r2, r6
 80036a6:	bb96      	cbnz	r6, 800370e <_Z14escreve_Nr_Peqmmlm+0xa2>

	if(neg!=0)
 80036a8:	b12c      	cbz	r4, 80036b6 <_Z14escreve_Nr_Peqmmlm+0x4a>
	{
		digitos[n] = '-';	// sinal de menos
 80036aa:	aa06      	add	r2, sp, #24
 80036ac:	4411      	add	r1, r2
 80036ae:	222d      	movs	r2, #45	; 0x2d
 80036b0:	f801 2c0c 	strb.w	r2, [r1, #-12]
		n++;
 80036b4:	1c81      	adds	r1, r0, #2

	}

	if(quant2Print != 0)
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf08      	it	eq
 80036ba:	460b      	moveq	r3, r1
			for(j=0; j<5; j++)	// altura
			{
				if(digitos[n-1] == '-')
					desenha_pixel((x+i) + (4*px) , y + j,  tst_bit(nr_peq[i + 40], j));
				else if(digitos[n-1] != ' ')
					desenha_pixel((x+i) + (4*px) , y + j,  tst_bit(nr_peq[i + (4*digitos[n-1])], j));
 80036bc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003724 <_Z14escreve_Nr_Peqmmlm+0xb8>
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80036c6:	4415      	add	r5, r2
 80036c8:	9301      	str	r3, [sp, #4]
		for(i=0; i<4; i++)		// largura
 80036ca:	2600      	movs	r6, #0
			for(j=0; j<5; j++)	// altura
 80036cc:	2400      	movs	r4, #0
 80036ce:	eb07 0806 	add.w	r8, r7, r6
					desenha_pixel((x+i) + (4*px) , y + j,  tst_bit(nr_peq[i + 40], j));
 80036d2:	eb0a 0b06 	add.w	fp, sl, r6
				if(digitos[n-1] == '-')
 80036d6:	782a      	ldrb	r2, [r5, #0]
 80036d8:	eb09 0104 	add.w	r1, r9, r4
 80036dc:	2a2d      	cmp	r2, #45	; 0x2d
 80036de:	d118      	bne.n	8003712 <_Z14escreve_Nr_Peqmmlm+0xa6>
					desenha_pixel((x+i) + (4*px) , y + j,  tst_bit(nr_peq[i + 40], j));
 80036e0:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
					desenha_pixel((x+i) + (4*px) , y + j,  tst_bit(nr_peq[i + (4*digitos[n-1])], j));
 80036e4:	2201      	movs	r2, #1
 80036e6:	40a2      	lsls	r2, r4
 80036e8:	4002      	ands	r2, r0
				else
					desenha_pixel((x+i) + (4*px) , y + j,  0);
 80036ea:	4640      	mov	r0, r8
			for(j=0; j<5; j++)	// altura
 80036ec:	3401      	adds	r4, #1
					desenha_pixel((x+i) + (4*px) , y + j,  0);
 80036ee:	f7ff fe23 	bl	8003338 <_Z13desenha_pixelmmm>
			for(j=0; j<5; j++)	// altura
 80036f2:	2c05      	cmp	r4, #5
 80036f4:	d1ef      	bne.n	80036d6 <_Z14escreve_Nr_Peqmmlm+0x6a>
		for(i=0; i<4; i++)		// largura
 80036f6:	3601      	adds	r6, #1
 80036f8:	2e04      	cmp	r6, #4
 80036fa:	d1e7      	bne.n	80036cc <_Z14escreve_Nr_Peqmmlm+0x60>
			}
		}
		px++;
		n--;
	} while (n!=0);
 80036fc:	9b01      	ldr	r3, [sp, #4]
 80036fe:	3704      	adds	r7, #4
 8003700:	429f      	cmp	r7, r3
 8003702:	f105 35ff 	add.w	r5, r5, #4294967295
 8003706:	d1e0      	bne.n	80036ca <_Z14escreve_Nr_Peqmmlm+0x5e>
}
 8003708:	b007      	add	sp, #28
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n++;
 800370e:	4608      	mov	r0, r1
 8003710:	e7c2      	b.n	8003698 <_Z14escreve_Nr_Peqmmlm+0x2c>
				else if(digitos[n-1] != ' ')
 8003712:	2a20      	cmp	r2, #32
 8003714:	d003      	beq.n	800371e <_Z14escreve_Nr_Peqmmlm+0xb2>
					desenha_pixel((x+i) + (4*px) , y + j,  tst_bit(nr_peq[i + (4*digitos[n-1])], j));
 8003716:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800371a:	5d90      	ldrb	r0, [r2, r6]
 800371c:	e7e2      	b.n	80036e4 <_Z14escreve_Nr_Peqmmlm+0x78>
					desenha_pixel((x+i) + (4*px) , y + j,  0);
 800371e:	2200      	movs	r2, #0
 8003720:	e7e3      	b.n	80036ea <_Z14escreve_Nr_Peqmmlm+0x7e>
 8003722:	bf00      	nop
 8003724:	080073a7 	.word	0x080073a7

08003728 <_Z10print_foodmm>:


void print_food (uint32_t x0, uint32_t y0)	// min x0 =  3; min y0 =  3
											// max x0 = 80; max y0 = 44
{
	desenha_circulo(x0+2,y0+2,2,1);
 8003728:	2202      	movs	r2, #2
 800372a:	2301      	movs	r3, #1
 800372c:	4411      	add	r1, r2
 800372e:	4410      	add	r0, r2
 8003730:	f7ff be9a 	b.w	8003468 <_Z15desenha_circulolllm>

08003734 <_Z8print_AImm>:

// @param x e y => coordenadas do primeiro ponto (superior esquerdo)
void print_AI (uint32_t x, uint32_t y)
										// min x = 1; min y = 1
										// max x = 78; max y = 42
{
 8003734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct pontos_t ai;
	ai.x1 = x;
	ai.y1 = y;
 8003736:	e9cd 0100 	strd	r0, r1, [sp]
	ai.x2 = x + 4;
 800373a:	3004      	adds	r0, #4
	ai.y2 = y + 4;
 800373c:	3104      	adds	r1, #4
	ai.x2 = x + 4;
 800373e:	9002      	str	r0, [sp, #8]
	ai.y2 = y + 4;
 8003740:	9103      	str	r1, [sp, #12]

	desenha_retangulo(&ai,3);
 8003742:	4668      	mov	r0, sp
 8003744:	2103      	movs	r1, #3
 8003746:	f7ff ff36 	bl	80035b6 <_Z17desenha_retanguloP8pontos_tm>
}
 800374a:	b007      	add	sp, #28
 800374c:	f85d fb04 	ldr.w	pc, [sp], #4

08003750 <_Z13print_monstermm>:

void print_monster(uint32_t x, uint32_t y)
{
 8003750:	b500      	push	{lr}
 8003752:	b08d      	sub	sp, #52	; 0x34
	struct pontos_t monsterUP;
	struct pontos_t monsterDOWN;
		monsterUP.x1 = x;
		monsterUP.y1 = y;
 8003754:	e9cd 0100 	strd	r0, r1, [sp]
		monsterUP.x2 = monsterUP.x1 + 2;
 8003758:	1c83      	adds	r3, r0, #2
		monsterUP.y2 = monsterUP.y1 - 4;
		monsterUP.x3 = monsterUP.x1 + 4;
 800375a:	3004      	adds	r0, #4
		monsterUP.y3 = monsterUP.y1;
 800375c:	e9cd 0104 	strd	r0, r1, [sp, #16]
		monsterUP.x2 = monsterUP.x1 + 2;
 8003760:	9302      	str	r3, [sp, #8]
		desenha_triangulo(&monsterUP,1);
 8003762:	4668      	mov	r0, sp
		monsterUP.y2 = monsterUP.y1 - 4;
 8003764:	1f0b      	subs	r3, r1, #4
		desenha_triangulo(&monsterUP,1);
 8003766:	2101      	movs	r1, #1
		monsterUP.y2 = monsterUP.y1 - 4;
 8003768:	9303      	str	r3, [sp, #12]
		desenha_triangulo(&monsterUP,1);
 800376a:	f7ff ff5e 	bl	800362a <_Z17desenha_trianguloP8pontos_tm>

		monsterDOWN.x1 = monsterUP.x1;
		monsterDOWN.y1 = monsterUP.y2 - 1;
		monsterDOWN.x2 = monsterUP.x2;
 800376e:	9902      	ldr	r1, [sp, #8]
		monsterDOWN.x1 = monsterUP.x1;
 8003770:	9a00      	ldr	r2, [sp, #0]
		monsterDOWN.x2 = monsterUP.x2;
 8003772:	9108      	str	r1, [sp, #32]
		monsterDOWN.y2 = monsterUP.y1 + 1;
 8003774:	9901      	ldr	r1, [sp, #4]
		monsterDOWN.y1 = monsterUP.y2 - 1;
 8003776:	9b03      	ldr	r3, [sp, #12]
		monsterDOWN.y2 = monsterUP.y1 + 1;
 8003778:	3101      	adds	r1, #1
		monsterDOWN.y1 = monsterUP.y2 - 1;
 800377a:	3b01      	subs	r3, #1
		monsterDOWN.x1 = monsterUP.x1;
 800377c:	9206      	str	r2, [sp, #24]
		monsterDOWN.y2 = monsterUP.y1 + 1;
 800377e:	9109      	str	r1, [sp, #36]	; 0x24
		monsterDOWN.x3 = monsterDOWN.x1 + 4;
 8003780:	3204      	adds	r2, #4
		monsterDOWN.y3 = monsterDOWN.y1;
		desenha_triangulo(&monsterDOWN,1);
 8003782:	2101      	movs	r1, #1
 8003784:	a806      	add	r0, sp, #24
		monsterDOWN.y1 = monsterUP.y2 - 1;
 8003786:	9307      	str	r3, [sp, #28]
		monsterDOWN.y3 = monsterDOWN.y1;
 8003788:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		desenha_triangulo(&monsterDOWN,1);
 800378c:	f7ff ff4d 	bl	800362a <_Z17desenha_trianguloP8pontos_tm>

}
 8003790:	b00d      	add	sp, #52	; 0x34
 8003792:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003798 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_MspInit+0x84>)
{
 800379a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800379c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	619a      	str	r2, [r3, #24]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	f7fd fd08 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	f06f 000b 	mvn.w	r0, #11
 80037ba:	4611      	mov	r1, r2
 80037bc:	f7fd fd14 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	f06f 000a 	mvn.w	r0, #10
 80037c6:	4611      	mov	r1, r2
 80037c8:	f7fd fd0e 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	f06f 0009 	mvn.w	r0, #9
 80037d2:	4611      	mov	r1, r2
 80037d4:	f7fd fd08 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	f06f 0004 	mvn.w	r0, #4
 80037de:	4611      	mov	r1, r2
 80037e0:	f7fd fd02 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	f06f 0003 	mvn.w	r0, #3
 80037ea:	4611      	mov	r1, r2
 80037ec:	f7fd fcfc 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	210f      	movs	r1, #15
 80037f4:	f06f 0001 	mvn.w	r0, #1
 80037f8:	f7fd fcf6 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	210f      	movs	r1, #15
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f7fd fcf0 	bl	80011e8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003808:	4a05      	ldr	r2, [pc, #20]	; (8003820 <HAL_MspInit+0x88>)
 800380a:	6853      	ldr	r3, [r2, #4]
 800380c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003816:	b003      	add	sp, #12
 8003818:	f85d fb04 	ldr.w	pc, [sp], #4
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000

08003824 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003824:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003826:	6802      	ldr	r2, [r0, #0]
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_ADC_MspInit+0x80>)
{
 800382a:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 800382c:	429a      	cmp	r2, r3
{
 800382e:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8003830:	d135      	bne.n	800389e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003832:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003836:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800383a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383e:	619a      	str	r2, [r3, #24]
 8003840:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003842:	2206      	movs	r2, #6
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800384c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384e:	4816      	ldr	r0, [pc, #88]	; (80038a8 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003850:	e9cd 2302 	strd	r2, r3, [sp, #8]
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003854:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003856:	f7fd fe2f 	bl	80014b8 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800385a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Instance = DMA1_Channel1;
 800385e:	4c13      	ldr	r4, [pc, #76]	; (80038ac <HAL_ADC_MspInit+0x88>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003860:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003864:	e9c4 6203 	strd	r6, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003868:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386a:	2300      	movs	r3, #0
 800386c:	4910      	ldr	r1, [pc, #64]	; (80038b0 <HAL_ADC_MspInit+0x8c>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800386e:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003872:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003874:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003878:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800387a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800387c:	f7fd fd16 	bl	80012ac <HAL_DMA_Init>
 8003880:	b118      	cbz	r0, 800388a <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003882:	4631      	mov	r1, r6
 8003884:	480b      	ldr	r0, [pc, #44]	; (80038b4 <HAL_ADC_MspInit+0x90>)
 8003886:	f7ff fc5f 	bl	8003148 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800388a:	622c      	str	r4, [r5, #32]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800388c:	2012      	movs	r0, #18
 800388e:	2200      	movs	r2, #0
 8003890:	2105      	movs	r1, #5
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003892:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8003894:	f7fd fca8 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003898:	2012      	movs	r0, #18
 800389a:	f7fd fcd9 	bl	8001250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800389e:	b006      	add	sp, #24
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	bf00      	nop
 80038a4:	40012400 	.word	0x40012400
 80038a8:	40010800 	.word	0x40010800
 80038ac:	2000354c 	.word	0x2000354c
 80038b0:	40020008 	.word	0x40020008
 80038b4:	080073d3 	.word	0x080073d3

080038b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80038ba:	4601      	mov	r1, r0
{
 80038bc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80038be:	2200      	movs	r2, #0
 80038c0:	201e      	movs	r0, #30
 80038c2:	f7fd fc91 	bl	80011e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80038c6:	201e      	movs	r0, #30
 80038c8:	f7fd fcc2 	bl	8001250 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038ce:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 80038d0:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038d2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 80038d4:	f042 0204 	orr.w	r2, r2, #4
 80038d8:	61da      	str	r2, [r3, #28]
 80038da:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80038dc:	4c11      	ldr	r4, [pc, #68]	; (8003924 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	9302      	str	r3, [sp, #8]
 80038e4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038e6:	f7fe f951 	bl	8001b8c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038ea:	f7fe f93f 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038f0:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 80038f2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80038f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80038f8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_InitTick+0x74>)
 80038fc:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8003900:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003902:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8003904:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003906:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8003908:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800390c:	f7fe fabe 	bl	8001e8c <HAL_TIM_Base_Init>
 8003910:	b920      	cbnz	r0, 800391c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003912:	4620      	mov	r0, r4
 8003914:	f7fe f9d1 	bl	8001cba <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003918:	b008      	add	sp, #32
 800391a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800391c:	2001      	movs	r0, #1
 800391e:	e7fb      	b.n	8003918 <HAL_InitTick+0x60>
 8003920:	40021000 	.word	0x40021000
 8003924:	200037a4 	.word	0x200037a4
 8003928:	40000800 	.word	0x40000800
 800392c:	000f4240 	.word	0x000f4240

08003930 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003930:	4770      	bx	lr

08003932 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003932:	e7fe      	b.n	8003932 <HardFault_Handler>

08003934 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003934:	e7fe      	b.n	8003934 <MemManage_Handler>

08003936 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003936:	e7fe      	b.n	8003936 <BusFault_Handler>

08003938 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003938:	e7fe      	b.n	8003938 <UsageFault_Handler>

0800393a <DebugMon_Handler>:
 800393a:	4770      	bx	lr

0800393c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800393c:	f7fe bac2 	b.w	8001ec4 <osSystickHandler>

08003940 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <DMA1_Channel1_IRQHandler+0x8>)
 8003942:	f7fd bd25 	b.w	8001390 <HAL_DMA_IRQHandler>
 8003946:	bf00      	nop
 8003948:	2000354c 	.word	0x2000354c

0800394c <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <ADC1_2_IRQHandler+0x8>)
 800394e:	f7fd b967 	b.w	8000c20 <HAL_ADC_IRQHandler>
 8003952:	bf00      	nop
 8003954:	2000351c 	.word	0x2000351c

08003958 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <TIM4_IRQHandler+0x8>)
 800395a:	f7fe b9bd 	b.w	8001cd8 <HAL_TIM_IRQHandler>
 800395e:	bf00      	nop
 8003960:	200037a4 	.word	0x200037a4

08003964 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <SystemInit+0x40>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <SystemInit+0x44>)
 8003972:	400a      	ands	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800397c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003980:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003988:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003990:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003992:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003996:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003998:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <SystemInit+0x48>)
 800399e:	609a      	str	r2, [r3, #8]
#endif 
}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	f8ff0000 	.word	0xf8ff0000
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039b2:	e003      	b.n	80039bc <LoopCopyDataInit>

080039b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80039b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80039b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80039ba:	3104      	adds	r1, #4

080039bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80039bc:	480a      	ldr	r0, [pc, #40]	; (80039e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80039c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80039c4:	d3f6      	bcc.n	80039b4 <CopyDataInit>
  ldr r2, =_sbss
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80039c8:	e002      	b.n	80039d0 <LoopFillZerobss>

080039ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80039cc:	f842 3b04 	str.w	r3, [r2], #4

080039d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80039d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80039d4:	d3f9      	bcc.n	80039ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039d6:	f7ff ffc5 	bl	8003964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039da:	f000 f83f 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039de:	f7ff fab5 	bl	8002f4c <main>
  bx lr
 80039e2:	4770      	bx	lr
  ldr r3, =_sidata
 80039e4:	080074e8 	.word	0x080074e8
  ldr r0, =_sdata
 80039e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80039ec:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80039f0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80039f4:	200037e8 	.word	0x200037e8

080039f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039f8:	e7fe      	b.n	80039f8 <CAN1_RX1_IRQHandler>
	...

080039fc <__assert_func>:
 80039fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039fe:	461c      	mov	r4, r3
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <__assert_func+0x2c>)
 8003a02:	4605      	mov	r5, r0
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68d8      	ldr	r0, [r3, #12]
 8003a08:	b152      	cbz	r2, 8003a20 <__assert_func+0x24>
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <__assert_func+0x30>)
 8003a0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a10:	9100      	str	r1, [sp, #0]
 8003a12:	462b      	mov	r3, r5
 8003a14:	4622      	mov	r2, r4
 8003a16:	4906      	ldr	r1, [pc, #24]	; (8003a30 <__assert_func+0x34>)
 8003a18:	f000 f80e 	bl	8003a38 <fiprintf>
 8003a1c:	f000 fbda 	bl	80041d4 <abort>
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <__assert_func+0x38>)
 8003a22:	461a      	mov	r2, r3
 8003a24:	e7f2      	b.n	8003a0c <__assert_func+0x10>
 8003a26:	bf00      	nop
 8003a28:	2000000c 	.word	0x2000000c
 8003a2c:	08007406 	.word	0x08007406
 8003a30:	08007413 	.word	0x08007413
 8003a34:	08007441 	.word	0x08007441

08003a38 <fiprintf>:
 8003a38:	b40e      	push	{r1, r2, r3}
 8003a3a:	b503      	push	{r0, r1, lr}
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	ab03      	add	r3, sp, #12
 8003a40:	4805      	ldr	r0, [pc, #20]	; (8003a58 <fiprintf+0x20>)
 8003a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a46:	6800      	ldr	r0, [r0, #0]
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	f000 f865 	bl	8003b18 <_vfiprintf_r>
 8003a4e:	b002      	add	sp, #8
 8003a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a54:	b003      	add	sp, #12
 8003a56:	4770      	bx	lr
 8003a58:	2000000c 	.word	0x2000000c

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	2500      	movs	r5, #0
 8003a60:	4e0c      	ldr	r6, [pc, #48]	; (8003a94 <__libc_init_array+0x38>)
 8003a62:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a64:	1ba4      	subs	r4, r4, r6
 8003a66:	10a4      	asrs	r4, r4, #2
 8003a68:	42a5      	cmp	r5, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	f000 ff9e 	bl	80049ac <_init>
 8003a70:	2500      	movs	r5, #0
 8003a72:	4e0a      	ldr	r6, [pc, #40]	; (8003a9c <__libc_init_array+0x40>)
 8003a74:	4c0a      	ldr	r4, [pc, #40]	; (8003aa0 <__libc_init_array+0x44>)
 8003a76:	1ba4      	subs	r4, r4, r6
 8003a78:	10a4      	asrs	r4, r4, #2
 8003a7a:	42a5      	cmp	r5, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a84:	4798      	blx	r3
 8003a86:	3501      	adds	r5, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a8e:	4798      	blx	r3
 8003a90:	3501      	adds	r5, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	080074dc 	.word	0x080074dc
 8003a98:	080074dc 	.word	0x080074dc
 8003a9c:	080074dc 	.word	0x080074dc
 8003aa0:	080074e4 	.word	0x080074e4

08003aa4 <memcpy>:
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	1e43      	subs	r3, r0, #1
 8003aa8:	440a      	add	r2, r1
 8003aaa:	4291      	cmp	r1, r2
 8003aac:	d100      	bne.n	8003ab0 <memcpy+0xc>
 8003aae:	bd10      	pop	{r4, pc}
 8003ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ab8:	e7f7      	b.n	8003aaa <memcpy+0x6>

08003aba <memset>:
 8003aba:	4603      	mov	r3, r0
 8003abc:	4402      	add	r2, r0
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d100      	bne.n	8003ac4 <memset+0xa>
 8003ac2:	4770      	bx	lr
 8003ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac8:	e7f9      	b.n	8003abe <memset+0x4>

08003aca <__sfputc_r>:
 8003aca:	6893      	ldr	r3, [r2, #8]
 8003acc:	b410      	push	{r4}
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	6093      	str	r3, [r2, #8]
 8003ad4:	da07      	bge.n	8003ae6 <__sfputc_r+0x1c>
 8003ad6:	6994      	ldr	r4, [r2, #24]
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	db01      	blt.n	8003ae0 <__sfputc_r+0x16>
 8003adc:	290a      	cmp	r1, #10
 8003ade:	d102      	bne.n	8003ae6 <__sfputc_r+0x1c>
 8003ae0:	bc10      	pop	{r4}
 8003ae2:	f000 bab7 	b.w	8004054 <__swbuf_r>
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	1c58      	adds	r0, r3, #1
 8003aea:	6010      	str	r0, [r2, #0]
 8003aec:	7019      	strb	r1, [r3, #0]
 8003aee:	4608      	mov	r0, r1
 8003af0:	bc10      	pop	{r4}
 8003af2:	4770      	bx	lr

08003af4 <__sfputs_r>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	4606      	mov	r6, r0
 8003af8:	460f      	mov	r7, r1
 8003afa:	4614      	mov	r4, r2
 8003afc:	18d5      	adds	r5, r2, r3
 8003afe:	42ac      	cmp	r4, r5
 8003b00:	d101      	bne.n	8003b06 <__sfputs_r+0x12>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e007      	b.n	8003b16 <__sfputs_r+0x22>
 8003b06:	463a      	mov	r2, r7
 8003b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f7ff ffdc 	bl	8003aca <__sfputc_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d1f3      	bne.n	8003afe <__sfputs_r+0xa>
 8003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b18 <_vfiprintf_r>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	b09d      	sub	sp, #116	; 0x74
 8003b20:	4617      	mov	r7, r2
 8003b22:	461d      	mov	r5, r3
 8003b24:	4606      	mov	r6, r0
 8003b26:	b118      	cbz	r0, 8003b30 <_vfiprintf_r+0x18>
 8003b28:	6983      	ldr	r3, [r0, #24]
 8003b2a:	b90b      	cbnz	r3, 8003b30 <_vfiprintf_r+0x18>
 8003b2c:	f000 fc4a 	bl	80043c4 <__sinit>
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <_vfiprintf_r+0x20c>)
 8003b32:	429c      	cmp	r4, r3
 8003b34:	d158      	bne.n	8003be8 <_vfiprintf_r+0xd0>
 8003b36:	6874      	ldr	r4, [r6, #4]
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	0718      	lsls	r0, r3, #28
 8003b3c:	d55e      	bpl.n	8003bfc <_vfiprintf_r+0xe4>
 8003b3e:	6923      	ldr	r3, [r4, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d05b      	beq.n	8003bfc <_vfiprintf_r+0xe4>
 8003b44:	2300      	movs	r3, #0
 8003b46:	9309      	str	r3, [sp, #36]	; 0x24
 8003b48:	2320      	movs	r3, #32
 8003b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b4e:	2330      	movs	r3, #48	; 0x30
 8003b50:	f04f 0b01 	mov.w	fp, #1
 8003b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b58:	9503      	str	r5, [sp, #12]
 8003b5a:	46b8      	mov	r8, r7
 8003b5c:	4645      	mov	r5, r8
 8003b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b62:	b10b      	cbz	r3, 8003b68 <_vfiprintf_r+0x50>
 8003b64:	2b25      	cmp	r3, #37	; 0x25
 8003b66:	d154      	bne.n	8003c12 <_vfiprintf_r+0xfa>
 8003b68:	ebb8 0a07 	subs.w	sl, r8, r7
 8003b6c:	d00b      	beq.n	8003b86 <_vfiprintf_r+0x6e>
 8003b6e:	4653      	mov	r3, sl
 8003b70:	463a      	mov	r2, r7
 8003b72:	4621      	mov	r1, r4
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7ff ffbd 	bl	8003af4 <__sfputs_r>
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	f000 80c2 	beq.w	8003d04 <_vfiprintf_r+0x1ec>
 8003b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b82:	4453      	add	r3, sl
 8003b84:	9309      	str	r3, [sp, #36]	; 0x24
 8003b86:	f898 3000 	ldrb.w	r3, [r8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80ba 	beq.w	8003d04 <_vfiprintf_r+0x1ec>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f04f 32ff 	mov.w	r2, #4294967295
 8003b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b9a:	9304      	str	r3, [sp, #16]
 8003b9c:	9307      	str	r3, [sp, #28]
 8003b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba4:	46a8      	mov	r8, r5
 8003ba6:	2205      	movs	r2, #5
 8003ba8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003bac:	485e      	ldr	r0, [pc, #376]	; (8003d28 <_vfiprintf_r+0x210>)
 8003bae:	f000 fcf7 	bl	80045a0 <memchr>
 8003bb2:	9b04      	ldr	r3, [sp, #16]
 8003bb4:	bb78      	cbnz	r0, 8003c16 <_vfiprintf_r+0xfe>
 8003bb6:	06d9      	lsls	r1, r3, #27
 8003bb8:	bf44      	itt	mi
 8003bba:	2220      	movmi	r2, #32
 8003bbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bc0:	071a      	lsls	r2, r3, #28
 8003bc2:	bf44      	itt	mi
 8003bc4:	222b      	movmi	r2, #43	; 0x2b
 8003bc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bca:	782a      	ldrb	r2, [r5, #0]
 8003bcc:	2a2a      	cmp	r2, #42	; 0x2a
 8003bce:	d02a      	beq.n	8003c26 <_vfiprintf_r+0x10e>
 8003bd0:	46a8      	mov	r8, r5
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	250a      	movs	r5, #10
 8003bd6:	9a07      	ldr	r2, [sp, #28]
 8003bd8:	4641      	mov	r1, r8
 8003bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bde:	3b30      	subs	r3, #48	; 0x30
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d969      	bls.n	8003cb8 <_vfiprintf_r+0x1a0>
 8003be4:	b360      	cbz	r0, 8003c40 <_vfiprintf_r+0x128>
 8003be6:	e024      	b.n	8003c32 <_vfiprintf_r+0x11a>
 8003be8:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <_vfiprintf_r+0x214>)
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d101      	bne.n	8003bf2 <_vfiprintf_r+0xda>
 8003bee:	68b4      	ldr	r4, [r6, #8]
 8003bf0:	e7a2      	b.n	8003b38 <_vfiprintf_r+0x20>
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <_vfiprintf_r+0x218>)
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	bf08      	it	eq
 8003bf8:	68f4      	ldreq	r4, [r6, #12]
 8003bfa:	e79d      	b.n	8003b38 <_vfiprintf_r+0x20>
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f000 fa7a 	bl	80040f8 <__swsetup_r>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d09d      	beq.n	8003b44 <_vfiprintf_r+0x2c>
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	b01d      	add	sp, #116	; 0x74
 8003c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c12:	46a8      	mov	r8, r5
 8003c14:	e7a2      	b.n	8003b5c <_vfiprintf_r+0x44>
 8003c16:	4a44      	ldr	r2, [pc, #272]	; (8003d28 <_vfiprintf_r+0x210>)
 8003c18:	4645      	mov	r5, r8
 8003c1a:	1a80      	subs	r0, r0, r2
 8003c1c:	fa0b f000 	lsl.w	r0, fp, r0
 8003c20:	4318      	orrs	r0, r3
 8003c22:	9004      	str	r0, [sp, #16]
 8003c24:	e7be      	b.n	8003ba4 <_vfiprintf_r+0x8c>
 8003c26:	9a03      	ldr	r2, [sp, #12]
 8003c28:	1d11      	adds	r1, r2, #4
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	9103      	str	r1, [sp, #12]
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	db01      	blt.n	8003c36 <_vfiprintf_r+0x11e>
 8003c32:	9207      	str	r2, [sp, #28]
 8003c34:	e004      	b.n	8003c40 <_vfiprintf_r+0x128>
 8003c36:	4252      	negs	r2, r2
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	9207      	str	r2, [sp, #28]
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	f898 3000 	ldrb.w	r3, [r8]
 8003c44:	2b2e      	cmp	r3, #46	; 0x2e
 8003c46:	d10e      	bne.n	8003c66 <_vfiprintf_r+0x14e>
 8003c48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4e:	d138      	bne.n	8003cc2 <_vfiprintf_r+0x1aa>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	f108 0802 	add.w	r8, r8, #2
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	9203      	str	r2, [sp, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bfb8      	it	lt
 8003c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c64:	9305      	str	r3, [sp, #20]
 8003c66:	4d33      	ldr	r5, [pc, #204]	; (8003d34 <_vfiprintf_r+0x21c>)
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f898 1000 	ldrb.w	r1, [r8]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 fc96 	bl	80045a0 <memchr>
 8003c74:	b140      	cbz	r0, 8003c88 <_vfiprintf_r+0x170>
 8003c76:	2340      	movs	r3, #64	; 0x40
 8003c78:	1b40      	subs	r0, r0, r5
 8003c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c7e:	9b04      	ldr	r3, [sp, #16]
 8003c80:	f108 0801 	add.w	r8, r8, #1
 8003c84:	4303      	orrs	r3, r0
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	f898 1000 	ldrb.w	r1, [r8]
 8003c8c:	2206      	movs	r2, #6
 8003c8e:	482a      	ldr	r0, [pc, #168]	; (8003d38 <_vfiprintf_r+0x220>)
 8003c90:	f108 0701 	add.w	r7, r8, #1
 8003c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c98:	f000 fc82 	bl	80045a0 <memchr>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d037      	beq.n	8003d10 <_vfiprintf_r+0x1f8>
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <_vfiprintf_r+0x224>)
 8003ca2:	bb1b      	cbnz	r3, 8003cec <_vfiprintf_r+0x1d4>
 8003ca4:	9b03      	ldr	r3, [sp, #12]
 8003ca6:	3307      	adds	r3, #7
 8003ca8:	f023 0307 	bic.w	r3, r3, #7
 8003cac:	3308      	adds	r3, #8
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb2:	444b      	add	r3, r9
 8003cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb6:	e750      	b.n	8003b5a <_vfiprintf_r+0x42>
 8003cb8:	fb05 3202 	mla	r2, r5, r2, r3
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	4688      	mov	r8, r1
 8003cc0:	e78a      	b.n	8003bd8 <_vfiprintf_r+0xc0>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	250a      	movs	r5, #10
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f108 0801 	add.w	r8, r8, #1
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	4640      	mov	r0, r8
 8003cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd4:	3a30      	subs	r2, #48	; 0x30
 8003cd6:	2a09      	cmp	r2, #9
 8003cd8:	d903      	bls.n	8003ce2 <_vfiprintf_r+0x1ca>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0c3      	beq.n	8003c66 <_vfiprintf_r+0x14e>
 8003cde:	9105      	str	r1, [sp, #20]
 8003ce0:	e7c1      	b.n	8003c66 <_vfiprintf_r+0x14e>
 8003ce2:	fb05 2101 	mla	r1, r5, r1, r2
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4680      	mov	r8, r0
 8003cea:	e7f0      	b.n	8003cce <_vfiprintf_r+0x1b6>
 8003cec:	ab03      	add	r3, sp, #12
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <_vfiprintf_r+0x228>)
 8003cf4:	a904      	add	r1, sp, #16
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f3af 8000 	nop.w
 8003cfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d00:	4681      	mov	r9, r0
 8003d02:	d1d5      	bne.n	8003cb0 <_vfiprintf_r+0x198>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	065b      	lsls	r3, r3, #25
 8003d08:	f53f af7e 	bmi.w	8003c08 <_vfiprintf_r+0xf0>
 8003d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d0e:	e77d      	b.n	8003c0c <_vfiprintf_r+0xf4>
 8003d10:	ab03      	add	r3, sp, #12
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	4622      	mov	r2, r4
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <_vfiprintf_r+0x228>)
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f888 	bl	8003e30 <_printf_i>
 8003d20:	e7ec      	b.n	8003cfc <_vfiprintf_r+0x1e4>
 8003d22:	bf00      	nop
 8003d24:	0800749c 	.word	0x0800749c
 8003d28:	08007448 	.word	0x08007448
 8003d2c:	080074bc 	.word	0x080074bc
 8003d30:	0800747c 	.word	0x0800747c
 8003d34:	0800744e 	.word	0x0800744e
 8003d38:	08007452 	.word	0x08007452
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	08003af5 	.word	0x08003af5

08003d44 <_printf_common>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	4691      	mov	r9, r2
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	688a      	ldr	r2, [r1, #8]
 8003d4e:	690b      	ldr	r3, [r1, #16]
 8003d50:	4606      	mov	r6, r0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bfb8      	it	lt
 8003d56:	4613      	movlt	r3, r2
 8003d58:	f8c9 3000 	str.w	r3, [r9]
 8003d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d60:	460c      	mov	r4, r1
 8003d62:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d66:	b112      	cbz	r2, 8003d6e <_printf_common+0x2a>
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f8c9 3000 	str.w	r3, [r9]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	0699      	lsls	r1, r3, #26
 8003d72:	bf42      	ittt	mi
 8003d74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d78:	3302      	addmi	r3, #2
 8003d7a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	f015 0506 	ands.w	r5, r5, #6
 8003d84:	d107      	bne.n	8003d96 <_printf_common+0x52>
 8003d86:	f104 0a19 	add.w	sl, r4, #25
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	42ab      	cmp	r3, r5
 8003d94:	dc29      	bgt.n	8003dea <_printf_common+0xa6>
 8003d96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	3300      	adds	r3, #0
 8003d9e:	bf18      	it	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	0692      	lsls	r2, r2, #26
 8003da4:	d42e      	bmi.n	8003e04 <_printf_common+0xc0>
 8003da6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003daa:	4639      	mov	r1, r7
 8003dac:	4630      	mov	r0, r6
 8003dae:	47c0      	blx	r8
 8003db0:	3001      	adds	r0, #1
 8003db2:	d021      	beq.n	8003df8 <_printf_common+0xb4>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	68e5      	ldr	r5, [r4, #12]
 8003db8:	f003 0306 	and.w	r3, r3, #6
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	bf18      	it	ne
 8003dc0:	2500      	movne	r5, #0
 8003dc2:	f8d9 2000 	ldr.w	r2, [r9]
 8003dc6:	f04f 0900 	mov.w	r9, #0
 8003dca:	bf08      	it	eq
 8003dcc:	1aad      	subeq	r5, r5, r2
 8003dce:	68a3      	ldr	r3, [r4, #8]
 8003dd0:	6922      	ldr	r2, [r4, #16]
 8003dd2:	bf08      	it	eq
 8003dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bfc4      	itt	gt
 8003ddc:	1a9b      	subgt	r3, r3, r2
 8003dde:	18ed      	addgt	r5, r5, r3
 8003de0:	341a      	adds	r4, #26
 8003de2:	454d      	cmp	r5, r9
 8003de4:	d11a      	bne.n	8003e1c <_printf_common+0xd8>
 8003de6:	2000      	movs	r0, #0
 8003de8:	e008      	b.n	8003dfc <_printf_common+0xb8>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4652      	mov	r2, sl
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	3001      	adds	r0, #1
 8003df6:	d103      	bne.n	8003e00 <_printf_common+0xbc>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e00:	3501      	adds	r5, #1
 8003e02:	e7c2      	b.n	8003d8a <_printf_common+0x46>
 8003e04:	2030      	movs	r0, #48	; 0x30
 8003e06:	18e1      	adds	r1, r4, r3
 8003e08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e12:	4422      	add	r2, r4
 8003e14:	3302      	adds	r3, #2
 8003e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e1a:	e7c4      	b.n	8003da6 <_printf_common+0x62>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4639      	mov	r1, r7
 8003e22:	4630      	mov	r0, r6
 8003e24:	47c0      	blx	r8
 8003e26:	3001      	adds	r0, #1
 8003e28:	d0e6      	beq.n	8003df8 <_printf_common+0xb4>
 8003e2a:	f109 0901 	add.w	r9, r9, #1
 8003e2e:	e7d8      	b.n	8003de2 <_printf_common+0x9e>

08003e30 <_printf_i>:
 8003e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e38:	460c      	mov	r4, r1
 8003e3a:	7e09      	ldrb	r1, [r1, #24]
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	296e      	cmp	r1, #110	; 0x6e
 8003e40:	4617      	mov	r7, r2
 8003e42:	4606      	mov	r6, r0
 8003e44:	4698      	mov	r8, r3
 8003e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e48:	f000 80b3 	beq.w	8003fb2 <_printf_i+0x182>
 8003e4c:	d822      	bhi.n	8003e94 <_printf_i+0x64>
 8003e4e:	2963      	cmp	r1, #99	; 0x63
 8003e50:	d036      	beq.n	8003ec0 <_printf_i+0x90>
 8003e52:	d80a      	bhi.n	8003e6a <_printf_i+0x3a>
 8003e54:	2900      	cmp	r1, #0
 8003e56:	f000 80b9 	beq.w	8003fcc <_printf_i+0x19c>
 8003e5a:	2958      	cmp	r1, #88	; 0x58
 8003e5c:	f000 8083 	beq.w	8003f66 <_printf_i+0x136>
 8003e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e68:	e032      	b.n	8003ed0 <_printf_i+0xa0>
 8003e6a:	2964      	cmp	r1, #100	; 0x64
 8003e6c:	d001      	beq.n	8003e72 <_printf_i+0x42>
 8003e6e:	2969      	cmp	r1, #105	; 0x69
 8003e70:	d1f6      	bne.n	8003e60 <_printf_i+0x30>
 8003e72:	6820      	ldr	r0, [r4, #0]
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	0605      	lsls	r5, r0, #24
 8003e78:	f103 0104 	add.w	r1, r3, #4
 8003e7c:	d52a      	bpl.n	8003ed4 <_printf_i+0xa4>
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da03      	bge.n	8003e8e <_printf_i+0x5e>
 8003e86:	222d      	movs	r2, #45	; 0x2d
 8003e88:	425b      	negs	r3, r3
 8003e8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e8e:	486f      	ldr	r0, [pc, #444]	; (800404c <_printf_i+0x21c>)
 8003e90:	220a      	movs	r2, #10
 8003e92:	e039      	b.n	8003f08 <_printf_i+0xd8>
 8003e94:	2973      	cmp	r1, #115	; 0x73
 8003e96:	f000 809d 	beq.w	8003fd4 <_printf_i+0x1a4>
 8003e9a:	d808      	bhi.n	8003eae <_printf_i+0x7e>
 8003e9c:	296f      	cmp	r1, #111	; 0x6f
 8003e9e:	d020      	beq.n	8003ee2 <_printf_i+0xb2>
 8003ea0:	2970      	cmp	r1, #112	; 0x70
 8003ea2:	d1dd      	bne.n	8003e60 <_printf_i+0x30>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	e003      	b.n	8003eb6 <_printf_i+0x86>
 8003eae:	2975      	cmp	r1, #117	; 0x75
 8003eb0:	d017      	beq.n	8003ee2 <_printf_i+0xb2>
 8003eb2:	2978      	cmp	r1, #120	; 0x78
 8003eb4:	d1d4      	bne.n	8003e60 <_printf_i+0x30>
 8003eb6:	2378      	movs	r3, #120	; 0x78
 8003eb8:	4865      	ldr	r0, [pc, #404]	; (8004050 <_printf_i+0x220>)
 8003eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ebe:	e055      	b.n	8003f6c <_printf_i+0x13c>
 8003ec0:	6813      	ldr	r3, [r2, #0]
 8003ec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec6:	1d19      	adds	r1, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6011      	str	r1, [r2, #0]
 8003ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e08c      	b.n	8003fee <_printf_i+0x1be>
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eda:	6011      	str	r1, [r2, #0]
 8003edc:	bf18      	it	ne
 8003ede:	b21b      	sxthne	r3, r3
 8003ee0:	e7cf      	b.n	8003e82 <_printf_i+0x52>
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	1d18      	adds	r0, r3, #4
 8003ee8:	6010      	str	r0, [r2, #0]
 8003eea:	0628      	lsls	r0, r5, #24
 8003eec:	d501      	bpl.n	8003ef2 <_printf_i+0xc2>
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	e002      	b.n	8003ef8 <_printf_i+0xc8>
 8003ef2:	0668      	lsls	r0, r5, #25
 8003ef4:	d5fb      	bpl.n	8003eee <_printf_i+0xbe>
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	296f      	cmp	r1, #111	; 0x6f
 8003efa:	bf14      	ite	ne
 8003efc:	220a      	movne	r2, #10
 8003efe:	2208      	moveq	r2, #8
 8003f00:	4852      	ldr	r0, [pc, #328]	; (800404c <_printf_i+0x21c>)
 8003f02:	2100      	movs	r1, #0
 8003f04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f08:	6865      	ldr	r5, [r4, #4]
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	60a5      	str	r5, [r4, #8]
 8003f0e:	f2c0 8095 	blt.w	800403c <_printf_i+0x20c>
 8003f12:	6821      	ldr	r1, [r4, #0]
 8003f14:	f021 0104 	bic.w	r1, r1, #4
 8003f18:	6021      	str	r1, [r4, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d13d      	bne.n	8003f9a <_printf_i+0x16a>
 8003f1e:	2d00      	cmp	r5, #0
 8003f20:	f040 808e 	bne.w	8004040 <_printf_i+0x210>
 8003f24:	4665      	mov	r5, ip
 8003f26:	2a08      	cmp	r2, #8
 8003f28:	d10b      	bne.n	8003f42 <_printf_i+0x112>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	07db      	lsls	r3, r3, #31
 8003f2e:	d508      	bpl.n	8003f42 <_printf_i+0x112>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	6862      	ldr	r2, [r4, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	bfde      	ittt	le
 8003f38:	2330      	movle	r3, #48	; 0x30
 8003f3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f42:	ebac 0305 	sub.w	r3, ip, r5
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	f8cd 8000 	str.w	r8, [sp]
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	aa03      	add	r2, sp, #12
 8003f50:	4621      	mov	r1, r4
 8003f52:	4630      	mov	r0, r6
 8003f54:	f7ff fef6 	bl	8003d44 <_printf_common>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d14d      	bne.n	8003ff8 <_printf_i+0x1c8>
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	b005      	add	sp, #20
 8003f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f66:	4839      	ldr	r0, [pc, #228]	; (800404c <_printf_i+0x21c>)
 8003f68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	6821      	ldr	r1, [r4, #0]
 8003f70:	1d1d      	adds	r5, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6015      	str	r5, [r2, #0]
 8003f76:	060a      	lsls	r2, r1, #24
 8003f78:	d50b      	bpl.n	8003f92 <_printf_i+0x162>
 8003f7a:	07ca      	lsls	r2, r1, #31
 8003f7c:	bf44      	itt	mi
 8003f7e:	f041 0120 	orrmi.w	r1, r1, #32
 8003f82:	6021      	strmi	r1, [r4, #0]
 8003f84:	b91b      	cbnz	r3, 8003f8e <_printf_i+0x15e>
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	f022 0220 	bic.w	r2, r2, #32
 8003f8c:	6022      	str	r2, [r4, #0]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	e7b7      	b.n	8003f02 <_printf_i+0xd2>
 8003f92:	064d      	lsls	r5, r1, #25
 8003f94:	bf48      	it	mi
 8003f96:	b29b      	uxthmi	r3, r3
 8003f98:	e7ef      	b.n	8003f7a <_printf_i+0x14a>
 8003f9a:	4665      	mov	r5, ip
 8003f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fa0:	fb02 3311 	mls	r3, r2, r1, r3
 8003fa4:	5cc3      	ldrb	r3, [r0, r3]
 8003fa6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003faa:	460b      	mov	r3, r1
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d1f5      	bne.n	8003f9c <_printf_i+0x16c>
 8003fb0:	e7b9      	b.n	8003f26 <_printf_i+0xf6>
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	6825      	ldr	r5, [r4, #0]
 8003fb6:	1d18      	adds	r0, r3, #4
 8003fb8:	6961      	ldr	r1, [r4, #20]
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	0628      	lsls	r0, r5, #24
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	d501      	bpl.n	8003fc6 <_printf_i+0x196>
 8003fc2:	6019      	str	r1, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <_printf_i+0x19c>
 8003fc6:	066a      	lsls	r2, r5, #25
 8003fc8:	d5fb      	bpl.n	8003fc2 <_printf_i+0x192>
 8003fca:	8019      	strh	r1, [r3, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4665      	mov	r5, ip
 8003fd0:	6123      	str	r3, [r4, #16]
 8003fd2:	e7b9      	b.n	8003f48 <_printf_i+0x118>
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	1d19      	adds	r1, r3, #4
 8003fd8:	6011      	str	r1, [r2, #0]
 8003fda:	681d      	ldr	r5, [r3, #0]
 8003fdc:	6862      	ldr	r2, [r4, #4]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 fadd 	bl	80045a0 <memchr>
 8003fe6:	b108      	cbz	r0, 8003fec <_printf_i+0x1bc>
 8003fe8:	1b40      	subs	r0, r0, r5
 8003fea:	6060      	str	r0, [r4, #4]
 8003fec:	6863      	ldr	r3, [r4, #4]
 8003fee:	6123      	str	r3, [r4, #16]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff6:	e7a7      	b.n	8003f48 <_printf_i+0x118>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d0aa      	beq.n	8003f5c <_printf_i+0x12c>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	079b      	lsls	r3, r3, #30
 800400a:	d413      	bmi.n	8004034 <_printf_i+0x204>
 800400c:	68e0      	ldr	r0, [r4, #12]
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	4298      	cmp	r0, r3
 8004012:	bfb8      	it	lt
 8004014:	4618      	movlt	r0, r3
 8004016:	e7a3      	b.n	8003f60 <_printf_i+0x130>
 8004018:	2301      	movs	r3, #1
 800401a:	464a      	mov	r2, r9
 800401c:	4639      	mov	r1, r7
 800401e:	4630      	mov	r0, r6
 8004020:	47c0      	blx	r8
 8004022:	3001      	adds	r0, #1
 8004024:	d09a      	beq.n	8003f5c <_printf_i+0x12c>
 8004026:	3501      	adds	r5, #1
 8004028:	68e3      	ldr	r3, [r4, #12]
 800402a:	9a03      	ldr	r2, [sp, #12]
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	42ab      	cmp	r3, r5
 8004030:	dcf2      	bgt.n	8004018 <_printf_i+0x1e8>
 8004032:	e7eb      	b.n	800400c <_printf_i+0x1dc>
 8004034:	2500      	movs	r5, #0
 8004036:	f104 0919 	add.w	r9, r4, #25
 800403a:	e7f5      	b.n	8004028 <_printf_i+0x1f8>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ac      	bne.n	8003f9a <_printf_i+0x16a>
 8004040:	7803      	ldrb	r3, [r0, #0]
 8004042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404a:	e76c      	b.n	8003f26 <_printf_i+0xf6>
 800404c:	08007459 	.word	0x08007459
 8004050:	0800746a 	.word	0x0800746a

08004054 <__swbuf_r>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	460e      	mov	r6, r1
 8004058:	4614      	mov	r4, r2
 800405a:	4605      	mov	r5, r0
 800405c:	b118      	cbz	r0, 8004066 <__swbuf_r+0x12>
 800405e:	6983      	ldr	r3, [r0, #24]
 8004060:	b90b      	cbnz	r3, 8004066 <__swbuf_r+0x12>
 8004062:	f000 f9af 	bl	80043c4 <__sinit>
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <__swbuf_r+0x98>)
 8004068:	429c      	cmp	r4, r3
 800406a:	d12a      	bne.n	80040c2 <__swbuf_r+0x6e>
 800406c:	686c      	ldr	r4, [r5, #4]
 800406e:	69a3      	ldr	r3, [r4, #24]
 8004070:	60a3      	str	r3, [r4, #8]
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	071a      	lsls	r2, r3, #28
 8004076:	d52e      	bpl.n	80040d6 <__swbuf_r+0x82>
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	b363      	cbz	r3, 80040d6 <__swbuf_r+0x82>
 800407c:	6923      	ldr	r3, [r4, #16]
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	b2f6      	uxtb	r6, r6
 8004082:	1ac0      	subs	r0, r0, r3
 8004084:	6963      	ldr	r3, [r4, #20]
 8004086:	4637      	mov	r7, r6
 8004088:	4283      	cmp	r3, r0
 800408a:	dc04      	bgt.n	8004096 <__swbuf_r+0x42>
 800408c:	4621      	mov	r1, r4
 800408e:	4628      	mov	r0, r5
 8004090:	f000 f92e 	bl	80042f0 <_fflush_r>
 8004094:	bb28      	cbnz	r0, 80040e2 <__swbuf_r+0x8e>
 8004096:	68a3      	ldr	r3, [r4, #8]
 8004098:	3001      	adds	r0, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	60a3      	str	r3, [r4, #8]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	6022      	str	r2, [r4, #0]
 80040a4:	701e      	strb	r6, [r3, #0]
 80040a6:	6963      	ldr	r3, [r4, #20]
 80040a8:	4283      	cmp	r3, r0
 80040aa:	d004      	beq.n	80040b6 <__swbuf_r+0x62>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	07db      	lsls	r3, r3, #31
 80040b0:	d519      	bpl.n	80040e6 <__swbuf_r+0x92>
 80040b2:	2e0a      	cmp	r6, #10
 80040b4:	d117      	bne.n	80040e6 <__swbuf_r+0x92>
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 f919 	bl	80042f0 <_fflush_r>
 80040be:	b190      	cbz	r0, 80040e6 <__swbuf_r+0x92>
 80040c0:	e00f      	b.n	80040e2 <__swbuf_r+0x8e>
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <__swbuf_r+0x9c>)
 80040c4:	429c      	cmp	r4, r3
 80040c6:	d101      	bne.n	80040cc <__swbuf_r+0x78>
 80040c8:	68ac      	ldr	r4, [r5, #8]
 80040ca:	e7d0      	b.n	800406e <__swbuf_r+0x1a>
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <__swbuf_r+0xa0>)
 80040ce:	429c      	cmp	r4, r3
 80040d0:	bf08      	it	eq
 80040d2:	68ec      	ldreq	r4, [r5, #12]
 80040d4:	e7cb      	b.n	800406e <__swbuf_r+0x1a>
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 f80d 	bl	80040f8 <__swsetup_r>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d0cc      	beq.n	800407c <__swbuf_r+0x28>
 80040e2:	f04f 37ff 	mov.w	r7, #4294967295
 80040e6:	4638      	mov	r0, r7
 80040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	0800749c 	.word	0x0800749c
 80040f0:	080074bc 	.word	0x080074bc
 80040f4:	0800747c 	.word	0x0800747c

080040f8 <__swsetup_r>:
 80040f8:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <__swsetup_r+0xcc>)
 80040fa:	b570      	push	{r4, r5, r6, lr}
 80040fc:	681d      	ldr	r5, [r3, #0]
 80040fe:	4606      	mov	r6, r0
 8004100:	460c      	mov	r4, r1
 8004102:	b125      	cbz	r5, 800410e <__swsetup_r+0x16>
 8004104:	69ab      	ldr	r3, [r5, #24]
 8004106:	b913      	cbnz	r3, 800410e <__swsetup_r+0x16>
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f95b 	bl	80043c4 <__sinit>
 800410e:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <__swsetup_r+0xd0>)
 8004110:	429c      	cmp	r4, r3
 8004112:	d10f      	bne.n	8004134 <__swsetup_r+0x3c>
 8004114:	686c      	ldr	r4, [r5, #4]
 8004116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411a:	b29a      	uxth	r2, r3
 800411c:	0715      	lsls	r5, r2, #28
 800411e:	d42c      	bmi.n	800417a <__swsetup_r+0x82>
 8004120:	06d0      	lsls	r0, r2, #27
 8004122:	d411      	bmi.n	8004148 <__swsetup_r+0x50>
 8004124:	2209      	movs	r2, #9
 8004126:	6032      	str	r2, [r6, #0]
 8004128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	e03e      	b.n	80041b2 <__swsetup_r+0xba>
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <__swsetup_r+0xd4>)
 8004136:	429c      	cmp	r4, r3
 8004138:	d101      	bne.n	800413e <__swsetup_r+0x46>
 800413a:	68ac      	ldr	r4, [r5, #8]
 800413c:	e7eb      	b.n	8004116 <__swsetup_r+0x1e>
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <__swsetup_r+0xd8>)
 8004140:	429c      	cmp	r4, r3
 8004142:	bf08      	it	eq
 8004144:	68ec      	ldreq	r4, [r5, #12]
 8004146:	e7e6      	b.n	8004116 <__swsetup_r+0x1e>
 8004148:	0751      	lsls	r1, r2, #29
 800414a:	d512      	bpl.n	8004172 <__swsetup_r+0x7a>
 800414c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414e:	b141      	cbz	r1, 8004162 <__swsetup_r+0x6a>
 8004150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004154:	4299      	cmp	r1, r3
 8004156:	d002      	beq.n	800415e <__swsetup_r+0x66>
 8004158:	4630      	mov	r0, r6
 800415a:	f000 fa2f 	bl	80045bc <_free_r>
 800415e:	2300      	movs	r3, #0
 8004160:	6363      	str	r3, [r4, #52]	; 0x34
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	2300      	movs	r3, #0
 800416c:	6063      	str	r3, [r4, #4]
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f043 0308 	orr.w	r3, r3, #8
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	b94b      	cbnz	r3, 8004192 <__swsetup_r+0x9a>
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d003      	beq.n	8004192 <__swsetup_r+0x9a>
 800418a:	4621      	mov	r1, r4
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f9c7 	bl	8004520 <__smakebuf_r>
 8004192:	89a2      	ldrh	r2, [r4, #12]
 8004194:	f012 0301 	ands.w	r3, r2, #1
 8004198:	d00c      	beq.n	80041b4 <__swsetup_r+0xbc>
 800419a:	2300      	movs	r3, #0
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	6963      	ldr	r3, [r4, #20]
 80041a0:	425b      	negs	r3, r3
 80041a2:	61a3      	str	r3, [r4, #24]
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	b953      	cbnz	r3, 80041be <__swsetup_r+0xc6>
 80041a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041b0:	d1ba      	bne.n	8004128 <__swsetup_r+0x30>
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	0792      	lsls	r2, r2, #30
 80041b6:	bf58      	it	pl
 80041b8:	6963      	ldrpl	r3, [r4, #20]
 80041ba:	60a3      	str	r3, [r4, #8]
 80041bc:	e7f2      	b.n	80041a4 <__swsetup_r+0xac>
 80041be:	2000      	movs	r0, #0
 80041c0:	e7f7      	b.n	80041b2 <__swsetup_r+0xba>
 80041c2:	bf00      	nop
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	0800749c 	.word	0x0800749c
 80041cc:	080074bc 	.word	0x080074bc
 80041d0:	0800747c 	.word	0x0800747c

080041d4 <abort>:
 80041d4:	b508      	push	{r3, lr}
 80041d6:	2006      	movs	r0, #6
 80041d8:	f000 face 	bl	8004778 <raise>
 80041dc:	2001      	movs	r0, #1
 80041de:	f000 fbe3 	bl	80049a8 <_exit>
	...

080041e4 <__sflush_r>:
 80041e4:	898a      	ldrh	r2, [r1, #12]
 80041e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ea:	4605      	mov	r5, r0
 80041ec:	0710      	lsls	r0, r2, #28
 80041ee:	460c      	mov	r4, r1
 80041f0:	d458      	bmi.n	80042a4 <__sflush_r+0xc0>
 80041f2:	684b      	ldr	r3, [r1, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dc05      	bgt.n	8004204 <__sflush_r+0x20>
 80041f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	dc02      	bgt.n	8004204 <__sflush_r+0x20>
 80041fe:	2000      	movs	r0, #0
 8004200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004206:	2e00      	cmp	r6, #0
 8004208:	d0f9      	beq.n	80041fe <__sflush_r+0x1a>
 800420a:	2300      	movs	r3, #0
 800420c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004210:	682f      	ldr	r7, [r5, #0]
 8004212:	6a21      	ldr	r1, [r4, #32]
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	d032      	beq.n	800427e <__sflush_r+0x9a>
 8004218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	075a      	lsls	r2, r3, #29
 800421e:	d505      	bpl.n	800422c <__sflush_r+0x48>
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	1ac0      	subs	r0, r0, r3
 8004224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004226:	b10b      	cbz	r3, 800422c <__sflush_r+0x48>
 8004228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800422a:	1ac0      	subs	r0, r0, r3
 800422c:	2300      	movs	r3, #0
 800422e:	4602      	mov	r2, r0
 8004230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004232:	6a21      	ldr	r1, [r4, #32]
 8004234:	4628      	mov	r0, r5
 8004236:	47b0      	blx	r6
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	d106      	bne.n	800424c <__sflush_r+0x68>
 800423e:	6829      	ldr	r1, [r5, #0]
 8004240:	291d      	cmp	r1, #29
 8004242:	d848      	bhi.n	80042d6 <__sflush_r+0xf2>
 8004244:	4a29      	ldr	r2, [pc, #164]	; (80042ec <__sflush_r+0x108>)
 8004246:	40ca      	lsrs	r2, r1
 8004248:	07d6      	lsls	r6, r2, #31
 800424a:	d544      	bpl.n	80042d6 <__sflush_r+0xf2>
 800424c:	2200      	movs	r2, #0
 800424e:	6062      	str	r2, [r4, #4]
 8004250:	6922      	ldr	r2, [r4, #16]
 8004252:	04d9      	lsls	r1, r3, #19
 8004254:	6022      	str	r2, [r4, #0]
 8004256:	d504      	bpl.n	8004262 <__sflush_r+0x7e>
 8004258:	1c42      	adds	r2, r0, #1
 800425a:	d101      	bne.n	8004260 <__sflush_r+0x7c>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b903      	cbnz	r3, 8004262 <__sflush_r+0x7e>
 8004260:	6560      	str	r0, [r4, #84]	; 0x54
 8004262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004264:	602f      	str	r7, [r5, #0]
 8004266:	2900      	cmp	r1, #0
 8004268:	d0c9      	beq.n	80041fe <__sflush_r+0x1a>
 800426a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800426e:	4299      	cmp	r1, r3
 8004270:	d002      	beq.n	8004278 <__sflush_r+0x94>
 8004272:	4628      	mov	r0, r5
 8004274:	f000 f9a2 	bl	80045bc <_free_r>
 8004278:	2000      	movs	r0, #0
 800427a:	6360      	str	r0, [r4, #52]	; 0x34
 800427c:	e7c0      	b.n	8004200 <__sflush_r+0x1c>
 800427e:	2301      	movs	r3, #1
 8004280:	4628      	mov	r0, r5
 8004282:	47b0      	blx	r6
 8004284:	1c41      	adds	r1, r0, #1
 8004286:	d1c8      	bne.n	800421a <__sflush_r+0x36>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0c5      	beq.n	800421a <__sflush_r+0x36>
 800428e:	2b1d      	cmp	r3, #29
 8004290:	d001      	beq.n	8004296 <__sflush_r+0xb2>
 8004292:	2b16      	cmp	r3, #22
 8004294:	d101      	bne.n	800429a <__sflush_r+0xb6>
 8004296:	602f      	str	r7, [r5, #0]
 8004298:	e7b1      	b.n	80041fe <__sflush_r+0x1a>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	e7ad      	b.n	8004200 <__sflush_r+0x1c>
 80042a4:	690f      	ldr	r7, [r1, #16]
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	d0a9      	beq.n	80041fe <__sflush_r+0x1a>
 80042aa:	0793      	lsls	r3, r2, #30
 80042ac:	bf18      	it	ne
 80042ae:	2300      	movne	r3, #0
 80042b0:	680e      	ldr	r6, [r1, #0]
 80042b2:	bf08      	it	eq
 80042b4:	694b      	ldreq	r3, [r1, #20]
 80042b6:	eba6 0807 	sub.w	r8, r6, r7
 80042ba:	600f      	str	r7, [r1, #0]
 80042bc:	608b      	str	r3, [r1, #8]
 80042be:	f1b8 0f00 	cmp.w	r8, #0
 80042c2:	dd9c      	ble.n	80041fe <__sflush_r+0x1a>
 80042c4:	4643      	mov	r3, r8
 80042c6:	463a      	mov	r2, r7
 80042c8:	6a21      	ldr	r1, [r4, #32]
 80042ca:	4628      	mov	r0, r5
 80042cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042ce:	47b0      	blx	r6
 80042d0:	2800      	cmp	r0, #0
 80042d2:	dc06      	bgt.n	80042e2 <__sflush_r+0xfe>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	e78e      	b.n	8004200 <__sflush_r+0x1c>
 80042e2:	4407      	add	r7, r0
 80042e4:	eba8 0800 	sub.w	r8, r8, r0
 80042e8:	e7e9      	b.n	80042be <__sflush_r+0xda>
 80042ea:	bf00      	nop
 80042ec:	20400001 	.word	0x20400001

080042f0 <_fflush_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	4605      	mov	r5, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	b1db      	cbz	r3, 8004332 <_fflush_r+0x42>
 80042fa:	b118      	cbz	r0, 8004304 <_fflush_r+0x14>
 80042fc:	6983      	ldr	r3, [r0, #24]
 80042fe:	b90b      	cbnz	r3, 8004304 <_fflush_r+0x14>
 8004300:	f000 f860 	bl	80043c4 <__sinit>
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <_fflush_r+0x48>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d109      	bne.n	800431e <_fflush_r+0x2e>
 800430a:	686c      	ldr	r4, [r5, #4]
 800430c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004310:	b17b      	cbz	r3, 8004332 <_fflush_r+0x42>
 8004312:	4621      	mov	r1, r4
 8004314:	4628      	mov	r0, r5
 8004316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431a:	f7ff bf63 	b.w	80041e4 <__sflush_r>
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <_fflush_r+0x4c>)
 8004320:	429c      	cmp	r4, r3
 8004322:	d101      	bne.n	8004328 <_fflush_r+0x38>
 8004324:	68ac      	ldr	r4, [r5, #8]
 8004326:	e7f1      	b.n	800430c <_fflush_r+0x1c>
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_fflush_r+0x50>)
 800432a:	429c      	cmp	r4, r3
 800432c:	bf08      	it	eq
 800432e:	68ec      	ldreq	r4, [r5, #12]
 8004330:	e7ec      	b.n	800430c <_fflush_r+0x1c>
 8004332:	2000      	movs	r0, #0
 8004334:	bd38      	pop	{r3, r4, r5, pc}
 8004336:	bf00      	nop
 8004338:	0800749c 	.word	0x0800749c
 800433c:	080074bc 	.word	0x080074bc
 8004340:	0800747c 	.word	0x0800747c

08004344 <std>:
 8004344:	2300      	movs	r3, #0
 8004346:	b510      	push	{r4, lr}
 8004348:	4604      	mov	r4, r0
 800434a:	e9c0 3300 	strd	r3, r3, [r0]
 800434e:	6083      	str	r3, [r0, #8]
 8004350:	8181      	strh	r1, [r0, #12]
 8004352:	6643      	str	r3, [r0, #100]	; 0x64
 8004354:	81c2      	strh	r2, [r0, #14]
 8004356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800435a:	6183      	str	r3, [r0, #24]
 800435c:	4619      	mov	r1, r3
 800435e:	2208      	movs	r2, #8
 8004360:	305c      	adds	r0, #92	; 0x5c
 8004362:	f7ff fbaa 	bl	8003aba <memset>
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x38>)
 8004368:	6224      	str	r4, [r4, #32]
 800436a:	6263      	str	r3, [r4, #36]	; 0x24
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <std+0x3c>)
 800436e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <std+0x40>)
 8004372:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <std+0x44>)
 8004376:	6323      	str	r3, [r4, #48]	; 0x30
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	080047b1 	.word	0x080047b1
 8004380:	080047d3 	.word	0x080047d3
 8004384:	0800480b 	.word	0x0800480b
 8004388:	0800482f 	.word	0x0800482f

0800438c <_cleanup_r>:
 800438c:	4901      	ldr	r1, [pc, #4]	; (8004394 <_cleanup_r+0x8>)
 800438e:	f000 b885 	b.w	800449c <_fwalk_reent>
 8004392:	bf00      	nop
 8004394:	080042f1 	.word	0x080042f1

08004398 <__sfmoreglue>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	2568      	movs	r5, #104	; 0x68
 800439c:	1e4a      	subs	r2, r1, #1
 800439e:	4355      	muls	r5, r2
 80043a0:	460e      	mov	r6, r1
 80043a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043a6:	f000 f955 	bl	8004654 <_malloc_r>
 80043aa:	4604      	mov	r4, r0
 80043ac:	b140      	cbz	r0, 80043c0 <__sfmoreglue+0x28>
 80043ae:	2100      	movs	r1, #0
 80043b0:	e9c0 1600 	strd	r1, r6, [r0]
 80043b4:	300c      	adds	r0, #12
 80043b6:	60a0      	str	r0, [r4, #8]
 80043b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043bc:	f7ff fb7d 	bl	8003aba <memset>
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd70      	pop	{r4, r5, r6, pc}

080043c4 <__sinit>:
 80043c4:	6983      	ldr	r3, [r0, #24]
 80043c6:	b510      	push	{r4, lr}
 80043c8:	4604      	mov	r4, r0
 80043ca:	bb33      	cbnz	r3, 800441a <__sinit+0x56>
 80043cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80043d0:	6503      	str	r3, [r0, #80]	; 0x50
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <__sinit+0x58>)
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <__sinit+0x5c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6282      	str	r2, [r0, #40]	; 0x28
 80043da:	4298      	cmp	r0, r3
 80043dc:	bf04      	itt	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	6183      	streq	r3, [r0, #24]
 80043e2:	f000 f81f 	bl	8004424 <__sfp>
 80043e6:	6060      	str	r0, [r4, #4]
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 f81b 	bl	8004424 <__sfp>
 80043ee:	60a0      	str	r0, [r4, #8]
 80043f0:	4620      	mov	r0, r4
 80043f2:	f000 f817 	bl	8004424 <__sfp>
 80043f6:	2200      	movs	r2, #0
 80043f8:	60e0      	str	r0, [r4, #12]
 80043fa:	2104      	movs	r1, #4
 80043fc:	6860      	ldr	r0, [r4, #4]
 80043fe:	f7ff ffa1 	bl	8004344 <std>
 8004402:	2201      	movs	r2, #1
 8004404:	2109      	movs	r1, #9
 8004406:	68a0      	ldr	r0, [r4, #8]
 8004408:	f7ff ff9c 	bl	8004344 <std>
 800440c:	2202      	movs	r2, #2
 800440e:	2112      	movs	r1, #18
 8004410:	68e0      	ldr	r0, [r4, #12]
 8004412:	f7ff ff97 	bl	8004344 <std>
 8004416:	2301      	movs	r3, #1
 8004418:	61a3      	str	r3, [r4, #24]
 800441a:	bd10      	pop	{r4, pc}
 800441c:	08007444 	.word	0x08007444
 8004420:	0800438d 	.word	0x0800438d

08004424 <__sfp>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <__sfp+0x70>)
 8004428:	4607      	mov	r7, r0
 800442a:	681e      	ldr	r6, [r3, #0]
 800442c:	69b3      	ldr	r3, [r6, #24]
 800442e:	b913      	cbnz	r3, 8004436 <__sfp+0x12>
 8004430:	4630      	mov	r0, r6
 8004432:	f7ff ffc7 	bl	80043c4 <__sinit>
 8004436:	3648      	adds	r6, #72	; 0x48
 8004438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800443c:	3b01      	subs	r3, #1
 800443e:	d503      	bpl.n	8004448 <__sfp+0x24>
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	b133      	cbz	r3, 8004452 <__sfp+0x2e>
 8004444:	6836      	ldr	r6, [r6, #0]
 8004446:	e7f7      	b.n	8004438 <__sfp+0x14>
 8004448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800444c:	b16d      	cbz	r5, 800446a <__sfp+0x46>
 800444e:	3468      	adds	r4, #104	; 0x68
 8004450:	e7f4      	b.n	800443c <__sfp+0x18>
 8004452:	2104      	movs	r1, #4
 8004454:	4638      	mov	r0, r7
 8004456:	f7ff ff9f 	bl	8004398 <__sfmoreglue>
 800445a:	6030      	str	r0, [r6, #0]
 800445c:	2800      	cmp	r0, #0
 800445e:	d1f1      	bne.n	8004444 <__sfp+0x20>
 8004460:	230c      	movs	r3, #12
 8004462:	4604      	mov	r4, r0
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4620      	mov	r0, r4
 8004468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <__sfp+0x74>)
 800446c:	6665      	str	r5, [r4, #100]	; 0x64
 800446e:	e9c4 5500 	strd	r5, r5, [r4]
 8004472:	60a5      	str	r5, [r4, #8]
 8004474:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004478:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800447c:	2208      	movs	r2, #8
 800447e:	4629      	mov	r1, r5
 8004480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004484:	f7ff fb19 	bl	8003aba <memset>
 8004488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800448c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004490:	e7e9      	b.n	8004466 <__sfp+0x42>
 8004492:	bf00      	nop
 8004494:	08007444 	.word	0x08007444
 8004498:	ffff0001 	.word	0xffff0001

0800449c <_fwalk_reent>:
 800449c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	4680      	mov	r8, r0
 80044a2:	4689      	mov	r9, r1
 80044a4:	2600      	movs	r6, #0
 80044a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044aa:	b914      	cbnz	r4, 80044b2 <_fwalk_reent+0x16>
 80044ac:	4630      	mov	r0, r6
 80044ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044b6:	3f01      	subs	r7, #1
 80044b8:	d501      	bpl.n	80044be <_fwalk_reent+0x22>
 80044ba:	6824      	ldr	r4, [r4, #0]
 80044bc:	e7f5      	b.n	80044aa <_fwalk_reent+0xe>
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d907      	bls.n	80044d4 <_fwalk_reent+0x38>
 80044c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044c8:	3301      	adds	r3, #1
 80044ca:	d003      	beq.n	80044d4 <_fwalk_reent+0x38>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4640      	mov	r0, r8
 80044d0:	47c8      	blx	r9
 80044d2:	4306      	orrs	r6, r0
 80044d4:	3568      	adds	r5, #104	; 0x68
 80044d6:	e7ee      	b.n	80044b6 <_fwalk_reent+0x1a>

080044d8 <__swhatbuf_r>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	460e      	mov	r6, r1
 80044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e0:	b096      	sub	sp, #88	; 0x58
 80044e2:	2900      	cmp	r1, #0
 80044e4:	4614      	mov	r4, r2
 80044e6:	461d      	mov	r5, r3
 80044e8:	da07      	bge.n	80044fa <__swhatbuf_r+0x22>
 80044ea:	2300      	movs	r3, #0
 80044ec:	602b      	str	r3, [r5, #0]
 80044ee:	89b3      	ldrh	r3, [r6, #12]
 80044f0:	061a      	lsls	r2, r3, #24
 80044f2:	d410      	bmi.n	8004516 <__swhatbuf_r+0x3e>
 80044f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f8:	e00e      	b.n	8004518 <__swhatbuf_r+0x40>
 80044fa:	466a      	mov	r2, sp
 80044fc:	f000 f9be 	bl	800487c <_fstat_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	dbf2      	blt.n	80044ea <__swhatbuf_r+0x12>
 8004504:	9a01      	ldr	r2, [sp, #4]
 8004506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800450a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800450e:	425a      	negs	r2, r3
 8004510:	415a      	adcs	r2, r3
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	e7ee      	b.n	80044f4 <__swhatbuf_r+0x1c>
 8004516:	2340      	movs	r3, #64	; 0x40
 8004518:	2000      	movs	r0, #0
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	b016      	add	sp, #88	; 0x58
 800451e:	bd70      	pop	{r4, r5, r6, pc}

08004520 <__smakebuf_r>:
 8004520:	898b      	ldrh	r3, [r1, #12]
 8004522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004524:	079d      	lsls	r5, r3, #30
 8004526:	4606      	mov	r6, r0
 8004528:	460c      	mov	r4, r1
 800452a:	d507      	bpl.n	800453c <__smakebuf_r+0x1c>
 800452c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	6123      	str	r3, [r4, #16]
 8004534:	2301      	movs	r3, #1
 8004536:	6163      	str	r3, [r4, #20]
 8004538:	b002      	add	sp, #8
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	ab01      	add	r3, sp, #4
 800453e:	466a      	mov	r2, sp
 8004540:	f7ff ffca 	bl	80044d8 <__swhatbuf_r>
 8004544:	9900      	ldr	r1, [sp, #0]
 8004546:	4605      	mov	r5, r0
 8004548:	4630      	mov	r0, r6
 800454a:	f000 f883 	bl	8004654 <_malloc_r>
 800454e:	b948      	cbnz	r0, 8004564 <__smakebuf_r+0x44>
 8004550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004554:	059a      	lsls	r2, r3, #22
 8004556:	d4ef      	bmi.n	8004538 <__smakebuf_r+0x18>
 8004558:	f023 0303 	bic.w	r3, r3, #3
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	81a3      	strh	r3, [r4, #12]
 8004562:	e7e3      	b.n	800452c <__smakebuf_r+0xc>
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <__smakebuf_r+0x7c>)
 8004566:	62b3      	str	r3, [r6, #40]	; 0x28
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	6020      	str	r0, [r4, #0]
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	9b00      	ldr	r3, [sp, #0]
 8004574:	6120      	str	r0, [r4, #16]
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	9b01      	ldr	r3, [sp, #4]
 800457a:	b15b      	cbz	r3, 8004594 <__smakebuf_r+0x74>
 800457c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f98d 	bl	80048a0 <_isatty_r>
 8004586:	b128      	cbz	r0, 8004594 <__smakebuf_r+0x74>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	431d      	orrs	r5, r3
 8004598:	81a5      	strh	r5, [r4, #12]
 800459a:	e7cd      	b.n	8004538 <__smakebuf_r+0x18>
 800459c:	0800438d 	.word	0x0800438d

080045a0 <memchr>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	b2c9      	uxtb	r1, r1
 80045a4:	4402      	add	r2, r0
 80045a6:	4290      	cmp	r0, r2
 80045a8:	4603      	mov	r3, r0
 80045aa:	d101      	bne.n	80045b0 <memchr+0x10>
 80045ac:	2300      	movs	r3, #0
 80045ae:	e003      	b.n	80045b8 <memchr+0x18>
 80045b0:	781c      	ldrb	r4, [r3, #0]
 80045b2:	3001      	adds	r0, #1
 80045b4:	428c      	cmp	r4, r1
 80045b6:	d1f6      	bne.n	80045a6 <memchr+0x6>
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd10      	pop	{r4, pc}

080045bc <_free_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4605      	mov	r5, r0
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d043      	beq.n	800464c <_free_r+0x90>
 80045c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c8:	1f0c      	subs	r4, r1, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfb8      	it	lt
 80045ce:	18e4      	addlt	r4, r4, r3
 80045d0:	f000 f988 	bl	80048e4 <__malloc_lock>
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <_free_r+0x94>)
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	4610      	mov	r0, r2
 80045da:	b933      	cbnz	r3, 80045ea <_free_r+0x2e>
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	6014      	str	r4, [r2, #0]
 80045e0:	4628      	mov	r0, r5
 80045e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e6:	f000 b97e 	b.w	80048e6 <__malloc_unlock>
 80045ea:	42a3      	cmp	r3, r4
 80045ec:	d90b      	bls.n	8004606 <_free_r+0x4a>
 80045ee:	6821      	ldr	r1, [r4, #0]
 80045f0:	1862      	adds	r2, r4, r1
 80045f2:	4293      	cmp	r3, r2
 80045f4:	bf01      	itttt	eq
 80045f6:	681a      	ldreq	r2, [r3, #0]
 80045f8:	685b      	ldreq	r3, [r3, #4]
 80045fa:	1852      	addeq	r2, r2, r1
 80045fc:	6022      	streq	r2, [r4, #0]
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	6004      	str	r4, [r0, #0]
 8004602:	e7ed      	b.n	80045e0 <_free_r+0x24>
 8004604:	4613      	mov	r3, r2
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	b10a      	cbz	r2, 800460e <_free_r+0x52>
 800460a:	42a2      	cmp	r2, r4
 800460c:	d9fa      	bls.n	8004604 <_free_r+0x48>
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	1858      	adds	r0, r3, r1
 8004612:	42a0      	cmp	r0, r4
 8004614:	d10b      	bne.n	800462e <_free_r+0x72>
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	4401      	add	r1, r0
 800461a:	1858      	adds	r0, r3, r1
 800461c:	4282      	cmp	r2, r0
 800461e:	6019      	str	r1, [r3, #0]
 8004620:	d1de      	bne.n	80045e0 <_free_r+0x24>
 8004622:	6810      	ldr	r0, [r2, #0]
 8004624:	6852      	ldr	r2, [r2, #4]
 8004626:	4401      	add	r1, r0
 8004628:	6019      	str	r1, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	e7d8      	b.n	80045e0 <_free_r+0x24>
 800462e:	d902      	bls.n	8004636 <_free_r+0x7a>
 8004630:	230c      	movs	r3, #12
 8004632:	602b      	str	r3, [r5, #0]
 8004634:	e7d4      	b.n	80045e0 <_free_r+0x24>
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	1821      	adds	r1, r4, r0
 800463a:	428a      	cmp	r2, r1
 800463c:	bf01      	itttt	eq
 800463e:	6811      	ldreq	r1, [r2, #0]
 8004640:	6852      	ldreq	r2, [r2, #4]
 8004642:	1809      	addeq	r1, r1, r0
 8004644:	6021      	streq	r1, [r4, #0]
 8004646:	6062      	str	r2, [r4, #4]
 8004648:	605c      	str	r4, [r3, #4]
 800464a:	e7c9      	b.n	80045e0 <_free_r+0x24>
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	20003794 	.word	0x20003794

08004654 <_malloc_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	1ccd      	adds	r5, r1, #3
 8004658:	f025 0503 	bic.w	r5, r5, #3
 800465c:	3508      	adds	r5, #8
 800465e:	2d0c      	cmp	r5, #12
 8004660:	bf38      	it	cc
 8004662:	250c      	movcc	r5, #12
 8004664:	2d00      	cmp	r5, #0
 8004666:	4606      	mov	r6, r0
 8004668:	db01      	blt.n	800466e <_malloc_r+0x1a>
 800466a:	42a9      	cmp	r1, r5
 800466c:	d903      	bls.n	8004676 <_malloc_r+0x22>
 800466e:	230c      	movs	r3, #12
 8004670:	6033      	str	r3, [r6, #0]
 8004672:	2000      	movs	r0, #0
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	f000 f935 	bl	80048e4 <__malloc_lock>
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <_malloc_r+0xac>)
 800467c:	6814      	ldr	r4, [r2, #0]
 800467e:	4621      	mov	r1, r4
 8004680:	b991      	cbnz	r1, 80046a8 <_malloc_r+0x54>
 8004682:	4c20      	ldr	r4, [pc, #128]	; (8004704 <_malloc_r+0xb0>)
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	b91b      	cbnz	r3, 8004690 <_malloc_r+0x3c>
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f83d 	bl	8004708 <_sbrk_r>
 800468e:	6020      	str	r0, [r4, #0]
 8004690:	4629      	mov	r1, r5
 8004692:	4630      	mov	r0, r6
 8004694:	f000 f838 	bl	8004708 <_sbrk_r>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d124      	bne.n	80046e6 <_malloc_r+0x92>
 800469c:	230c      	movs	r3, #12
 800469e:	4630      	mov	r0, r6
 80046a0:	6033      	str	r3, [r6, #0]
 80046a2:	f000 f920 	bl	80048e6 <__malloc_unlock>
 80046a6:	e7e4      	b.n	8004672 <_malloc_r+0x1e>
 80046a8:	680b      	ldr	r3, [r1, #0]
 80046aa:	1b5b      	subs	r3, r3, r5
 80046ac:	d418      	bmi.n	80046e0 <_malloc_r+0x8c>
 80046ae:	2b0b      	cmp	r3, #11
 80046b0:	d90f      	bls.n	80046d2 <_malloc_r+0x7e>
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	18cc      	adds	r4, r1, r3
 80046b6:	50cd      	str	r5, [r1, r3]
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f914 	bl	80048e6 <__malloc_unlock>
 80046be:	f104 000b 	add.w	r0, r4, #11
 80046c2:	1d23      	adds	r3, r4, #4
 80046c4:	f020 0007 	bic.w	r0, r0, #7
 80046c8:	1ac3      	subs	r3, r0, r3
 80046ca:	d0d3      	beq.n	8004674 <_malloc_r+0x20>
 80046cc:	425a      	negs	r2, r3
 80046ce:	50e2      	str	r2, [r4, r3]
 80046d0:	e7d0      	b.n	8004674 <_malloc_r+0x20>
 80046d2:	684b      	ldr	r3, [r1, #4]
 80046d4:	428c      	cmp	r4, r1
 80046d6:	bf16      	itet	ne
 80046d8:	6063      	strne	r3, [r4, #4]
 80046da:	6013      	streq	r3, [r2, #0]
 80046dc:	460c      	movne	r4, r1
 80046de:	e7eb      	b.n	80046b8 <_malloc_r+0x64>
 80046e0:	460c      	mov	r4, r1
 80046e2:	6849      	ldr	r1, [r1, #4]
 80046e4:	e7cc      	b.n	8004680 <_malloc_r+0x2c>
 80046e6:	1cc4      	adds	r4, r0, #3
 80046e8:	f024 0403 	bic.w	r4, r4, #3
 80046ec:	42a0      	cmp	r0, r4
 80046ee:	d005      	beq.n	80046fc <_malloc_r+0xa8>
 80046f0:	1a21      	subs	r1, r4, r0
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 f808 	bl	8004708 <_sbrk_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d0cf      	beq.n	800469c <_malloc_r+0x48>
 80046fc:	6025      	str	r5, [r4, #0]
 80046fe:	e7db      	b.n	80046b8 <_malloc_r+0x64>
 8004700:	20003794 	.word	0x20003794
 8004704:	20003798 	.word	0x20003798

08004708 <_sbrk_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	2300      	movs	r3, #0
 800470c:	4c05      	ldr	r4, [pc, #20]	; (8004724 <_sbrk_r+0x1c>)
 800470e:	4605      	mov	r5, r0
 8004710:	4608      	mov	r0, r1
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	f000 f932 	bl	800497c <_sbrk>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_sbrk_r+0x1a>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	b103      	cbz	r3, 8004722 <_sbrk_r+0x1a>
 8004720:	602b      	str	r3, [r5, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	200037e4 	.word	0x200037e4

08004728 <_raise_r>:
 8004728:	291f      	cmp	r1, #31
 800472a:	b538      	push	{r3, r4, r5, lr}
 800472c:	4604      	mov	r4, r0
 800472e:	460d      	mov	r5, r1
 8004730:	d904      	bls.n	800473c <_raise_r+0x14>
 8004732:	2316      	movs	r3, #22
 8004734:	6003      	str	r3, [r0, #0]
 8004736:	f04f 30ff 	mov.w	r0, #4294967295
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800473e:	b112      	cbz	r2, 8004746 <_raise_r+0x1e>
 8004740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004744:	b94b      	cbnz	r3, 800475a <_raise_r+0x32>
 8004746:	4620      	mov	r0, r4
 8004748:	f000 f830 	bl	80047ac <_getpid_r>
 800474c:	462a      	mov	r2, r5
 800474e:	4601      	mov	r1, r0
 8004750:	4620      	mov	r0, r4
 8004752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004756:	f000 b817 	b.w	8004788 <_kill_r>
 800475a:	2b01      	cmp	r3, #1
 800475c:	d00a      	beq.n	8004774 <_raise_r+0x4c>
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	d103      	bne.n	800476a <_raise_r+0x42>
 8004762:	2316      	movs	r3, #22
 8004764:	6003      	str	r3, [r0, #0]
 8004766:	2001      	movs	r0, #1
 8004768:	e7e7      	b.n	800473a <_raise_r+0x12>
 800476a:	2400      	movs	r4, #0
 800476c:	4628      	mov	r0, r5
 800476e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004772:	4798      	blx	r3
 8004774:	2000      	movs	r0, #0
 8004776:	e7e0      	b.n	800473a <_raise_r+0x12>

08004778 <raise>:
 8004778:	4b02      	ldr	r3, [pc, #8]	; (8004784 <raise+0xc>)
 800477a:	4601      	mov	r1, r0
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f7ff bfd3 	b.w	8004728 <_raise_r>
 8004782:	bf00      	nop
 8004784:	2000000c 	.word	0x2000000c

08004788 <_kill_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	2300      	movs	r3, #0
 800478c:	4c06      	ldr	r4, [pc, #24]	; (80047a8 <_kill_r+0x20>)
 800478e:	4605      	mov	r5, r0
 8004790:	4608      	mov	r0, r1
 8004792:	4611      	mov	r1, r2
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	f000 f8d9 	bl	800494c <_kill>
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	d102      	bne.n	80047a4 <_kill_r+0x1c>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	b103      	cbz	r3, 80047a4 <_kill_r+0x1c>
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
 80047a6:	bf00      	nop
 80047a8:	200037e4 	.word	0x200037e4

080047ac <_getpid_r>:
 80047ac:	f000 b8be 	b.w	800492c <_getpid>

080047b0 <__sread>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b8:	f000 f896 	bl	80048e8 <_read_r>
 80047bc:	2800      	cmp	r0, #0
 80047be:	bfab      	itete	ge
 80047c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047c2:	89a3      	ldrhlt	r3, [r4, #12]
 80047c4:	181b      	addge	r3, r3, r0
 80047c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ca:	bfac      	ite	ge
 80047cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ce:	81a3      	strhlt	r3, [r4, #12]
 80047d0:	bd10      	pop	{r4, pc}

080047d2 <__swrite>:
 80047d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d6:	461f      	mov	r7, r3
 80047d8:	898b      	ldrh	r3, [r1, #12]
 80047da:	4605      	mov	r5, r0
 80047dc:	05db      	lsls	r3, r3, #23
 80047de:	460c      	mov	r4, r1
 80047e0:	4616      	mov	r6, r2
 80047e2:	d505      	bpl.n	80047f0 <__swrite+0x1e>
 80047e4:	2302      	movs	r3, #2
 80047e6:	2200      	movs	r2, #0
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	f000 f868 	bl	80048c0 <_lseek_r>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	4632      	mov	r2, r6
 80047f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fe:	463b      	mov	r3, r7
 8004800:	4628      	mov	r0, r5
 8004802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	f000 b817 	b.w	8004838 <_write_r>

0800480a <__sseek>:
 800480a:	b510      	push	{r4, lr}
 800480c:	460c      	mov	r4, r1
 800480e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004812:	f000 f855 	bl	80048c0 <_lseek_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	bf15      	itete	ne
 800481c:	6560      	strne	r0, [r4, #84]	; 0x54
 800481e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004826:	81a3      	strheq	r3, [r4, #12]
 8004828:	bf18      	it	ne
 800482a:	81a3      	strhne	r3, [r4, #12]
 800482c:	bd10      	pop	{r4, pc}

0800482e <__sclose>:
 800482e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004832:	f000 b813 	b.w	800485c <_close_r>
	...

08004838 <_write_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4605      	mov	r5, r0
 800483c:	4608      	mov	r0, r1
 800483e:	4611      	mov	r1, r2
 8004840:	2200      	movs	r2, #0
 8004842:	4c05      	ldr	r4, [pc, #20]	; (8004858 <_write_r+0x20>)
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f8a6 	bl	8004998 <_write>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_write_r+0x1e>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	b103      	cbz	r3, 8004856 <_write_r+0x1e>
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	200037e4 	.word	0x200037e4

0800485c <_close_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	2300      	movs	r3, #0
 8004860:	4c05      	ldr	r4, [pc, #20]	; (8004878 <_close_r+0x1c>)
 8004862:	4605      	mov	r5, r0
 8004864:	4608      	mov	r0, r1
 8004866:	6023      	str	r3, [r4, #0]
 8004868:	f000 f850 	bl	800490c <_close>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d102      	bne.n	8004876 <_close_r+0x1a>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	b103      	cbz	r3, 8004876 <_close_r+0x1a>
 8004874:	602b      	str	r3, [r5, #0]
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	200037e4 	.word	0x200037e4

0800487c <_fstat_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	2300      	movs	r3, #0
 8004880:	4c06      	ldr	r4, [pc, #24]	; (800489c <_fstat_r+0x20>)
 8004882:	4605      	mov	r5, r0
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	f000 f847 	bl	800491c <_fstat>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	d102      	bne.n	8004898 <_fstat_r+0x1c>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	b103      	cbz	r3, 8004898 <_fstat_r+0x1c>
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	bd38      	pop	{r3, r4, r5, pc}
 800489a:	bf00      	nop
 800489c:	200037e4 	.word	0x200037e4

080048a0 <_isatty_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	2300      	movs	r3, #0
 80048a4:	4c05      	ldr	r4, [pc, #20]	; (80048bc <_isatty_r+0x1c>)
 80048a6:	4605      	mov	r5, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	f000 f846 	bl	800493c <_isatty>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_isatty_r+0x1a>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_isatty_r+0x1a>
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	200037e4 	.word	0x200037e4

080048c0 <_lseek_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4605      	mov	r5, r0
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	2200      	movs	r2, #0
 80048ca:	4c05      	ldr	r4, [pc, #20]	; (80048e0 <_lseek_r+0x20>)
 80048cc:	6022      	str	r2, [r4, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 f844 	bl	800495c <_lseek>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_lseek_r+0x1e>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	b103      	cbz	r3, 80048de <_lseek_r+0x1e>
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	200037e4 	.word	0x200037e4

080048e4 <__malloc_lock>:
 80048e4:	4770      	bx	lr

080048e6 <__malloc_unlock>:
 80048e6:	4770      	bx	lr

080048e8 <_read_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4605      	mov	r5, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	4c05      	ldr	r4, [pc, #20]	; (8004908 <_read_r+0x20>)
 80048f4:	6022      	str	r2, [r4, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 f838 	bl	800496c <_read>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_read_r+0x1e>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	b103      	cbz	r3, 8004906 <_read_r+0x1e>
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	200037e4 	.word	0x200037e4

0800490c <_close>:
 800490c:	2258      	movs	r2, #88	; 0x58
 800490e:	4b02      	ldr	r3, [pc, #8]	; (8004918 <_close+0xc>)
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	4770      	bx	lr
 8004918:	200037e4 	.word	0x200037e4

0800491c <_fstat>:
 800491c:	2258      	movs	r2, #88	; 0x58
 800491e:	4b02      	ldr	r3, [pc, #8]	; (8004928 <_fstat+0xc>)
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	4770      	bx	lr
 8004928:	200037e4 	.word	0x200037e4

0800492c <_getpid>:
 800492c:	2258      	movs	r2, #88	; 0x58
 800492e:	4b02      	ldr	r3, [pc, #8]	; (8004938 <_getpid+0xc>)
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	4770      	bx	lr
 8004938:	200037e4 	.word	0x200037e4

0800493c <_isatty>:
 800493c:	2258      	movs	r2, #88	; 0x58
 800493e:	4b02      	ldr	r3, [pc, #8]	; (8004948 <_isatty+0xc>)
 8004940:	2000      	movs	r0, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200037e4 	.word	0x200037e4

0800494c <_kill>:
 800494c:	2258      	movs	r2, #88	; 0x58
 800494e:	4b02      	ldr	r3, [pc, #8]	; (8004958 <_kill+0xc>)
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	4770      	bx	lr
 8004958:	200037e4 	.word	0x200037e4

0800495c <_lseek>:
 800495c:	2258      	movs	r2, #88	; 0x58
 800495e:	4b02      	ldr	r3, [pc, #8]	; (8004968 <_lseek+0xc>)
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	4770      	bx	lr
 8004968:	200037e4 	.word	0x200037e4

0800496c <_read>:
 800496c:	2258      	movs	r2, #88	; 0x58
 800496e:	4b02      	ldr	r3, [pc, #8]	; (8004978 <_read+0xc>)
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	4770      	bx	lr
 8004978:	200037e4 	.word	0x200037e4

0800497c <_sbrk>:
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <_sbrk+0x14>)
 800497e:	4602      	mov	r2, r0
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	b909      	cbnz	r1, 8004988 <_sbrk+0xc>
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <_sbrk+0x18>)
 8004986:	6019      	str	r1, [r3, #0]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	4402      	add	r2, r0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4770      	bx	lr
 8004990:	2000379c 	.word	0x2000379c
 8004994:	200037e8 	.word	0x200037e8

08004998 <_write>:
 8004998:	2258      	movs	r2, #88	; 0x58
 800499a:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <_write+0xc>)
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	4770      	bx	lr
 80049a4:	200037e4 	.word	0x200037e4

080049a8 <_exit>:
 80049a8:	e7fe      	b.n	80049a8 <_exit>
	...

080049ac <_init>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr

080049b8 <_fini>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr
